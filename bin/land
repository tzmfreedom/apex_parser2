#!/usr/bin/env node

const ApexRunner = require('../lib/apex-runner.js')
const argv = require('optimist').argv

if (argv.i || argv.interactive) {
  const filename = argv.f
  const dirname = argv.d
  let klass, action
  if (argv.action) {
    const args = argv.action.split('#')
    klass = args[0]
    action = args[1]
  }
  interactiveRun(filename, dirname,klass, action)
} else if (argv.action) {
  run()
} else if (argv._[0] === 'setup') {
  createMetadata()
}

function run () {
  const filename = argv.f
  const dirname = argv.d
  const runner = new ApexRunner(filename, dirname)

  const args = argv.action.split('#')
  runner.run(args[0], args[1])
}

function createMetadata () {
  const process = require('process')
  const jsforce = require('jsforce')
  const conn = new jsforce.Connection()
  const prompt = require('prompt')
  const fs = require('fs')

  prompt.start()

  const schema = {
    properties: {
      username: {
        default: process.env.SALESFORCE_USERNAME
      },
      password: {
        required: true,
        hidden: true
      }
    }
  }

  prompt.get(schema, (err, result) => {
    conn.login(result.username, result.password, (err, userInfo) => {
      if (err) {
        return console.error(err)
      }
      fs.mkdirSync('meta')
      conn.describeGlobal((err, result) => {
        result.sobjects.forEach((sobject) => {
          conn.sobject(sobject.name).describe((err, meta) => {
            if (err) {
              return console.error(err)
            }
            fs.writeFileSync(`./meta/${sobject.name}.json`, JSON.stringify(meta))
          })
        })
      })
    })
  })
}

function interactiveRun (filename, dirname, klass, action) {
  const readline = require('readline')
  const handler = {
    run: (words, cb) => {
      if (words.length === 1) {
        klass = words[0]
      } else if (words.length === 2) {
        klass = words[0]
        action = words[1]
      }

      if (!klass) {
        throw new Error('specify class name')
      }
      if (!action) {
        action = 'run'
      }

      runner.run(klass, action, [], () => { cb(true) })
    },
    execute: (words, cb) => {
      if (words.length === 1) {
        klass = words[0]
      } else if (words.length === 2) {
        klass = words[0]
        action = words[1]
      }

      if (!klass) {
        throw new Error('specify class name')
      }
      if (!action) {
        action = 'run'
      }
      runner.execute(klass, action)
      cb(true)
    },
    reload: (words, cb) => {
      runner.reloadFile(words[0], words[1])
      cb(true)
    },
    exit: (words, cb) => {
      cb(false)
    }
  }
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  })
  const runner = new ApexRunner(filename, dirname)
  const question = () => {
    rl.question('> ', (word) => {
      const words = word.split(' ')
      const cmd = words.shift()
      try {
        if (!cmd || cmd === '') {
          question()
          return
        }

        if (cmd in handler) {
          handler[cmd](words, (result) => {
            if (result) {
              question()
            } else {
              rl.close()
            }
          })
        } else {
          throw new Error(`command not found: ${cmd}`)
        }
      } catch (e) {
        console.log(e)
        question()
      }
    })
  }
  runner.preload(() => {
    question()
  })
}
