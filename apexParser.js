// Generated from apex.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var apexListener = require('./apexListener').apexListener;
var apexVisitor = require('./apexVisitor').apexVisitor;

var grammarFileName = "apex.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003}\u0533\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0003\u0002\u0007\u0002\u00da\n\u0002\f\u0002\u000e\u0002",
    "\u00dd\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0007\u0003\u00e2",
    "\n\u0003\f\u0003\u000e\u0003\u00e5\u000b\u0003\u0003\u0003\u0003\u0003",
    "\u0007\u0003\u00e9\n\u0003\f\u0003\u000e\u0003\u00ec\u000b\u0003\u0003",
    "\u0003\u0003\u0003\u0007\u0003\u00f0\n\u0003\f\u0003\u000e\u0003\u00f3",
    "\u000b\u0003\u0003\u0003\u0003\u0003\u0007\u0003\u00f7\n\u0003\f\u0003",
    "\u000e\u0003\u00fa\u000b\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u00fe",
    "\n\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u0102\n\u0004\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u0106\n\u0005\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u010a\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007",
    "\u010f\n\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0113\n\u0007\u0003",
    "\u0007\u0003\u0007\u0005\u0007\u0117\n\u0007\u0003\u0007\u0003\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u011f\n\b\f\b\u000e\b\u0122",
    "\u000b\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0005\t\u0129\n\t\u0003",
    "\n\u0003\n\u0003\n\u0007\n\u012e\n\n\f\n\u000e\n\u0131\u000b\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0137\n\u000b",
    "\u0003\u000b\u0003\u000b\u0005\u000b\u013b\n\u000b\u0003\u000b\u0005",
    "\u000b\u013e\n\u000b\u0003\u000b\u0005\u000b\u0141\n\u000b\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0003\f\u0007\f\u0148\n\f\f\f\u000e\f\u014b",
    "\u000b\f\u0003\r\u0007\r\u014e\n\r\f\r\u000e\r\u0151\u000b\r\u0003\r",
    "\u0003\r\u0005\r\u0155\n\r\u0003\r\u0005\r\u0158\n\r\u0003\u000e\u0003",
    "\u000e\u0007\u000e\u015c\n\u000e\f\u000e\u000e\u000e\u015f\u000b\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0164\n\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u0168\n\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u016f\n\u0010\f\u0010",
    "\u000e\u0010\u0172\u000b\u0010\u0003\u0011\u0003\u0011\u0007\u0011\u0176",
    "\n\u0011\f\u0011\u000e\u0011\u0179\u000b\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0012\u0003\u0012\u0007\u0012\u017f\n\u0012\f\u0012\u000e\u0012",
    "\u0182\u000b\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0005",
    "\u0013\u0188\n\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u018c\n\u0013",
    "\f\u0013\u000e\u0013\u018f\u000b\u0013\u0003\u0013\u0005\u0013\u0192",
    "\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u019e\n\u0014\u0003\u0015\u0005\u0015\u01a1\n\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u01a5\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0007\u0015\u01ab\n\u0015\f\u0015\u000e\u0015\u01ae\u000b",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u01b2\n\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u01b6\n\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u01bf",
    "\n\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u01d1\n\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0007\u001c\u01d6",
    "\n\u001c\f\u001c\u000e\u001c\u01d9\u000b\u001c\u0003\u001c\u0003\u001c",
    "\u0005\u001c\u01dd\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u01e6\n\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01ec\n",
    "\u001e\f\u001e\u000e\u001e\u01ef\u000b\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u01f6\n\u001f\f\u001f",
    "\u000e\u001f\u01f9\u000b\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    " \u0003 \u0005 \u0200\n \u0003 \u0003 \u0003 \u0003 \u0007 \u0206\n",
    " \f \u000e \u0209\u000b \u0003 \u0003 \u0005 \u020d\n \u0003 \u0003",
    " \u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0007\"\u0217\n\"\f\"",
    "\u000e\"\u021a\u000b\"\u0003#\u0003#\u0003#\u0005#\u021f\n#\u0003$\u0003",
    "$\u0003$\u0007$\u0224\n$\f$\u000e$\u0227\u000b$\u0003%\u0003%\u0005",
    "%\u022b\n%\u0003&\u0003&\u0003&\u0003&\u0007&\u0231\n&\f&\u000e&\u0234",
    "\u000b&\u0003&\u0005&\u0237\n&\u0005&\u0239\n&\u0003&\u0003&\u0003\'",
    "\u0003\'\u0003(\u0003(\u0003(\u0007(\u0242\n(\f(\u000e(\u0245\u000b",
    "(\u0003(\u0003(\u0003(\u0007(\u024a\n(\f(\u000e(\u024d\u000b(\u0005",
    "(\u024f\n(\u0003)\u0003)\u0005)\u0253\n)\u0003)\u0003)\u0003)\u0005",
    ")\u0258\n)\u0007)\u025a\n)\f)\u000e)\u025d\u000b)\u0003)\u0003)\u0005",
    ")\u0261\n)\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0007+\u0269\n",
    "+\f+\u000e+\u026c\u000b+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0005",
    ",\u0274\n,\u0005,\u0276\n,\u0003-\u0003-\u0003-\u0007-\u027b\n-\f-\u000e",
    "-\u027e\u000b-\u0003.\u0003.\u0005.\u0282\n.\u0003.\u0003.\u0003/\u0003",
    "/\u0003/\u0007/\u0289\n/\f/\u000e/\u028c\u000b/\u0003/\u0003/\u0005",
    "/\u0290\n/\u0003/\u0005/\u0293\n/\u00030\u00070\u0296\n0\f0\u000e0\u0299",
    "\u000b0\u00030\u00030\u00030\u00031\u00071\u029f\n1\f1\u000e1\u02a2",
    "\u000b1\u00031\u00031\u00031\u00031\u00032\u00032\u00033\u00033\u0003",
    "4\u00034\u00034\u00074\u02af\n4\f4\u000e4\u02b2\u000b4\u00035\u0003",
    "5\u00036\u00036\u00036\u00036\u00036\u00056\u02bb\n6\u00036\u00056\u02be",
    "\n6\u00037\u00037\u00038\u00038\u00038\u00078\u02c5\n8\f8\u000e8\u02c8",
    "\u000b8\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0005:\u02d1",
    "\n:\u0003;\u0003;\u0003;\u0003;\u0007;\u02d7\n;\f;\u000e;\u02da\u000b",
    ";\u0005;\u02dc\n;\u0003;\u0005;\u02df\n;\u0003;\u0003;\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003=\u0003=\u0007=\u02ea\n=\f=\u000e=\u02ed",
    "\u000b=\u0003=\u0003=\u0003>\u0007>\u02f2\n>\f>\u000e>\u02f5\u000b>",
    "\u0003>\u0003>\u0005>\u02f9\n>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0005?\u0301\n?\u0003?\u0003?\u0005?\u0305\n?\u0003?\u0003?\u0005",
    "?\u0309\n?\u0003?\u0003?\u0005?\u030d\n?\u0005?\u030f\n?\u0003@\u0003",
    "@\u0005@\u0313\n@\u0003A\u0003A\u0003A\u0003A\u0005A\u0319\nA\u0003",
    "B\u0003B\u0003C\u0003C\u0003C\u0003D\u0003D\u0007D\u0322\nD\fD\u000e",
    "D\u0325\u000bD\u0003D\u0003D\u0003E\u0003E\u0003E\u0005E\u032c\nE\u0003",
    "F\u0003F\u0003F\u0003G\u0007G\u0332\nG\fG\u000eG\u0335\u000bG\u0003",
    "G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0005H\u0340",
    "\nH\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0006",
    "H\u0355\nH\rH\u000eH\u0356\u0003H\u0005H\u035a\nH\u0003H\u0005H\u035d",
    "\nH\u0003H\u0003H\u0003H\u0003H\u0007H\u0363\nH\fH\u000eH\u0366\u000b",
    "H\u0003H\u0005H\u0369\nH\u0003H\u0003H\u0005H\u036d\nH\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0005H\u0376\nH\u0003H\u0003H\u0003",
    "H\u0005H\u037b\nH\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0005H\u0388\nH\u0003I\u0007I\u038b\nI\fI\u000e",
    "I\u038e\u000bI\u0003I\u0003I\u0005I\u0392\nI\u0003J\u0003J\u0003J\u0005",
    "J\u0397\nJ\u0003K\u0003K\u0003K\u0005K\u039c\nK\u0003L\u0003L\u0003",
    "L\u0007L\u03a1\nL\fL\u000eL\u03a4\u000bL\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003M\u0003M\u0003M\u0007M\u03ae\nM\fM\u000eM\u03b1\u000b",
    "M\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0005O\u03b9\nO\u0003O\u0003",
    "O\u0003P\u0003P\u0003P\u0007P\u03c0\nP\fP\u000eP\u03c3\u000bP\u0003",
    "Q\u0007Q\u03c6\nQ\fQ\u000eQ\u03c9\u000bQ\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003R\u0003R\u0005R\u03d2\nR\u0003R\u0003R\u0005R\u03d6\n",
    "R\u0003R\u0003R\u0005R\u03da\nR\u0005R\u03dc\nR\u0003S\u0003S\u0005",
    "S\u03e0\nS\u0003T\u0007T\u03e3\nT\fT\u000eT\u03e6\u000bT\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0003",
    "W\u0003W\u0003W\u0007W\u03f6\nW\fW\u000eW\u03f9\u000bW\u0003X\u0003",
    "X\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003",
    "[\u0003\\\u0003\\\u0005\\\u0409\n\\\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0005]\u0418",
    "\n]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0005]\u0428\n]\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0005]\u044e\n]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0005]\u0456\n]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0005]\u0463\n]\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0005]\u0475\n]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0007",
    "]\u047d\n]\f]\u000e]\u0480\u000b]\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0005^\u0495\n^\u0003^\u0005^\u0498\n",
    "^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0005",
    "_\u04a3\n_\u0005_\u04a5\n_\u0003`\u0003`\u0005`\u04a9\n`\u0003`\u0003",
    "`\u0003`\u0005`\u04ae\n`\u0007`\u04b0\n`\f`\u000e`\u04b3\u000b`\u0003",
    "`\u0003`\u0003`\u0005`\u04b8\n`\u0003a\u0003a\u0005a\u04bc\na\u0003",
    "a\u0003a\u0003b\u0003b\u0003b\u0003b\u0007b\u04c4\nb\fb\u000eb\u04c7",
    "\u000bb\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0007b\u04d0",
    "\nb\fb\u000eb\u04d3\u000bb\u0003b\u0003b\u0007b\u04d7\nb\fb\u000eb\u04da",
    "\u000bb\u0005b\u04dc\nb\u0003c\u0003c\u0003c\u0005c\u04e1\nc\u0003c",
    "\u0003c\u0003c\u0005c\u04e6\nc\u0003c\u0003c\u0003c\u0005c\u04eb\nc",
    "\u0003c\u0003c\u0003c\u0005c\u04f0\nc\u0007c\u04f2\nc\fc\u000ec\u04f5",
    "\u000bc\u0003c\u0003c\u0003d\u0003d\u0003d\u0005d\u04fc\nd\u0003d\u0003",
    "d\u0003d\u0005d\u0501\nd\u0007d\u0503\nd\fd\u000ed\u0506\u000bd\u0003",
    "d\u0003d\u0003e\u0003e\u0005e\u050c\ne\u0003f\u0003f\u0003f\u0003g\u0003",
    "g\u0003g\u0003g\u0003h\u0003h\u0003h\u0005h\u0518\nh\u0003i\u0003i\u0003",
    "i\u0005i\u051d\ni\u0003j\u0003j\u0003j\u0003j\u0005j\u0523\nj\u0005",
    "j\u0525\nj\u0003k\u0003k\u0003k\u0003k\u0005k\u052b\nk\u0003l\u0003",
    "l\u0005l\u052f\nl\u0003l\u0003l\u0003l\u0002\u0003\u00b8m\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u0002\u0010\u0005\u0002$$..22\t\u0002",
    "\u0004\u0005\t\t\u0018\u0018\'),,7:AA\n\u0002\n\n\f\f\u000e\u000e\u0014",
    "\u0014\u001a\u001a!!##++\u0004\u0002\u0017\u0017--\u0003\u0002BG\u0003",
    "\u0002<@\u0003\u0002^a\u0003\u0002TU\u0004\u0002bcgg\u0003\u0002`a\u0004",
    "\u0002RSYZ\u0004\u0002XX[[\u0004\u0002QQhr\u0003\u0002^_\u0002\u05aa",
    "\u0002\u00db\u0003\u0002\u0002\u0002\u0004\u00fd\u0003\u0002\u0002\u0002",
    "\u0006\u0101\u0003\u0002\u0002\u0002\b\u0105\u0003\u0002\u0002\u0002",
    "\n\u0109\u0003\u0002\u0002\u0002\f\u010b\u0003\u0002\u0002\u0002\u000e",
    "\u011a\u0003\u0002\u0002\u0002\u0010\u0125\u0003\u0002\u0002\u0002\u0012",
    "\u012a\u0003\u0002\u0002\u0002\u0014\u0132\u0003\u0002\u0002\u0002\u0016",
    "\u0144\u0003\u0002\u0002\u0002\u0018\u014f\u0003\u0002\u0002\u0002\u001a",
    "\u0159\u0003\u0002\u0002\u0002\u001c\u0160\u0003\u0002\u0002\u0002\u001e",
    "\u016b\u0003\u0002\u0002\u0002 \u0173\u0003\u0002\u0002\u0002\"\u017c",
    "\u0003\u0002\u0002\u0002$\u0191\u0003\u0002\u0002\u0002&\u019d\u0003",
    "\u0002\u0002\u0002(\u01a0\u0003\u0002\u0002\u0002*\u01b7\u0003\u0002",
    "\u0002\u0002,\u01ba\u0003\u0002\u0002\u0002.\u01c2\u0003\u0002\u0002",
    "\u00020\u01c5\u0003\u0002\u0002\u00022\u01c9\u0003\u0002\u0002\u0002",
    "4\u01cd\u0003\u0002\u0002\u00026\u01dc\u0003\u0002\u0002\u00028\u01e5",
    "\u0003\u0002\u0002\u0002:\u01e7\u0003\u0002\u0002\u0002<\u01f2\u0003",
    "\u0002\u0002\u0002>\u01ff\u0003\u0002\u0002\u0002@\u0210\u0003\u0002",
    "\u0002\u0002B\u0213\u0003\u0002\u0002\u0002D\u021b\u0003\u0002\u0002",
    "\u0002F\u0220\u0003\u0002\u0002\u0002H\u022a\u0003\u0002\u0002\u0002",
    "J\u022c\u0003\u0002\u0002\u0002L\u023c\u0003\u0002\u0002\u0002N\u024e",
    "\u0003\u0002\u0002\u0002P\u0260\u0003\u0002\u0002\u0002R\u0262\u0003",
    "\u0002\u0002\u0002T\u0264\u0003\u0002\u0002\u0002V\u0275\u0003\u0002",
    "\u0002\u0002X\u0277\u0003\u0002\u0002\u0002Z\u027f\u0003\u0002\u0002",
    "\u0002\\\u0292\u0003\u0002\u0002\u0002^\u0297\u0003\u0002\u0002\u0002",
    "`\u02a0\u0003\u0002\u0002\u0002b\u02a7\u0003\u0002\u0002\u0002d\u02a9",
    "\u0003\u0002\u0002\u0002f\u02ab\u0003\u0002\u0002\u0002h\u02b3\u0003",
    "\u0002\u0002\u0002j\u02b5\u0003\u0002\u0002\u0002l\u02bf\u0003\u0002",
    "\u0002\u0002n\u02c1\u0003\u0002\u0002\u0002p\u02c9\u0003\u0002\u0002",
    "\u0002r\u02d0\u0003\u0002\u0002\u0002t\u02d2\u0003\u0002\u0002\u0002",
    "v\u02e2\u0003\u0002\u0002\u0002x\u02e7\u0003\u0002\u0002\u0002z\u02f8",
    "\u0003\u0002\u0002\u0002|\u030e\u0003\u0002\u0002\u0002~\u0312\u0003",
    "\u0002\u0002\u0002\u0080\u0314\u0003\u0002\u0002\u0002\u0082\u031a\u0003",
    "\u0002\u0002\u0002\u0084\u031c\u0003\u0002\u0002\u0002\u0086\u031f\u0003",
    "\u0002\u0002\u0002\u0088\u032b\u0003\u0002\u0002\u0002\u008a\u032d\u0003",
    "\u0002\u0002\u0002\u008c\u0333\u0003\u0002\u0002\u0002\u008e\u0387\u0003",
    "\u0002\u0002\u0002\u0090\u038c\u0003\u0002\u0002\u0002\u0092\u0393\u0003",
    "\u0002\u0002\u0002\u0094\u0398\u0003\u0002\u0002\u0002\u0096\u039d\u0003",
    "\u0002\u0002\u0002\u0098\u03aa\u0003\u0002\u0002\u0002\u009a\u03b2\u0003",
    "\u0002\u0002\u0002\u009c\u03b5\u0003\u0002\u0002\u0002\u009e\u03bc\u0003",
    "\u0002\u0002\u0002\u00a0\u03c7\u0003\u0002\u0002\u0002\u00a2\u03db\u0003",
    "\u0002\u0002\u0002\u00a4\u03df\u0003\u0002\u0002\u0002\u00a6\u03e4\u0003",
    "\u0002\u0002\u0002\u00a8\u03ec\u0003\u0002\u0002\u0002\u00aa\u03ee\u0003",
    "\u0002\u0002\u0002\u00ac\u03f2\u0003\u0002\u0002\u0002\u00ae\u03fa\u0003",
    "\u0002\u0002\u0002\u00b0\u03fc\u0003\u0002\u0002\u0002\u00b2\u03fe\u0003",
    "\u0002\u0002\u0002\u00b4\u0403\u0003\u0002\u0002\u0002\u00b6\u0408\u0003",
    "\u0002\u0002\u0002\u00b8\u0417\u0003\u0002\u0002\u0002\u00ba\u0497\u0003",
    "\u0002\u0002\u0002\u00bc\u04a4\u0003\u0002\u0002\u0002\u00be\u04b7\u0003",
    "\u0002\u0002\u0002\u00c0\u04b9\u0003\u0002\u0002\u0002\u00c2\u04bf\u0003",
    "\u0002\u0002\u0002\u00c4\u04dd\u0003\u0002\u0002\u0002\u00c6\u04f8\u0003",
    "\u0002\u0002\u0002\u00c8\u0509\u0003\u0002\u0002\u0002\u00ca\u050d\u0003",
    "\u0002\u0002\u0002\u00cc\u0510\u0003\u0002\u0002\u0002\u00ce\u0517\u0003",
    "\u0002\u0002\u0002\u00d0\u051c\u0003\u0002\u0002\u0002\u00d2\u0524\u0003",
    "\u0002\u0002\u0002\u00d4\u052a\u0003\u0002\u0002\u0002\u00d6\u052c\u0003",
    "\u0002\u0002\u0002\u00d8\u00da\u0005\u0004\u0003\u0002\u00d9\u00d8\u0003",
    "\u0002\u0002\u0002\u00da\u00dd\u0003\u0002\u0002\u0002\u00db\u00d9\u0003",
    "\u0002\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u00de\u0003",
    "\u0002\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002\u00de\u00df\u0007",
    "\u0002\u0002\u0003\u00df\u0003\u0003\u0002\u0002\u0002\u00e0\u00e2\u0005",
    "\b\u0005\u0002\u00e1\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e5\u0003",
    "\u0002\u0002\u0002\u00e3\u00e1\u0003\u0002\u0002\u0002\u00e3\u00e4\u0003",
    "\u0002\u0002\u0002\u00e4\u00e6\u0003\u0002\u0002\u0002\u00e5\u00e3\u0003",
    "\u0002\u0002\u0002\u00e6\u00fe\u0005\f\u0007\u0002\u00e7\u00e9\u0005",
    "\b\u0005\u0002\u00e8\u00e7\u0003\u0002\u0002\u0002\u00e9\u00ec\u0003",
    "\u0002\u0002\u0002\u00ea\u00e8\u0003\u0002\u0002\u0002\u00ea\u00eb\u0003",
    "\u0002\u0002\u0002\u00eb\u00ed\u0003\u0002\u0002\u0002\u00ec\u00ea\u0003",
    "\u0002\u0002\u0002\u00ed\u00fe\u0005\u0014\u000b\u0002\u00ee\u00f0\u0005",
    "\b\u0005\u0002\u00ef\u00ee\u0003\u0002\u0002\u0002\u00f0\u00f3\u0003",
    "\u0002\u0002\u0002\u00f1\u00ef\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003",
    "\u0002\u0002\u0002\u00f2\u00f4\u0003\u0002\u0002\u0002\u00f3\u00f1\u0003",
    "\u0002\u0002\u0002\u00f4\u00fe\u0005\u001c\u000f\u0002\u00f5\u00f7\u0005",
    "\b\u0005\u0002\u00f6\u00f5\u0003\u0002\u0002\u0002\u00f7\u00fa\u0003",
    "\u0002\u0002\u0002\u00f8\u00f6\u0003\u0002\u0002\u0002\u00f8\u00f9\u0003",
    "\u0002\u0002\u0002\u00f9\u00fb\u0003\u0002\u0002\u0002\u00fa\u00f8\u0003",
    "\u0002\u0002\u0002\u00fb\u00fe\u0005v<\u0002\u00fc\u00fe\u0007N\u0002",
    "\u0002\u00fd\u00e3\u0003\u0002\u0002\u0002\u00fd\u00ea\u0003\u0002\u0002",
    "\u0002\u00fd\u00f1\u0003\u0002\u0002\u0002\u00fd\u00f8\u0003\u0002\u0002",
    "\u0002\u00fd\u00fc\u0003\u0002\u0002\u0002\u00fe\u0005\u0003\u0002\u0002",
    "\u0002\u00ff\u0102\u0005\b\u0005\u0002\u0100\u0102\t\u0002\u0002\u0002",
    "\u0101\u00ff\u0003\u0002\u0002\u0002\u0101\u0100\u0003\u0002\u0002\u0002",
    "\u0102\u0007\u0003\u0002\u0002\u0002\u0103\u0106\u0005j6\u0002\u0104",
    "\u0106\t\u0003\u0002\u0002\u0105\u0103\u0003\u0002\u0002\u0002\u0105",
    "\u0104\u0003\u0002\u0002\u0002\u0106\t\u0003\u0002\u0002\u0002\u0107",
    "\u010a\u0007\u0018\u0002\u0002\u0108\u010a\u0005j6\u0002\u0109\u0107",
    "\u0003\u0002\u0002\u0002\u0109\u0108\u0003\u0002\u0002\u0002\u010a\u000b",
    "\u0003\u0002\u0002\u0002\u010b\u010c\u0007\u000f\u0002\u0002\u010c\u010e",
    "\u0007t\u0002\u0002\u010d\u010f\u0005\u000e\b\u0002\u010e\u010d\u0003",
    "\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u0112\u0003",
    "\u0002\u0002\u0002\u0110\u0111\u0007\u0017\u0002\u0002\u0111\u0113\u0005",
    "N(\u0002\u0112\u0110\u0003\u0002\u0002\u0002\u0112\u0113\u0003\u0002",
    "\u0002\u0002\u0113\u0116\u0003\u0002\u0002\u0002\u0114\u0115\u0007\u001e",
    "\u0002\u0002\u0115\u0117\u0005\u001e\u0010\u0002\u0116\u0114\u0003\u0002",
    "\u0002\u0002\u0116\u0117\u0003\u0002\u0002\u0002\u0117\u0118\u0003\u0002",
    "\u0002\u0002\u0118\u0119\u0005 \u0011\u0002\u0119\r\u0003\u0002\u0002",
    "\u0002\u011a\u011b\u0007S\u0002\u0002\u011b\u0120\u0005\u0010\t\u0002",
    "\u011c\u011d\u0007O\u0002\u0002\u011d\u011f\u0005\u0010\t\u0002\u011e",
    "\u011c\u0003\u0002\u0002\u0002\u011f\u0122\u0003\u0002\u0002\u0002\u0120",
    "\u011e\u0003\u0002\u0002\u0002\u0120\u0121\u0003\u0002\u0002\u0002\u0121",
    "\u0123\u0003\u0002\u0002\u0002\u0122\u0120\u0003\u0002\u0002\u0002\u0123",
    "\u0124\u0007R\u0002\u0002\u0124\u000f\u0003\u0002\u0002\u0002\u0125",
    "\u0128\u0007t\u0002\u0002\u0126\u0127\u0007\u0017\u0002\u0002\u0127",
    "\u0129\u0005\u0012\n\u0002\u0128\u0126\u0003\u0002\u0002\u0002\u0128",
    "\u0129\u0003\u0002\u0002\u0002\u0129\u0011\u0003\u0002\u0002\u0002\u012a",
    "\u012f\u0005N(\u0002\u012b\u012c\u0007d\u0002\u0002\u012c\u012e\u0005",
    "N(\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012e\u0131\u0003\u0002",
    "\u0002\u0002\u012f\u012d\u0003\u0002\u0002\u0002\u012f\u0130\u0003\u0002",
    "\u0002\u0002\u0130\u0013\u0003\u0002\u0002\u0002\u0131\u012f\u0003\u0002",
    "\u0002\u0002\u0132\u0133\u0007\u0016\u0002\u0002\u0133\u0136\u0007t",
    "\u0002\u0002\u0134\u0135\u0007\u001e\u0002\u0002\u0135\u0137\u0005\u001e",
    "\u0010\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002",
    "\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138\u013a\u0007J",
    "\u0002\u0002\u0139\u013b\u0005\u0016\f\u0002\u013a\u0139\u0003\u0002",
    "\u0002\u0002\u013a\u013b\u0003\u0002\u0002\u0002\u013b\u013d\u0003\u0002",
    "\u0002\u0002\u013c\u013e\u0007O\u0002\u0002\u013d\u013c\u0003\u0002",
    "\u0002\u0002\u013d\u013e\u0003\u0002\u0002\u0002\u013e\u0140\u0003\u0002",
    "\u0002\u0002\u013f\u0141\u0005\u001a\u000e\u0002\u0140\u013f\u0003\u0002",
    "\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002\u0141\u0142\u0003\u0002",
    "\u0002\u0002\u0142\u0143\u0007K\u0002\u0002\u0143\u0015\u0003\u0002",
    "\u0002\u0002\u0144\u0149\u0005\u0018\r\u0002\u0145\u0146\u0007O\u0002",
    "\u0002\u0146\u0148\u0005\u0018\r\u0002\u0147\u0145\u0003\u0002\u0002",
    "\u0002\u0148\u014b\u0003\u0002\u0002\u0002\u0149\u0147\u0003\u0002\u0002",
    "\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a\u0017\u0003\u0002\u0002",
    "\u0002\u014b\u0149\u0003\u0002\u0002\u0002\u014c\u014e\u0005j6\u0002",
    "\u014d\u014c\u0003\u0002\u0002\u0002\u014e\u0151\u0003\u0002\u0002\u0002",
    "\u014f\u014d\u0003\u0002\u0002\u0002\u014f\u0150\u0003\u0002\u0002\u0002",
    "\u0150\u0152\u0003\u0002\u0002\u0002\u0151\u014f\u0003\u0002\u0002\u0002",
    "\u0152\u0154\u0007t\u0002\u0002\u0153\u0155\u0005\u00d6l\u0002\u0154",
    "\u0153\u0003\u0002\u0002\u0002\u0154\u0155\u0003\u0002\u0002\u0002\u0155",
    "\u0157\u0003\u0002\u0002\u0002\u0156\u0158\u0005 \u0011\u0002\u0157",
    "\u0156\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002\u0158",
    "\u0019\u0003\u0002\u0002\u0002\u0159\u015d\u0007N\u0002\u0002\u015a",
    "\u015c\u0005$\u0013\u0002\u015b\u015a\u0003\u0002\u0002\u0002\u015c",
    "\u015f\u0003\u0002\u0002\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015d",
    "\u015e\u0003\u0002\u0002\u0002\u015e\u001b\u0003\u0002\u0002\u0002\u015f",
    "\u015d\u0003\u0002\u0002\u0002\u0160\u0161\u0007\"\u0002\u0002\u0161",
    "\u0163\u0007t\u0002\u0002\u0162\u0164\u0005\u000e\b\u0002\u0163\u0162",
    "\u0003\u0002\u0002\u0002\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u0167",
    "\u0003\u0002\u0002\u0002\u0165\u0166\u0007\u0017\u0002\u0002\u0166\u0168",
    "\u0005\u001e\u0010\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0167\u0168",
    "\u0003\u0002\u0002\u0002\u0168\u0169\u0003\u0002\u0002\u0002\u0169\u016a",
    "\u0005\"\u0012\u0002\u016a\u001d\u0003\u0002\u0002\u0002\u016b\u0170",
    "\u0005N(\u0002\u016c\u016d\u0007O\u0002\u0002\u016d\u016f\u0005N(\u0002",
    "\u016e\u016c\u0003\u0002\u0002\u0002\u016f\u0172\u0003\u0002\u0002\u0002",
    "\u0170\u016e\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002",
    "\u0171\u001f\u0003\u0002\u0002\u0002\u0172\u0170\u0003\u0002\u0002\u0002",
    "\u0173\u0177\u0007J\u0002\u0002\u0174\u0176\u0005$\u0013\u0002\u0175",
    "\u0174\u0003\u0002\u0002\u0002\u0176\u0179\u0003\u0002\u0002\u0002\u0177",
    "\u0175\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178",
    "\u017a\u0003\u0002\u0002\u0002\u0179\u0177\u0003\u0002\u0002\u0002\u017a",
    "\u017b\u0007K\u0002\u0002\u017b!\u0003\u0002\u0002\u0002\u017c\u0180",
    "\u0007J\u0002\u0002\u017d\u017f\u00056\u001c\u0002\u017e\u017d\u0003",
    "\u0002\u0002\u0002\u017f\u0182\u0003\u0002\u0002\u0002\u0180\u017e\u0003",
    "\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0183\u0003",
    "\u0002\u0002\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0183\u0184\u0007",
    "K\u0002\u0002\u0184#\u0003\u0002\u0002\u0002\u0185\u0192\u0007N\u0002",
    "\u0002\u0186\u0188\u0007,\u0002\u0002\u0187\u0186\u0003\u0002\u0002",
    "\u0002\u0187\u0188\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002",
    "\u0002\u0189\u0192\u0005\u0086D\u0002\u018a\u018c\u0005\u0006\u0004",
    "\u0002\u018b\u018a\u0003\u0002\u0002\u0002\u018c\u018f\u0003\u0002\u0002",
    "\u0002\u018d\u018b\u0003\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002",
    "\u0002\u018e\u0190\u0003\u0002\u0002\u0002\u018f\u018d\u0003\u0002\u0002",
    "\u0002\u0190\u0192\u0005&\u0014\u0002\u0191\u0185\u0003\u0002\u0002",
    "\u0002\u0191\u0187\u0003\u0002\u0002\u0002\u0191\u018d\u0003\u0002\u0002",
    "\u0002\u0192%\u0003\u0002\u0002\u0002\u0193\u019e\u0005(\u0015\u0002",
    "\u0194\u019e\u0005*\u0016\u0002\u0195\u019e\u00050\u0019\u0002\u0196",
    "\u019e\u0005,\u0017\u0002\u0197\u019e\u0005.\u0018\u0002\u0198\u019e",
    "\u0005\u001c\u000f\u0002\u0199\u019e\u0005v<\u0002\u019a\u019e\u0005",
    "\f\u0007\u0002\u019b\u019e\u0005\u0014\u000b\u0002\u019c\u019e\u0005",
    "2\u001a\u0002\u019d\u0193\u0003\u0002\u0002\u0002\u019d\u0194\u0003",
    "\u0002\u0002\u0002\u019d\u0195\u0003\u0002\u0002\u0002\u019d\u0196\u0003",
    "\u0002\u0002\u0002\u019d\u0197\u0003\u0002\u0002\u0002\u019d\u0198\u0003",
    "\u0002\u0002\u0002\u019d\u0199\u0003\u0002\u0002\u0002\u019d\u019a\u0003",
    "\u0002\u0002\u0002\u019d\u019b\u0003\u0002\u0002\u0002\u019d\u019c\u0003",
    "\u0002\u0002\u0002\u019e\'\u0003\u0002\u0002\u0002\u019f\u01a1\u0007",
    "\u0004\u0002\u0002\u01a0\u019f\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003",
    "\u0002\u0002\u0002\u01a1\u01a4\u0003\u0002\u0002\u0002\u01a2\u01a5\u0005",
    "N(\u0002\u01a3\u01a5\u00074\u0002\u0002\u01a4\u01a2\u0003\u0002\u0002",
    "\u0002\u01a4\u01a3\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002",
    "\u0002\u01a6\u01a7\u0007t\u0002\u0002\u01a7\u01ac\u0005Z.\u0002\u01a8",
    "\u01a9\u0007L\u0002\u0002\u01a9\u01ab\u0007M\u0002\u0002\u01aa\u01a8",
    "\u0003\u0002\u0002\u0002\u01ab\u01ae\u0003\u0002\u0002\u0002\u01ac\u01aa",
    "\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01b1",
    "\u0003\u0002\u0002\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002\u01af\u01b0",
    "\u00071\u0002\u0002\u01b0\u01b2\u0005X-\u0002\u01b1\u01af\u0003\u0002",
    "\u0002\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b5\u0003\u0002",
    "\u0002\u0002\u01b3\u01b6\u0005b2\u0002\u01b4\u01b6\u0007N\u0002\u0002",
    "\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b5\u01b4\u0003\u0002\u0002\u0002",
    "\u01b6)\u0003\u0002\u0002\u0002\u01b7\u01b8\u0005\u000e\b\u0002\u01b8",
    "\u01b9\u0005(\u0015\u0002\u01b9+\u0003\u0002\u0002\u0002\u01ba\u01bb",
    "\u0007t\u0002\u0002\u01bb\u01be\u0005Z.\u0002\u01bc\u01bd\u00071\u0002",
    "\u0002\u01bd\u01bf\u0005X-\u0002\u01be\u01bc\u0003\u0002\u0002\u0002",
    "\u01be\u01bf\u0003\u0002\u0002\u0002\u01bf\u01c0\u0003\u0002\u0002\u0002",
    "\u01c0\u01c1\u0005d3\u0002\u01c1-\u0003\u0002\u0002\u0002\u01c2\u01c3",
    "\u0005\u000e\b\u0002\u01c3\u01c4\u0005,\u0017\u0002\u01c4/\u0003\u0002",
    "\u0002\u0002\u01c5\u01c6\u0005N(\u0002\u01c6\u01c7\u0005B\"\u0002\u01c7",
    "\u01c8\u0007N\u0002\u0002\u01c81\u0003\u0002\u0002\u0002\u01c9\u01ca",
    "\u0005N(\u0002\u01ca\u01cb\u0005B\"\u0002\u01cb\u01cc\u00054\u001b\u0002",
    "\u01cc3\u0003\u0002\u0002\u0002\u01cd\u01ce\u0007J\u0002\u0002\u01ce",
    "\u01d0\u0005\u0090I\u0002\u01cf\u01d1\u0005\u0090I\u0002\u01d0\u01cf",
    "\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002\u01d1\u01d2",
    "\u0003\u0002\u0002\u0002\u01d2\u01d3\u0007K\u0002\u0002\u01d35\u0003",
    "\u0002\u0002\u0002\u01d4\u01d6\u0005\u0006\u0004\u0002\u01d5\u01d4\u0003",
    "\u0002\u0002\u0002\u01d6\u01d9\u0003\u0002\u0002\u0002\u01d7\u01d5\u0003",
    "\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01da\u0003",
    "\u0002\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01da\u01dd\u0005",
    "8\u001d\u0002\u01db\u01dd\u0007N\u0002\u0002\u01dc\u01d7\u0003\u0002",
    "\u0002\u0002\u01dc\u01db\u0003\u0002\u0002\u0002\u01dd7\u0003\u0002",
    "\u0002\u0002\u01de\u01e6\u0005:\u001e\u0002\u01df\u01e6\u0005> \u0002",
    "\u01e0\u01e6\u0005@!\u0002\u01e1\u01e6\u0005\u001c\u000f\u0002\u01e2",
    "\u01e6\u0005v<\u0002\u01e3\u01e6\u0005\f\u0007\u0002\u01e4\u01e6\u0005",
    "\u0014\u000b\u0002\u01e5\u01de\u0003\u0002\u0002\u0002\u01e5\u01df\u0003",
    "\u0002\u0002\u0002\u01e5\u01e0\u0003\u0002\u0002\u0002\u01e5\u01e1\u0003",
    "\u0002\u0002\u0002\u01e5\u01e2\u0003\u0002\u0002\u0002\u01e5\u01e3\u0003",
    "\u0002\u0002\u0002\u01e5\u01e4\u0003\u0002\u0002\u0002\u01e69\u0003",
    "\u0002\u0002\u0002\u01e7\u01e8\u0005N(\u0002\u01e8\u01ed\u0005<\u001f",
    "\u0002\u01e9\u01ea\u0007O\u0002\u0002\u01ea\u01ec\u0005<\u001f\u0002",
    "\u01eb\u01e9\u0003\u0002\u0002\u0002\u01ec\u01ef\u0003\u0002\u0002\u0002",
    "\u01ed\u01eb\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002",
    "\u01ee\u01f0\u0003\u0002\u0002\u0002\u01ef\u01ed\u0003\u0002\u0002\u0002",
    "\u01f0\u01f1\u0007N\u0002\u0002\u01f1;\u0003\u0002\u0002\u0002\u01f2",
    "\u01f7\u0007t\u0002\u0002\u01f3\u01f4\u0007L\u0002\u0002\u01f4\u01f6",
    "\u0007M\u0002\u0002\u01f5\u01f3\u0003\u0002\u0002\u0002\u01f6\u01f9",
    "\u0003\u0002\u0002\u0002\u01f7\u01f5\u0003\u0002\u0002\u0002\u01f7\u01f8",
    "\u0003\u0002\u0002\u0002\u01f8\u01fa\u0003\u0002\u0002\u0002\u01f9\u01f7",
    "\u0003\u0002\u0002\u0002\u01fa\u01fb\u0007Q\u0002\u0002\u01fb\u01fc",
    "\u0005H%\u0002\u01fc=\u0003\u0002\u0002\u0002\u01fd\u0200\u0005N(\u0002",
    "\u01fe\u0200\u00074\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002",
    "\u01ff\u01fe\u0003\u0002\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002",
    "\u0201\u0202\u0007t\u0002\u0002\u0202\u0207\u0005Z.\u0002\u0203\u0204",
    "\u0007L\u0002\u0002\u0204\u0206\u0007M\u0002\u0002\u0205\u0203\u0003",
    "\u0002\u0002\u0002\u0206\u0209\u0003\u0002\u0002\u0002\u0207\u0205\u0003",
    "\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002\u0208\u020c\u0003",
    "\u0002\u0002\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u020a\u020b\u0007",
    "1\u0002\u0002\u020b\u020d\u0005X-\u0002\u020c\u020a\u0003\u0002\u0002",
    "\u0002\u020c\u020d\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002",
    "\u0002\u020e\u020f\u0007N\u0002\u0002\u020f?\u0003\u0002\u0002\u0002",
    "\u0210\u0211\u0005\u000e\b\u0002\u0211\u0212\u0005> \u0002\u0212A\u0003",
    "\u0002\u0002\u0002\u0213\u0218\u0005D#\u0002\u0214\u0215\u0007O\u0002",
    "\u0002\u0215\u0217\u0005D#\u0002\u0216\u0214\u0003\u0002\u0002\u0002",
    "\u0217\u021a\u0003\u0002\u0002\u0002\u0218\u0216\u0003\u0002\u0002\u0002",
    "\u0218\u0219\u0003\u0002\u0002\u0002\u0219C\u0003\u0002\u0002\u0002",
    "\u021a\u0218\u0003\u0002\u0002\u0002\u021b\u021e\u0005F$\u0002\u021c",
    "\u021d\u0007Q\u0002\u0002\u021d\u021f\u0005H%\u0002\u021e\u021c\u0003",
    "\u0002\u0002\u0002\u021e\u021f\u0003\u0002\u0002\u0002\u021fE\u0003",
    "\u0002\u0002\u0002\u0220\u0225\u0007t\u0002\u0002\u0221\u0222\u0007",
    "L\u0002\u0002\u0222\u0224\u0007M\u0002\u0002\u0223\u0221\u0003\u0002",
    "\u0002\u0002\u0224\u0227\u0003\u0002\u0002\u0002\u0225\u0223\u0003\u0002",
    "\u0002\u0002\u0225\u0226\u0003\u0002\u0002\u0002\u0226G\u0003\u0002",
    "\u0002\u0002\u0227\u0225\u0003\u0002\u0002\u0002\u0228\u022b\u0005J",
    "&\u0002\u0229\u022b\u0005\u00b8]\u0002\u022a\u0228\u0003\u0002\u0002",
    "\u0002\u022a\u0229\u0003\u0002\u0002\u0002\u022bI\u0003\u0002\u0002",
    "\u0002\u022c\u0238\u0007J\u0002\u0002\u022d\u0232\u0005H%\u0002\u022e",
    "\u022f\u0007O\u0002\u0002\u022f\u0231\u0005H%\u0002\u0230\u022e\u0003",
    "\u0002\u0002\u0002\u0231\u0234\u0003\u0002\u0002\u0002\u0232\u0230\u0003",
    "\u0002\u0002\u0002\u0232\u0233\u0003\u0002\u0002\u0002\u0233\u0236\u0003",
    "\u0002\u0002\u0002\u0234\u0232\u0003\u0002\u0002\u0002\u0235\u0237\u0007",
    "O\u0002\u0002\u0236\u0235\u0003\u0002\u0002\u0002\u0236\u0237\u0003",
    "\u0002\u0002\u0002\u0237\u0239\u0003\u0002\u0002\u0002\u0238\u022d\u0003",
    "\u0002\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002\u0239\u023a\u0003",
    "\u0002\u0002\u0002\u023a\u023b\u0007K\u0002\u0002\u023bK\u0003\u0002",
    "\u0002\u0002\u023c\u023d\u0007t\u0002\u0002\u023dM\u0003\u0002\u0002",
    "\u0002\u023e\u0243\u0005P)\u0002\u023f\u0240\u0007L\u0002\u0002\u0240",
    "\u0242\u0007M\u0002\u0002\u0241\u023f\u0003\u0002\u0002\u0002\u0242",
    "\u0245\u0003\u0002\u0002\u0002\u0243\u0241\u0003\u0002\u0002\u0002\u0243",
    "\u0244\u0003\u0002\u0002\u0002\u0244\u024f\u0003\u0002\u0002\u0002\u0245",
    "\u0243\u0003\u0002\u0002\u0002\u0246\u024b\u0005R*\u0002\u0247\u0248",
    "\u0007L\u0002\u0002\u0248\u024a\u0007M\u0002\u0002\u0249\u0247\u0003",
    "\u0002\u0002\u0002\u024a\u024d\u0003\u0002\u0002\u0002\u024b\u0249\u0003",
    "\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u024f\u0003",
    "\u0002\u0002\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024e\u023e\u0003",
    "\u0002\u0002\u0002\u024e\u0246\u0003\u0002\u0002\u0002\u024fO\u0003",
    "\u0002\u0002\u0002\u0250\u0252\u0007t\u0002\u0002\u0251\u0253\u0005",
    "T+\u0002\u0252\u0251\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002",
    "\u0002\u0002\u0253\u025b\u0003\u0002\u0002\u0002\u0254\u0255\u0007P",
    "\u0002\u0002\u0255\u0257\u0007t\u0002\u0002\u0256\u0258\u0005T+\u0002",
    "\u0257\u0256\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002",
    "\u0258\u025a\u0003\u0002\u0002\u0002\u0259\u0254\u0003\u0002\u0002\u0002",
    "\u025a\u025d\u0003\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002\u0002",
    "\u025b\u025c\u0003\u0002\u0002\u0002\u025c\u0261\u0003\u0002\u0002\u0002",
    "\u025d\u025b\u0003\u0002\u0002\u0002\u025e\u025f\u0007\u0006\u0002\u0002",
    "\u025f\u0261\u0005T+\u0002\u0260\u0250\u0003\u0002\u0002\u0002\u0260",
    "\u025e\u0003\u0002\u0002\u0002\u0261Q\u0003\u0002\u0002\u0002\u0262",
    "\u0263\t\u0004\u0002\u0002\u0263S\u0003\u0002\u0002\u0002\u0264\u0265",
    "\u0007S\u0002\u0002\u0265\u026a\u0005V,\u0002\u0266\u0267\u0007O\u0002",
    "\u0002\u0267\u0269\u0005V,\u0002\u0268\u0266\u0003\u0002\u0002\u0002",
    "\u0269\u026c\u0003\u0002\u0002\u0002\u026a\u0268\u0003\u0002\u0002\u0002",
    "\u026a\u026b\u0003\u0002\u0002\u0002\u026b\u026d\u0003\u0002\u0002\u0002",
    "\u026c\u026a\u0003\u0002\u0002\u0002\u026d\u026e\u0007R\u0002\u0002",
    "\u026eU\u0003\u0002\u0002\u0002\u026f\u0276\u0005N(\u0002\u0270\u0273",
    "\u0007V\u0002\u0002\u0271\u0272\t\u0005\u0002\u0002\u0272\u0274\u0005",
    "N(\u0002\u0273\u0271\u0003\u0002\u0002\u0002\u0273\u0274\u0003\u0002",
    "\u0002\u0002\u0274\u0276\u0003\u0002\u0002\u0002\u0275\u026f\u0003\u0002",
    "\u0002\u0002\u0275\u0270\u0003\u0002\u0002\u0002\u0276W\u0003\u0002",
    "\u0002\u0002\u0277\u027c\u0005f4\u0002\u0278\u0279\u0007O\u0002\u0002",
    "\u0279\u027b\u0005f4\u0002\u027a\u0278\u0003\u0002\u0002\u0002\u027b",
    "\u027e\u0003\u0002\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027c",
    "\u027d\u0003\u0002\u0002\u0002\u027dY\u0003\u0002\u0002\u0002\u027e",
    "\u027c\u0003\u0002\u0002\u0002\u027f\u0281\u0007H\u0002\u0002\u0280",
    "\u0282\u0005\\/\u0002\u0281\u0280\u0003\u0002\u0002\u0002\u0281\u0282",
    "\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0284",
    "\u0007I\u0002\u0002\u0284[\u0003\u0002\u0002\u0002\u0285\u028a\u0005",
    "^0\u0002\u0286\u0287\u0007O\u0002\u0002\u0287\u0289\u0005^0\u0002\u0288",
    "\u0286\u0003\u0002\u0002\u0002\u0289\u028c\u0003\u0002\u0002\u0002\u028a",
    "\u0288\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002\u0002\u028b",
    "\u028f\u0003\u0002\u0002\u0002\u028c\u028a\u0003\u0002\u0002\u0002\u028d",
    "\u028e\u0007O\u0002\u0002\u028e\u0290\u0005`1\u0002\u028f\u028d\u0003",
    "\u0002\u0002\u0002\u028f\u0290\u0003\u0002\u0002\u0002\u0290\u0293\u0003",
    "\u0002\u0002\u0002\u0291\u0293\u0005`1\u0002\u0292\u0285\u0003\u0002",
    "\u0002\u0002\u0292\u0291\u0003\u0002\u0002\u0002\u0293]\u0003\u0002",
    "\u0002\u0002\u0294\u0296\u0005\n\u0006\u0002\u0295\u0294\u0003\u0002",
    "\u0002\u0002\u0296\u0299\u0003\u0002\u0002\u0002\u0297\u0295\u0003\u0002",
    "\u0002\u0002\u0297\u0298\u0003\u0002\u0002\u0002\u0298\u029a\u0003\u0002",
    "\u0002\u0002\u0299\u0297\u0003\u0002\u0002\u0002\u029a\u029b\u0005N",
    "(\u0002\u029b\u029c\u0005F$\u0002\u029c_\u0003\u0002\u0002\u0002\u029d",
    "\u029f\u0005\n\u0006\u0002\u029e\u029d\u0003\u0002\u0002\u0002\u029f",
    "\u02a2\u0003\u0002\u0002\u0002\u02a0\u029e\u0003\u0002\u0002\u0002\u02a0",
    "\u02a1\u0003\u0002\u0002\u0002\u02a1\u02a3\u0003\u0002\u0002\u0002\u02a2",
    "\u02a0\u0003\u0002\u0002\u0002\u02a3\u02a4\u0005N(\u0002\u02a4\u02a5",
    "\u0007v\u0002\u0002\u02a5\u02a6\u0005F$\u0002\u02a6a\u0003\u0002\u0002",
    "\u0002\u02a7\u02a8\u0005\u0086D\u0002\u02a8c\u0003\u0002\u0002\u0002",
    "\u02a9\u02aa\u0005\u0086D\u0002\u02aae\u0003\u0002\u0002\u0002\u02ab",
    "\u02b0\u0007t\u0002\u0002\u02ac\u02ad\u0007P\u0002\u0002\u02ad\u02af",
    "\u0007t\u0002\u0002\u02ae\u02ac\u0003\u0002\u0002\u0002\u02af\u02b2",
    "\u0003\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b0\u02b1",
    "\u0003\u0002\u0002\u0002\u02b1g\u0003\u0002\u0002\u0002\u02b2\u02b0",
    "\u0003\u0002\u0002\u0002\u02b3\u02b4\t\u0006\u0002\u0002\u02b4i\u0003",
    "\u0002\u0002\u0002\u02b5\u02b6\u0007u\u0002\u0002\u02b6\u02bd\u0005",
    "l7\u0002\u02b7\u02ba\u0007H\u0002\u0002\u02b8\u02bb\u0005n8\u0002\u02b9",
    "\u02bb\u0005r:\u0002\u02ba\u02b8\u0003\u0002\u0002\u0002\u02ba\u02b9",
    "\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bc",
    "\u0003\u0002\u0002\u0002\u02bc\u02be\u0007I\u0002\u0002\u02bd\u02b7",
    "\u0003\u0002\u0002\u0002\u02bd\u02be\u0003\u0002\u0002\u0002\u02bek",
    "\u0003\u0002\u0002\u0002\u02bf\u02c0\u0005f4\u0002\u02c0m\u0003\u0002",
    "\u0002\u0002\u02c1\u02c6\u0005p9\u0002\u02c2\u02c3\u0007O\u0002\u0002",
    "\u02c3\u02c5\u0005p9\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002\u02c5",
    "\u02c8\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002\u02c6",
    "\u02c7\u0003\u0002\u0002\u0002\u02c7o\u0003\u0002\u0002\u0002\u02c8",
    "\u02c6\u0003\u0002\u0002\u0002\u02c9\u02ca\u0007t\u0002\u0002\u02ca",
    "\u02cb\u0007Q\u0002\u0002\u02cb\u02cc\u0005r:\u0002\u02ccq\u0003\u0002",
    "\u0002\u0002\u02cd\u02d1\u0005\u00b8]\u0002\u02ce\u02d1\u0005j6\u0002",
    "\u02cf\u02d1\u0005t;\u0002\u02d0\u02cd\u0003\u0002\u0002\u0002\u02d0",
    "\u02ce\u0003\u0002\u0002\u0002\u02d0\u02cf\u0003\u0002\u0002\u0002\u02d1",
    "s\u0003\u0002\u0002\u0002\u02d2\u02db\u0007J\u0002\u0002\u02d3\u02d8",
    "\u0005r:\u0002\u02d4\u02d5\u0007O\u0002\u0002\u02d5\u02d7\u0005r:\u0002",
    "\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d7\u02da\u0003\u0002\u0002\u0002",
    "\u02d8\u02d6\u0003\u0002\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002",
    "\u02d9\u02dc\u0003\u0002\u0002\u0002\u02da\u02d8\u0003\u0002\u0002\u0002",
    "\u02db\u02d3\u0003\u0002\u0002\u0002\u02db\u02dc\u0003\u0002\u0002\u0002",
    "\u02dc\u02de\u0003\u0002\u0002\u0002\u02dd\u02df\u0007O\u0002\u0002",
    "\u02de\u02dd\u0003\u0002\u0002\u0002\u02de\u02df\u0003\u0002\u0002\u0002",
    "\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e1\u0007K\u0002\u0002",
    "\u02e1u\u0003\u0002\u0002\u0002\u02e2\u02e3\u0007u\u0002\u0002\u02e3",
    "\u02e4\u0007\"\u0002\u0002\u02e4\u02e5\u0007t\u0002\u0002\u02e5\u02e6",
    "\u0005x=\u0002\u02e6w\u0003\u0002\u0002\u0002\u02e7\u02eb\u0007J\u0002",
    "\u0002\u02e8\u02ea\u0005z>\u0002\u02e9\u02e8\u0003\u0002\u0002\u0002",
    "\u02ea\u02ed\u0003\u0002\u0002\u0002\u02eb\u02e9\u0003\u0002\u0002\u0002",
    "\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ee\u0003\u0002\u0002\u0002",
    "\u02ed\u02eb\u0003\u0002\u0002\u0002\u02ee\u02ef\u0007K\u0002\u0002",
    "\u02efy\u0003\u0002\u0002\u0002\u02f0\u02f2\u0005\u0006\u0004\u0002",
    "\u02f1\u02f0\u0003\u0002\u0002\u0002\u02f2\u02f5\u0003\u0002\u0002\u0002",
    "\u02f3\u02f1\u0003\u0002\u0002\u0002\u02f3\u02f4\u0003\u0002\u0002\u0002",
    "\u02f4\u02f6\u0003\u0002\u0002\u0002\u02f5\u02f3\u0003\u0002\u0002\u0002",
    "\u02f6\u02f9\u0005|?\u0002\u02f7\u02f9\u0007N\u0002\u0002\u02f8\u02f3",
    "\u0003\u0002\u0002\u0002\u02f8\u02f7\u0003\u0002\u0002\u0002\u02f9{",
    "\u0003\u0002\u0002\u0002\u02fa\u02fb\u0005N(\u0002\u02fb\u02fc\u0005",
    "~@\u0002\u02fc\u02fd\u0007N\u0002\u0002\u02fd\u030f\u0003\u0002\u0002",
    "\u0002\u02fe\u0300\u0005\f\u0007\u0002\u02ff\u0301\u0007N\u0002\u0002",
    "\u0300\u02ff\u0003\u0002\u0002\u0002\u0300\u0301\u0003\u0002\u0002\u0002",
    "\u0301\u030f\u0003\u0002\u0002\u0002\u0302\u0304\u0005\u001c\u000f\u0002",
    "\u0303\u0305\u0007N\u0002\u0002\u0304\u0303\u0003\u0002\u0002\u0002",
    "\u0304\u0305\u0003\u0002\u0002\u0002\u0305\u030f\u0003\u0002\u0002\u0002",
    "\u0306\u0308\u0005\u0014\u000b\u0002\u0307\u0309\u0007N\u0002\u0002",
    "\u0308\u0307\u0003\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002",
    "\u0309\u030f\u0003\u0002\u0002\u0002\u030a\u030c\u0005v<\u0002\u030b",
    "\u030d\u0007N\u0002\u0002\u030c\u030b\u0003\u0002\u0002\u0002\u030c",
    "\u030d\u0003\u0002\u0002\u0002\u030d\u030f\u0003\u0002\u0002\u0002\u030e",
    "\u02fa\u0003\u0002\u0002\u0002\u030e\u02fe\u0003\u0002\u0002\u0002\u030e",
    "\u0302\u0003\u0002\u0002\u0002\u030e\u0306\u0003\u0002\u0002\u0002\u030e",
    "\u030a\u0003\u0002\u0002\u0002\u030f}\u0003\u0002\u0002\u0002\u0310",
    "\u0313\u0005\u0080A\u0002\u0311\u0313\u0005\u0082B\u0002\u0312\u0310",
    "\u0003\u0002\u0002\u0002\u0312\u0311\u0003\u0002\u0002\u0002\u0313\u007f",
    "\u0003\u0002\u0002\u0002\u0314\u0315\u0007t\u0002\u0002\u0315\u0316",
    "\u0007H\u0002\u0002\u0316\u0318\u0007I\u0002\u0002\u0317\u0319\u0005",
    "\u0084C\u0002\u0318\u0317\u0003\u0002\u0002\u0002\u0318\u0319\u0003",
    "\u0002\u0002\u0002\u0319\u0081\u0003\u0002\u0002\u0002\u031a\u031b\u0005",
    "B\"\u0002\u031b\u0083\u0003\u0002\u0002\u0002\u031c\u031d\u0007\u0012",
    "\u0002\u0002\u031d\u031e\u0005r:\u0002\u031e\u0085\u0003\u0002\u0002",
    "\u0002\u031f\u0323\u0007J\u0002\u0002\u0320\u0322\u0005\u0088E\u0002",
    "\u0321\u0320\u0003\u0002\u0002\u0002\u0322\u0325\u0003\u0002\u0002\u0002",
    "\u0323\u0321\u0003\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002\u0002",
    "\u0324\u0326\u0003\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002",
    "\u0326\u0327\u0007K\u0002\u0002\u0327\u0087\u0003\u0002\u0002\u0002",
    "\u0328\u032c\u0005\u008aF\u0002\u0329\u032c\u0005\u008eH\u0002\u032a",
    "\u032c\u0005\u0004\u0003\u0002\u032b\u0328\u0003\u0002\u0002\u0002\u032b",
    "\u0329\u0003\u0002\u0002\u0002\u032b\u032a\u0003\u0002\u0002\u0002\u032c",
    "\u0089\u0003\u0002\u0002\u0002\u032d\u032e\u0005\u008cG\u0002\u032e",
    "\u032f\u0007N\u0002\u0002\u032f\u008b\u0003\u0002\u0002\u0002\u0330",
    "\u0332\u0005\n\u0006\u0002\u0331\u0330\u0003\u0002\u0002\u0002\u0332",
    "\u0335\u0003\u0002\u0002\u0002\u0333\u0331\u0003\u0002\u0002\u0002\u0333",
    "\u0334\u0003\u0002\u0002\u0002\u0334\u0336\u0003\u0002\u0002\u0002\u0335",
    "\u0333\u0003\u0002\u0002\u0002\u0336\u0337\u0005N(\u0002\u0337\u0338",
    "\u0005B\"\u0002\u0338\u008d\u0003\u0002\u0002\u0002\u0339\u0388\u0005",
    "\u0086D\u0002\u033a\u033b\u0007\u001c\u0002\u0002\u033b\u033c\u0005",
    "\u00aaV\u0002\u033c\u033f\u0005\u008eH\u0002\u033d\u033e\u0007\u0015",
    "\u0002\u0002\u033e\u0340\u0005\u008eH\u0002\u033f\u033d\u0003\u0002",
    "\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340\u0388\u0003\u0002",
    "\u0002\u0002\u0341\u0342\u0007\u001b\u0002\u0002\u0342\u0343\u0007H",
    "\u0002\u0002\u0343\u0344\u0005\u00a2R\u0002\u0344\u0345\u0007I\u0002",
    "\u0002\u0345\u0346\u0005\u008eH\u0002\u0346\u0388\u0003\u0002\u0002",
    "\u0002\u0347\u0348\u00076\u0002\u0002\u0348\u0349\u0005\u00aaV\u0002",
    "\u0349\u034a\u0005\u008eH\u0002\u034a\u0388\u0003\u0002\u0002\u0002",
    "\u034b\u034c\u0007\u0013\u0002\u0002\u034c\u034d\u0005\u008eH\u0002",
    "\u034d\u034e\u00076\u0002\u0002\u034e\u034f\u0005\u00aaV\u0002\u034f",
    "\u0350\u0007N\u0002\u0002\u0350\u0388\u0003\u0002\u0002\u0002\u0351",
    "\u0352\u00073\u0002\u0002\u0352\u035c\u0005\u0086D\u0002\u0353\u0355",
    "\u0005\u0096L\u0002\u0354\u0353\u0003\u0002\u0002\u0002\u0355\u0356",
    "\u0003\u0002\u0002\u0002\u0356\u0354\u0003\u0002\u0002\u0002\u0356\u0357",
    "\u0003\u0002\u0002\u0002\u0357\u0359\u0003\u0002\u0002\u0002\u0358\u035a",
    "\u0005\u009aN\u0002\u0359\u0358\u0003\u0002\u0002\u0002\u0359\u035a",
    "\u0003\u0002\u0002\u0002\u035a\u035d\u0003\u0002\u0002\u0002\u035b\u035d",
    "\u0005\u009aN\u0002\u035c\u0354\u0003\u0002\u0002\u0002\u035c\u035b",
    "\u0003\u0002\u0002\u0002\u035d\u0388\u0003\u0002\u0002\u0002\u035e\u035f",
    "\u00073\u0002\u0002\u035f\u0360\u0005\u009cO\u0002\u0360\u0364\u0005",
    "\u0086D\u0002\u0361\u0363\u0005\u0096L\u0002\u0362\u0361\u0003\u0002",
    "\u0002\u0002\u0363\u0366\u0003\u0002\u0002\u0002\u0364\u0362\u0003\u0002",
    "\u0002\u0002\u0364\u0365\u0003\u0002\u0002\u0002\u0365\u0368\u0003\u0002",
    "\u0002\u0002\u0366\u0364\u0003\u0002\u0002\u0002\u0367\u0369\u0005\u009a",
    "N\u0002\u0368\u0367\u0003\u0002\u0002\u0002\u0368\u0369\u0003\u0002",
    "\u0002\u0002\u0369\u0388\u0003\u0002\u0002\u0002\u036a\u036c\u0007*",
    "\u0002\u0002\u036b\u036d\u0005\u00b8]\u0002\u036c\u036b\u0003\u0002",
    "\u0002\u0002\u036c\u036d\u0003\u0002\u0002\u0002\u036d\u036e\u0003\u0002",
    "\u0002\u0002\u036e\u0388\u0007N\u0002\u0002\u036f\u0370\u00070\u0002",
    "\u0002\u0370\u0371\u0005\u00b8]\u0002\u0371\u0372\u0007N\u0002\u0002",
    "\u0372\u0388\u0003\u0002\u0002\u0002\u0373\u0375\u0007\u000b\u0002\u0002",
    "\u0374\u0376\u0007t\u0002\u0002\u0375\u0374\u0003\u0002\u0002\u0002",
    "\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002",
    "\u0377\u0388\u0007N\u0002\u0002\u0378\u037a\u0007\u0011\u0002\u0002",
    "\u0379\u037b\u0007t\u0002\u0002\u037a\u0379\u0003\u0002\u0002\u0002",
    "\u037a\u037b\u0003\u0002\u0002\u0002\u037b\u037c\u0003\u0002\u0002\u0002",
    "\u037c\u0388\u0007N\u0002\u0002\u037d\u0388\u0007N\u0002\u0002\u037e",
    "\u037f\u0005\u00aeX\u0002\u037f\u0380\u0007N\u0002\u0002\u0380\u0388",
    "\u0003\u0002\u0002\u0002\u0381\u0382\u0007t\u0002\u0002\u0382\u0383",
    "\u0007W\u0002\u0002\u0383\u0388\u0005\u008eH\u0002\u0384\u0385\u0005",
    "\u00b6\\\u0002\u0385\u0386\u0007N\u0002\u0002\u0386\u0388\u0003\u0002",
    "\u0002\u0002\u0387\u0339\u0003\u0002\u0002\u0002\u0387\u033a\u0003\u0002",
    "\u0002\u0002\u0387\u0341\u0003\u0002\u0002\u0002\u0387\u0347\u0003\u0002",
    "\u0002\u0002\u0387\u034b\u0003\u0002\u0002\u0002\u0387\u0351\u0003\u0002",
    "\u0002\u0002\u0387\u035e\u0003\u0002\u0002\u0002\u0387\u036a\u0003\u0002",
    "\u0002\u0002\u0387\u036f\u0003\u0002\u0002\u0002\u0387\u0373\u0003\u0002",
    "\u0002\u0002\u0387\u0378\u0003\u0002\u0002\u0002\u0387\u037d\u0003\u0002",
    "\u0002\u0002\u0387\u037e\u0003\u0002\u0002\u0002\u0387\u0381\u0003\u0002",
    "\u0002\u0002\u0387\u0384\u0003\u0002\u0002\u0002\u0388\u008f\u0003\u0002",
    "\u0002\u0002\u0389\u038b\u0005\u0006\u0004\u0002\u038a\u0389\u0003\u0002",
    "\u0002\u0002\u038b\u038e\u0003\u0002\u0002\u0002\u038c\u038a\u0003\u0002",
    "\u0002\u0002\u038c\u038d\u0003\u0002\u0002\u0002\u038d\u0391\u0003\u0002",
    "\u0002\u0002\u038e\u038c\u0003\u0002\u0002\u0002\u038f\u0392\u0005\u0092",
    "J\u0002\u0390\u0392\u0005\u0094K\u0002\u0391\u038f\u0003\u0002\u0002",
    "\u0002\u0391\u0390\u0003\u0002\u0002\u0002\u0392\u0091\u0003\u0002\u0002",
    "\u0002\u0393\u0396\u0007\u0007\u0002\u0002\u0394\u0397\u0007N\u0002",
    "\u0002\u0395\u0397\u0005b2\u0002\u0396\u0394\u0003\u0002\u0002\u0002",
    "\u0396\u0395\u0003\u0002\u0002\u0002\u0397\u0093\u0003\u0002\u0002\u0002",
    "\u0398\u039b\u0007\u0006\u0002\u0002\u0399\u039c\u0007N\u0002\u0002",
    "\u039a\u039c\u0005b2\u0002\u039b\u0399\u0003\u0002\u0002\u0002\u039b",
    "\u039a\u0003\u0002\u0002\u0002\u039c\u0095\u0003\u0002\u0002\u0002\u039d",
    "\u039e\u0007\r\u0002\u0002\u039e\u03a2\u0007H\u0002\u0002\u039f\u03a1",
    "\u0005\n\u0006\u0002\u03a0\u039f\u0003\u0002\u0002\u0002\u03a1\u03a4",
    "\u0003\u0002\u0002\u0002\u03a2\u03a0\u0003\u0002\u0002\u0002\u03a2\u03a3",
    "\u0003\u0002\u0002\u0002\u03a3\u03a5\u0003\u0002\u0002\u0002\u03a4\u03a2",
    "\u0003\u0002\u0002\u0002\u03a5\u03a6\u0005\u0098M\u0002\u03a6\u03a7",
    "\u0007t\u0002\u0002\u03a7\u03a8\u0007I\u0002\u0002\u03a8\u03a9\u0005",
    "\u0086D\u0002\u03a9\u0097\u0003\u0002\u0002\u0002\u03aa\u03af\u0005",
    "f4\u0002\u03ab\u03ac\u0007e\u0002\u0002\u03ac\u03ae\u0005f4\u0002\u03ad",
    "\u03ab\u0003\u0002\u0002\u0002\u03ae\u03b1\u0003\u0002\u0002\u0002\u03af",
    "\u03ad\u0003\u0002\u0002\u0002\u03af\u03b0\u0003\u0002\u0002\u0002\u03b0",
    "\u0099\u0003\u0002\u0002\u0002\u03b1\u03af\u0003\u0002\u0002\u0002\u03b2",
    "\u03b3\u0007\u0019\u0002\u0002\u03b3\u03b4\u0005\u0086D\u0002\u03b4",
    "\u009b\u0003\u0002\u0002\u0002\u03b5\u03b6\u0007H\u0002\u0002\u03b6",
    "\u03b8\u0005\u009eP\u0002\u03b7\u03b9\u0007N\u0002\u0002\u03b8\u03b7",
    "\u0003\u0002\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03ba",
    "\u0003\u0002\u0002\u0002\u03ba\u03bb\u0007I\u0002\u0002\u03bb\u009d",
    "\u0003\u0002\u0002\u0002\u03bc\u03c1\u0005\u00a0Q\u0002\u03bd\u03be",
    "\u0007N\u0002\u0002\u03be\u03c0\u0005\u00a0Q\u0002\u03bf\u03bd\u0003",
    "\u0002\u0002\u0002\u03c0\u03c3\u0003\u0002\u0002\u0002\u03c1\u03bf\u0003",
    "\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002\u03c2\u009f\u0003",
    "\u0002\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c4\u03c6\u0005",
    "\n\u0006\u0002\u03c5\u03c4\u0003\u0002\u0002\u0002\u03c6\u03c9\u0003",
    "\u0002\u0002\u0002\u03c7\u03c5\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003",
    "\u0002\u0002\u0002\u03c8\u03ca\u0003\u0002\u0002\u0002\u03c9\u03c7\u0003",
    "\u0002\u0002\u0002\u03ca\u03cb\u0005P)\u0002\u03cb\u03cc\u0005F$\u0002",
    "\u03cc\u03cd\u0007Q\u0002\u0002\u03cd\u03ce\u0005\u00b8]\u0002\u03ce",
    "\u00a1\u0003\u0002\u0002\u0002\u03cf\u03dc\u0005\u00a6T\u0002\u03d0",
    "\u03d2\u0005\u00a4S\u0002\u03d1\u03d0\u0003\u0002\u0002\u0002\u03d1",
    "\u03d2\u0003\u0002\u0002\u0002\u03d2\u03d3\u0003\u0002\u0002\u0002\u03d3",
    "\u03d5\u0007N\u0002\u0002\u03d4\u03d6\u0005\u00b8]\u0002\u03d5\u03d4",
    "\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002\u03d6\u03d7",
    "\u0003\u0002\u0002\u0002\u03d7\u03d9\u0007N\u0002\u0002\u03d8\u03da",
    "\u0005\u00a8U\u0002\u03d9\u03d8\u0003\u0002\u0002\u0002\u03d9\u03da",
    "\u0003\u0002\u0002\u0002\u03da\u03dc\u0003\u0002\u0002\u0002\u03db\u03cf",
    "\u0003\u0002\u0002\u0002\u03db\u03d1\u0003\u0002\u0002\u0002\u03dc\u00a3",
    "\u0003\u0002\u0002\u0002\u03dd\u03e0\u0005\u008cG\u0002\u03de\u03e0",
    "\u0005\u00acW\u0002\u03df\u03dd\u0003\u0002\u0002\u0002\u03df\u03de",
    "\u0003\u0002\u0002\u0002\u03e0\u00a5\u0003\u0002\u0002\u0002\u03e1\u03e3",
    "\u0005\n\u0006\u0002\u03e2\u03e1\u0003\u0002\u0002\u0002\u03e3\u03e6",
    "\u0003\u0002\u0002\u0002\u03e4\u03e2\u0003\u0002\u0002\u0002\u03e4\u03e5",
    "\u0003\u0002\u0002\u0002\u03e5\u03e7\u0003\u0002\u0002\u0002\u03e6\u03e4",
    "\u0003\u0002\u0002\u0002\u03e7\u03e8\u0005N(\u0002\u03e8\u03e9\u0005",
    "F$\u0002\u03e9\u03ea\u0007W\u0002\u0002\u03ea\u03eb\u0005\u00b8]\u0002",
    "\u03eb\u00a7\u0003\u0002\u0002\u0002\u03ec\u03ed\u0005\u00acW\u0002",
    "\u03ed\u00a9\u0003\u0002\u0002\u0002\u03ee\u03ef\u0007H\u0002\u0002",
    "\u03ef\u03f0\u0005\u00b8]\u0002\u03f0\u03f1\u0007I\u0002\u0002\u03f1",
    "\u00ab\u0003\u0002\u0002\u0002\u03f2\u03f7\u0005\u00b8]\u0002\u03f3",
    "\u03f4\u0007O\u0002\u0002\u03f4\u03f6\u0005\u00b8]\u0002\u03f5\u03f3",
    "\u0003\u0002\u0002\u0002\u03f6\u03f9\u0003\u0002\u0002\u0002\u03f7\u03f5",
    "\u0003\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002\u0002\u03f8\u00ad",
    "\u0003\u0002\u0002\u0002\u03f9\u03f7\u0003\u0002\u0002\u0002\u03fa\u03fb",
    "\u0005\u00b8]\u0002\u03fb\u00af\u0003\u0002\u0002\u0002\u03fc\u03fd",
    "\u0005\u00b8]\u0002\u03fd\u00b1\u0003\u0002\u0002\u0002\u03fe\u03ff",
    "\u0007\b\u0002\u0002\u03ff\u0400\u0007P\u0002\u0002\u0400\u0401\t\u0007",
    "\u0002\u0002\u0401\u0402\u0005\u00aaV\u0002\u0402\u00b3\u0003\u0002",
    "\u0002\u0002\u0403\u0404\t\u0007\u0002\u0002\u0404\u0405\u0005\u00b8",
    "]\u0002\u0405\u00b5\u0003\u0002\u0002\u0002\u0406\u0409\u0005\u00b2",
    "Z\u0002\u0407\u0409\u0005\u00b4[\u0002\u0408\u0406\u0003\u0002\u0002",
    "\u0002\u0408\u0407\u0003\u0002\u0002\u0002\u0409\u00b7\u0003\u0002\u0002",
    "\u0002\u040a\u040b\b]\u0001\u0002\u040b\u0418\u0005\u00ba^\u0002\u040c",
    "\u040d\u0007%\u0002\u0002\u040d\u0418\u0005\u00bc_\u0002\u040e\u040f",
    "\u0007H\u0002\u0002\u040f\u0410\u0005N(\u0002\u0410\u0411\u0007I\u0002",
    "\u0002\u0411\u0412\u0005\u00b8]\u0013\u0412\u0418\u0003\u0002\u0002",
    "\u0002\u0413\u0414\t\b\u0002\u0002\u0414\u0418\u0005\u00b8]\u0011\u0415",
    "\u0416\t\t\u0002\u0002\u0416\u0418\u0005\u00b8]\u0010\u0417\u040a\u0003",
    "\u0002\u0002\u0002\u0417\u040c\u0003\u0002\u0002\u0002\u0417\u040e\u0003",
    "\u0002\u0002\u0002\u0417\u0413\u0003\u0002\u0002\u0002\u0417\u0415\u0003",
    "\u0002\u0002\u0002\u0418\u047e\u0003\u0002\u0002\u0002\u0419\u041a\f",
    "\u000f\u0002\u0002\u041a\u041b\t\n\u0002\u0002\u041b\u047d\u0005\u00b8",
    "]\u0010\u041c\u041d\f\u000e\u0002\u0002\u041d\u041e\t\u000b\u0002\u0002",
    "\u041e\u047d\u0005\u00b8]\u000f\u041f\u0427\f\r\u0002\u0002\u0420\u0421",
    "\u0007S\u0002\u0002\u0421\u0428\u0007S\u0002\u0002\u0422\u0423\u0007",
    "R\u0002\u0002\u0423\u0424\u0007R\u0002\u0002\u0424\u0428\u0007R\u0002",
    "\u0002\u0425\u0426\u0007R\u0002\u0002\u0426\u0428\u0007R\u0002\u0002",
    "\u0427\u0420\u0003\u0002\u0002\u0002\u0427\u0422\u0003\u0002\u0002\u0002",
    "\u0427\u0425\u0003\u0002\u0002\u0002\u0428\u0429\u0003\u0002\u0002\u0002",
    "\u0429\u047d\u0005\u00b8]\u000e\u042a\u042b\f\f\u0002\u0002\u042b\u042c",
    "\t\f\u0002\u0002\u042c\u047d\u0005\u00b8]\r\u042d\u042e\f\n\u0002\u0002",
    "\u042e\u042f\t\r\u0002\u0002\u042f\u047d\u0005\u00b8]\u000b\u0430\u0431",
    "\f\t\u0002\u0002\u0431\u0432\u0007d\u0002\u0002\u0432\u047d\u0005\u00b8",
    "]\n\u0433\u0434\f\b\u0002\u0002\u0434\u0435\u0007f\u0002\u0002\u0435",
    "\u047d\u0005\u00b8]\t\u0436\u0437\f\u0007\u0002\u0002\u0437\u0438\u0007",
    "e\u0002\u0002\u0438\u047d\u0005\u00b8]\b\u0439\u043a\f\u0006\u0002\u0002",
    "\u043a\u043b\u0007\\\u0002\u0002\u043b\u047d\u0005\u00b8]\u0007\u043c",
    "\u043d\f\u0005\u0002\u0002\u043d\u043e\u0007]\u0002\u0002\u043e\u047d",
    "\u0005\u00b8]\u0006\u043f\u0440\f\u0004\u0002\u0002\u0440\u0441\u0007",
    "V\u0002\u0002\u0441\u0442\u0005\u00b8]\u0002\u0442\u0443\u0007W\u0002",
    "\u0002\u0443\u0444\u0005\u00b8]\u0005\u0444\u047d\u0003\u0002\u0002",
    "\u0002\u0445\u0446\f\u0003\u0002\u0002\u0446\u0447\t\u000e\u0002\u0002",
    "\u0447\u047d\u0005\u00b8]\u0003\u0448\u0449\f\u001d\u0002\u0002\u0449",
    "\u044a\u0007P\u0002\u0002\u044a\u044b\u0007\u0007\u0002\u0002\u044b",
    "\u044d\u0007H\u0002\u0002\u044c\u044e\u0005\u00acW\u0002\u044d\u044c",
    "\u0003\u0002\u0002\u0002\u044d\u044e\u0003\u0002\u0002\u0002\u044e\u044f",
    "\u0003\u0002\u0002\u0002\u044f\u047d\u0007I\u0002\u0002\u0450\u0451",
    "\f\u001c\u0002\u0002\u0451\u0452\u0007P\u0002\u0002\u0452\u0453\u0007",
    "\u0006\u0002\u0002\u0453\u0455\u0007H\u0002\u0002\u0454\u0456\u0005",
    "\u00acW\u0002\u0455\u0454\u0003\u0002\u0002\u0002\u0455\u0456\u0003",
    "\u0002\u0002\u0002\u0456\u0457\u0003\u0002\u0002\u0002\u0457\u047d\u0007",
    "I\u0002\u0002\u0458\u0459\f\u001b\u0002\u0002\u0459\u045a\u0007P\u0002",
    "\u0002\u045a\u047d\u0007t\u0002\u0002\u045b\u045c\f\u001a\u0002\u0002",
    "\u045c\u045d\u0007P\u0002\u0002\u045d\u047d\u0007/\u0002\u0002\u045e",
    "\u045f\f\u0019\u0002\u0002\u045f\u0460\u0007P\u0002\u0002\u0460\u0462",
    "\u0007%\u0002\u0002\u0461\u0463\u0005\u00ccg\u0002\u0462\u0461\u0003",
    "\u0002\u0002\u0002\u0462\u0463\u0003\u0002\u0002\u0002\u0463\u0464\u0003",
    "\u0002\u0002\u0002\u0464\u047d\u0005\u00c0a\u0002\u0465\u0466\f\u0018",
    "\u0002\u0002\u0466\u0467\u0007P\u0002\u0002\u0467\u0468\u0007-\u0002",
    "\u0002\u0468\u047d\u0005\u00d2j\u0002\u0469\u046a\f\u0017\u0002\u0002",
    "\u046a\u046b\u0007P\u0002\u0002\u046b\u047d\u0005\u00caf\u0002\u046c",
    "\u046d\f\u0016\u0002\u0002\u046d\u046e\u0007L\u0002\u0002\u046e\u046f",
    "\u0005\u00b8]\u0002\u046f\u0470\u0007M\u0002\u0002\u0470\u047d\u0003",
    "\u0002\u0002\u0002\u0471\u0472\f\u0015\u0002\u0002\u0472\u0474\u0007",
    "H\u0002\u0002\u0473\u0475\u0005\u00acW\u0002\u0474\u0473\u0003\u0002",
    "\u0002\u0002\u0474\u0475\u0003\u0002\u0002\u0002\u0475\u0476\u0003\u0002",
    "\u0002\u0002\u0476\u047d\u0007I\u0002\u0002\u0477\u0478\f\u0012\u0002",
    "\u0002\u0478\u047d\t\u000f\u0002\u0002\u0479\u047a\f\u000b\u0002\u0002",
    "\u047a\u047b\u0007 \u0002\u0002\u047b\u047d\u0005N(\u0002\u047c\u0419",
    "\u0003\u0002\u0002\u0002\u047c\u041c\u0003\u0002\u0002\u0002\u047c\u041f",
    "\u0003\u0002\u0002\u0002\u047c\u042a\u0003\u0002\u0002\u0002\u047c\u042d",
    "\u0003\u0002\u0002\u0002\u047c\u0430\u0003\u0002\u0002\u0002\u047c\u0433",
    "\u0003\u0002\u0002\u0002\u047c\u0436\u0003\u0002\u0002\u0002\u047c\u0439",
    "\u0003\u0002\u0002\u0002\u047c\u043c\u0003\u0002\u0002\u0002\u047c\u043f",
    "\u0003\u0002\u0002\u0002\u047c\u0445\u0003\u0002\u0002\u0002\u047c\u0448",
    "\u0003\u0002\u0002\u0002\u047c\u0450\u0003\u0002\u0002\u0002\u047c\u0458",
    "\u0003\u0002\u0002\u0002\u047c\u045b\u0003\u0002\u0002\u0002\u047c\u045e",
    "\u0003\u0002\u0002\u0002\u047c\u0465\u0003\u0002\u0002\u0002\u047c\u0469",
    "\u0003\u0002\u0002\u0002\u047c\u046c\u0003\u0002\u0002\u0002\u047c\u0471",
    "\u0003\u0002\u0002\u0002\u047c\u0477\u0003\u0002\u0002\u0002\u047c\u0479",
    "\u0003\u0002\u0002\u0002\u047d\u0480\u0003\u0002\u0002\u0002\u047e\u047c",
    "\u0003\u0002\u0002\u0002\u047e\u047f\u0003\u0002\u0002\u0002\u047f\u00b9",
    "\u0003\u0002\u0002\u0002\u0480\u047e\u0003\u0002\u0002\u0002\u0481\u0482",
    "\u0007H\u0002\u0002\u0482\u0483\u0005\u00b8]\u0002\u0483\u0484\u0007",
    "I\u0002\u0002\u0484\u0498\u0003\u0002\u0002\u0002\u0485\u0498\u0007",
    "/\u0002\u0002\u0486\u0498\u0007-\u0002\u0002\u0487\u0498\u0005h5\u0002",
    "\u0488\u0498\u0007t\u0002\u0002\u0489\u048a\u0005N(\u0002\u048a\u048b",
    "\u0007P\u0002\u0002\u048b\u048c\u0007\u000f\u0002\u0002\u048c\u0498",
    "\u0003\u0002\u0002\u0002\u048d\u048e\u00074\u0002\u0002\u048e\u048f",
    "\u0007P\u0002\u0002\u048f\u0498\u0007\u000f\u0002\u0002\u0490\u0494",
    "\u0005\u00ccg\u0002\u0491\u0495\u0005\u00d4k\u0002\u0492\u0493\u0007",
    "/\u0002\u0002\u0493\u0495\u0005\u00d6l\u0002\u0494\u0491\u0003\u0002",
    "\u0002\u0002\u0494\u0492\u0003\u0002\u0002\u0002\u0495\u0498\u0003\u0002",
    "\u0002\u0002\u0496\u0498\u0007\u0003\u0002\u0002\u0497\u0481\u0003\u0002",
    "\u0002\u0002\u0497\u0485\u0003\u0002\u0002\u0002\u0497\u0486\u0003\u0002",
    "\u0002\u0002\u0497\u0487\u0003\u0002\u0002\u0002\u0497\u0488\u0003\u0002",
    "\u0002\u0002\u0497\u0489\u0003\u0002\u0002\u0002\u0497\u048d\u0003\u0002",
    "\u0002\u0002\u0497\u0490\u0003\u0002\u0002\u0002\u0497\u0496\u0003\u0002",
    "\u0002\u0002\u0498\u00bb\u0003\u0002\u0002\u0002\u0499\u049a\u0005\u00cc",
    "g\u0002\u049a\u049b\u0005\u00be`\u0002\u049b\u049c\u0005\u00c8e\u0002",
    "\u049c\u04a5\u0003\u0002\u0002\u0002\u049d\u04a2\u0005\u00be`\u0002",
    "\u049e\u04a3\u0005\u00c2b\u0002\u049f\u04a3\u0005\u00c8e\u0002\u04a0",
    "\u04a3\u0005\u00c4c\u0002\u04a1\u04a3\u0005\u00c6d\u0002\u04a2\u049e",
    "\u0003\u0002\u0002\u0002\u04a2\u049f\u0003\u0002\u0002\u0002\u04a2\u04a0",
    "\u0003\u0002\u0002\u0002\u04a2\u04a1\u0003\u0002\u0002\u0002\u04a3\u04a5",
    "\u0003\u0002\u0002\u0002\u04a4\u0499\u0003\u0002\u0002\u0002\u04a4\u049d",
    "\u0003\u0002\u0002\u0002\u04a5\u00bd\u0003\u0002\u0002\u0002\u04a6\u04a8",
    "\u0007t\u0002\u0002\u04a7\u04a9\u0005\u00ceh\u0002\u04a8\u04a7\u0003",
    "\u0002\u0002\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9\u04b1\u0003",
    "\u0002\u0002\u0002\u04aa\u04ab\u0007P\u0002\u0002\u04ab\u04ad\u0007",
    "t\u0002\u0002\u04ac\u04ae\u0005\u00ceh\u0002\u04ad\u04ac\u0003\u0002",
    "\u0002\u0002\u04ad\u04ae\u0003\u0002\u0002\u0002\u04ae\u04b0\u0003\u0002",
    "\u0002\u0002\u04af\u04aa\u0003\u0002\u0002\u0002\u04b0\u04b3\u0003\u0002",
    "\u0002\u0002\u04b1\u04af\u0003\u0002\u0002\u0002\u04b1\u04b2\u0003\u0002",
    "\u0002\u0002\u04b2\u04b8\u0003\u0002\u0002\u0002\u04b3\u04b1\u0003\u0002",
    "\u0002\u0002\u04b4\u04b8\u0005R*\u0002\u04b5\u04b6\u0007\u0006\u0002",
    "\u0002\u04b6\u04b8\u0005\u00ceh\u0002\u04b7\u04a6\u0003\u0002\u0002",
    "\u0002\u04b7\u04b4\u0003\u0002\u0002\u0002\u04b7\u04b5\u0003\u0002\u0002",
    "\u0002\u04b8\u00bf\u0003\u0002\u0002\u0002\u04b9\u04bb\u0007t\u0002",
    "\u0002\u04ba\u04bc\u0005\u00d0i\u0002\u04bb\u04ba\u0003\u0002\u0002",
    "\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc\u04bd\u0003\u0002\u0002",
    "\u0002\u04bd\u04be\u0005\u00c8e\u0002\u04be\u00c1\u0003\u0002\u0002",
    "\u0002\u04bf\u04db\u0007L\u0002\u0002\u04c0\u04c5\u0007M\u0002\u0002",
    "\u04c1\u04c2\u0007L\u0002\u0002\u04c2\u04c4\u0007M\u0002\u0002\u04c3",
    "\u04c1\u0003\u0002\u0002\u0002\u04c4\u04c7\u0003\u0002\u0002\u0002\u04c5",
    "\u04c3\u0003\u0002\u0002\u0002\u04c5\u04c6\u0003\u0002\u0002\u0002\u04c6",
    "\u04c8\u0003\u0002\u0002\u0002\u04c7\u04c5\u0003\u0002\u0002\u0002\u04c8",
    "\u04dc\u0005J&\u0002\u04c9\u04ca\u0005\u00b8]\u0002\u04ca\u04d1\u0007",
    "M\u0002\u0002\u04cb\u04cc\u0007L\u0002\u0002\u04cc\u04cd\u0005\u00b8",
    "]\u0002\u04cd\u04ce\u0007M\u0002\u0002\u04ce\u04d0\u0003\u0002\u0002",
    "\u0002\u04cf\u04cb\u0003\u0002\u0002\u0002\u04d0\u04d3\u0003\u0002\u0002",
    "\u0002\u04d1\u04cf\u0003\u0002\u0002\u0002\u04d1\u04d2\u0003\u0002\u0002",
    "\u0002\u04d2\u04d8\u0003\u0002\u0002\u0002\u04d3\u04d1\u0003\u0002\u0002",
    "\u0002\u04d4\u04d5\u0007L\u0002\u0002\u04d5\u04d7\u0007M\u0002\u0002",
    "\u04d6\u04d4\u0003\u0002\u0002\u0002\u04d7\u04da\u0003\u0002\u0002\u0002",
    "\u04d8\u04d6\u0003\u0002\u0002\u0002\u04d8\u04d9\u0003\u0002\u0002\u0002",
    "\u04d9\u04dc\u0003\u0002\u0002\u0002\u04da\u04d8\u0003\u0002\u0002\u0002",
    "\u04db\u04c0\u0003\u0002\u0002\u0002\u04db\u04c9\u0003\u0002\u0002\u0002",
    "\u04dc\u00c3\u0003\u0002\u0002\u0002\u04dd\u04e0\u0007J\u0002\u0002",
    "\u04de\u04e1\u0007t\u0002\u0002\u04df\u04e1\u0005\u00b8]\u0002\u04e0",
    "\u04de\u0003\u0002\u0002\u0002\u04e0\u04df\u0003\u0002\u0002\u0002\u04e1",
    "\u04e2\u0003\u0002\u0002\u0002\u04e2\u04e5\u0007s\u0002\u0002\u04e3",
    "\u04e6\u0005h5\u0002\u04e4\u04e6\u0005\u00b8]\u0002\u04e5\u04e3\u0003",
    "\u0002\u0002\u0002\u04e5\u04e4\u0003\u0002\u0002\u0002\u04e6\u04f3\u0003",
    "\u0002\u0002\u0002\u04e7\u04ea\u0007O\u0002\u0002\u04e8\u04eb\u0007",
    "t\u0002\u0002\u04e9\u04eb\u0005\u00b8]\u0002\u04ea\u04e8\u0003\u0002",
    "\u0002\u0002\u04ea\u04e9\u0003\u0002\u0002\u0002\u04eb\u04ec\u0003\u0002",
    "\u0002\u0002\u04ec\u04ef\u0007s\u0002\u0002\u04ed\u04f0\u0005h5\u0002",
    "\u04ee\u04f0\u0005\u00b8]\u0002\u04ef\u04ed\u0003\u0002\u0002\u0002",
    "\u04ef\u04ee\u0003\u0002\u0002\u0002\u04f0\u04f2\u0003\u0002\u0002\u0002",
    "\u04f1\u04e7\u0003\u0002\u0002\u0002\u04f2\u04f5\u0003\u0002\u0002\u0002",
    "\u04f3\u04f1\u0003\u0002\u0002\u0002\u04f3\u04f4\u0003\u0002\u0002\u0002",
    "\u04f4\u04f6\u0003\u0002\u0002\u0002\u04f5\u04f3\u0003\u0002\u0002\u0002",
    "\u04f6\u04f7\u0007K\u0002\u0002\u04f7\u00c5\u0003\u0002\u0002\u0002",
    "\u04f8\u04fb\u0007J\u0002\u0002\u04f9\u04fc\u0005h5\u0002\u04fa\u04fc",
    "\u0005\u00b8]\u0002\u04fb\u04f9\u0003\u0002\u0002\u0002\u04fb\u04fa",
    "\u0003\u0002\u0002\u0002\u04fc\u0504\u0003\u0002\u0002\u0002\u04fd\u0500",
    "\u0007O\u0002\u0002\u04fe\u0501\u0005h5\u0002\u04ff\u0501\u0005\u00b8",
    "]\u0002\u0500\u04fe\u0003\u0002\u0002\u0002\u0500\u04ff\u0003\u0002",
    "\u0002\u0002\u0501\u0503\u0003\u0002\u0002\u0002\u0502\u04fd\u0003\u0002",
    "\u0002\u0002\u0503\u0506\u0003\u0002\u0002\u0002\u0504\u0502\u0003\u0002",
    "\u0002\u0002\u0504\u0505\u0003\u0002\u0002\u0002\u0505\u0507\u0003\u0002",
    "\u0002\u0002\u0506\u0504\u0003\u0002\u0002\u0002\u0507\u0508\u0007K",
    "\u0002\u0002\u0508\u00c7\u0003\u0002\u0002\u0002\u0509\u050b\u0005\u00d6",
    "l\u0002\u050a\u050c\u0005 \u0011\u0002\u050b\u050a\u0003\u0002\u0002",
    "\u0002\u050b\u050c\u0003\u0002\u0002\u0002\u050c\u00c9\u0003\u0002\u0002",
    "\u0002\u050d\u050e\u0005\u00ccg\u0002\u050e\u050f\u0005\u00d4k\u0002",
    "\u050f\u00cb\u0003\u0002\u0002\u0002\u0510\u0511\u0007S\u0002\u0002",
    "\u0511\u0512\u0005\u001e\u0010\u0002\u0512\u0513\u0007R\u0002\u0002",
    "\u0513\u00cd\u0003\u0002\u0002\u0002\u0514\u0515\u0007S\u0002\u0002",
    "\u0515\u0518\u0007R\u0002\u0002\u0516\u0518\u0005T+\u0002\u0517\u0514",
    "\u0003\u0002\u0002\u0002\u0517\u0516\u0003\u0002\u0002\u0002\u0518\u00cf",
    "\u0003\u0002\u0002\u0002\u0519\u051a\u0007S\u0002\u0002\u051a\u051d",
    "\u0007R\u0002\u0002\u051b\u051d\u0005\u00ccg\u0002\u051c\u0519\u0003",
    "\u0002\u0002\u0002\u051c\u051b\u0003\u0002\u0002\u0002\u051d\u00d1\u0003",
    "\u0002\u0002\u0002\u051e\u0525\u0005\u00d6l\u0002\u051f\u0520\u0007",
    "P\u0002\u0002\u0520\u0522\u0007t\u0002\u0002\u0521\u0523\u0005\u00d6",
    "l\u0002\u0522\u0521\u0003\u0002\u0002\u0002\u0522\u0523\u0003\u0002",
    "\u0002\u0002\u0523\u0525\u0003\u0002\u0002\u0002\u0524\u051e\u0003\u0002",
    "\u0002\u0002\u0524\u051f\u0003\u0002\u0002\u0002\u0525\u00d3\u0003\u0002",
    "\u0002\u0002\u0526\u0527\u0007-\u0002\u0002\u0527\u052b\u0005\u00d2",
    "j\u0002\u0528\u0529\u0007t\u0002\u0002\u0529\u052b\u0005\u00d6l\u0002",
    "\u052a\u0526\u0003\u0002\u0002\u0002\u052a\u0528\u0003\u0002\u0002\u0002",
    "\u052b\u00d5\u0003\u0002\u0002\u0002\u052c\u052e\u0007H\u0002\u0002",
    "\u052d\u052f\u0005\u00acW\u0002\u052e\u052d\u0003\u0002\u0002\u0002",
    "\u052e\u052f\u0003\u0002\u0002\u0002\u052f\u0530\u0003\u0002\u0002\u0002",
    "\u0530\u0531\u0007I\u0002\u0002\u0531\u00d7\u0003\u0002\u0002\u0002",
    "\u009e\u00db\u00e3\u00ea\u00f1\u00f8\u00fd\u0101\u0105\u0109\u010e\u0112",
    "\u0116\u0120\u0128\u012f\u0136\u013a\u013d\u0140\u0149\u014f\u0154\u0157",
    "\u015d\u0163\u0167\u0170\u0177\u0180\u0187\u018d\u0191\u019d\u01a0\u01a4",
    "\u01ac\u01b1\u01b5\u01be\u01d0\u01d7\u01dc\u01e5\u01ed\u01f7\u01ff\u0207",
    "\u020c\u0218\u021e\u0225\u022a\u0232\u0236\u0238\u0243\u024b\u024e\u0252",
    "\u0257\u025b\u0260\u026a\u0273\u0275\u027c\u0281\u028a\u028f\u0292\u0297",
    "\u02a0\u02b0\u02ba\u02bd\u02c6\u02d0\u02d8\u02db\u02de\u02eb\u02f3\u02f8",
    "\u0300\u0304\u0308\u030c\u030e\u0312\u0318\u0323\u032b\u0333\u033f\u0356",
    "\u0359\u035c\u0364\u0368\u036c\u0375\u037a\u0387\u038c\u0391\u0396\u039b",
    "\u03a2\u03af\u03b8\u03c1\u03c7\u03d1\u03d5\u03d9\u03db\u03df\u03e4\u03f7",
    "\u0408\u0417\u0427\u044d\u0455\u0462\u0474\u047c\u047e\u0494\u0497\u04a2",
    "\u04a4\u04a8\u04ad\u04b1\u04b7\u04bb\u04c5\u04d1\u04d8\u04db\u04e0\u04e5",
    "\u04ea\u04ef\u04f3\u04fb\u0500\u0504\u050b\u0517\u051c\u0522\u0524\u052a",
    "\u052e"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'='", 
                     "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", 
                     "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
                     "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", 
                     "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
                     "'<<='", "'>>='", "'>>>='", "'=>'", null, "'@'", "'...'", 
                     null, null, "'/**'", null, "'/*'", null, "'''" ];

var symbolicNames = [ null, "SoqlLiteral", "OVERRIDE", "VIRTUAL", "SET", 
                      "GET", "DATABASE", "ABSTRACT", "BOOLEAN", "BREAK", 
                      "BYTE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", 
                      "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", 
                      "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
                      "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", 
                      "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", 
                      "PUBLIC", "RETURN", "SHORT", "STATIC", "SUPER", "SYNCHRONIZED", 
                      "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", 
                      "VOLATILE", "WHILE", "GLOBAL", "WEBSERVICE", "APEX_WITH_SHARING", 
                      "APEX_WITHOUT_SHARING", "SELECT", "DB_INSERT", "DB_UPSERT", 
                      "DB_UPDATE", "DB_DELETE", "DB_UNDELETE", "TESTMETHOD", 
                      "IntegerLiteral", "FloatingPointLiteral", "BooleanLiteral", 
                      "CharacterLiteral", "StringLiteral", "NullLiteral", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", 
                      "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
                      "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", 
                      "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
                      "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
                      "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "LAMBDA_LIKE", "Identifier", "AT", "ELLIPSIS", "WS", 
                      "APEXDOC_COMMENT", "APEXDOC_COMMENT_START", "COMMENT", 
                      "COMMENT_START", "LINE_COMMENT", "QUOTE" ];

var ruleNames =  [ "compilationUnit", "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "typeParameters", 
                   "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
                   "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
                   "typeList", "classBody", "interfaceBody", "classBodyDeclaration", 
                   "memberDeclaration", "methodDeclaration", "genericMethodDeclaration", 
                   "constructorDeclaration", "genericConstructorDeclaration", 
                   "fieldDeclaration", "propertyDeclaration", "propertyBodyDeclaration", 
                   "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
                   "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
                   "genericInterfaceMethodDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "enumConstantName", "type", "classOrInterfaceType", 
                   "primitiveType", "typeArguments", "typeArgument", "qualifiedNameList", 
                   "formalParameters", "formalParameterList", "formalParameter", 
                   "lastFormalParameter", "methodBody", "constructorBody", 
                   "qualifiedName", "literal", "annotation", "annotationName", 
                   "elementValuePairs", "elementValuePair", "elementValue", 
                   "elementValueArrayInitializer", "annotationTypeDeclaration", 
                   "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "block", "blockStatement", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "statement", "propertyBlock", 
                   "getter", "setter", "catchClause", "catchType", "finallyBlock", 
                   "resourceSpecification", "resources", "resource", "forControl", 
                   "forInit", "enhancedForControl", "forUpdate", "parExpression", 
                   "expressionList", "statementExpression", "constantExpression", 
                   "apexDbExpressionLong", "apexDbExpressionShort", "apexDbExpression", 
                   "expression", "primary", "creator", "createdName", "innerCreator", 
                   "arrayCreatorRest", "mapCreatorRest", "setCreatorRest", 
                   "classCreatorRest", "explicitGenericInvocation", "nonWildcardTypeArguments", 
                   "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments" ];

function apexParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

apexParser.prototype = Object.create(antlr4.Parser.prototype);
apexParser.prototype.constructor = apexParser;

Object.defineProperty(apexParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

apexParser.EOF = antlr4.Token.EOF;
apexParser.SoqlLiteral = 1;
apexParser.OVERRIDE = 2;
apexParser.VIRTUAL = 3;
apexParser.SET = 4;
apexParser.GET = 5;
apexParser.DATABASE = 6;
apexParser.ABSTRACT = 7;
apexParser.BOOLEAN = 8;
apexParser.BREAK = 9;
apexParser.BYTE = 10;
apexParser.CATCH = 11;
apexParser.CHAR = 12;
apexParser.CLASS = 13;
apexParser.CONST = 14;
apexParser.CONTINUE = 15;
apexParser.DEFAULT = 16;
apexParser.DO = 17;
apexParser.DOUBLE = 18;
apexParser.ELSE = 19;
apexParser.ENUM = 20;
apexParser.EXTENDS = 21;
apexParser.FINAL = 22;
apexParser.FINALLY = 23;
apexParser.FLOAT = 24;
apexParser.FOR = 25;
apexParser.IF = 26;
apexParser.GOTO = 27;
apexParser.IMPLEMENTS = 28;
apexParser.IMPORT = 29;
apexParser.INSTANCEOF = 30;
apexParser.INT = 31;
apexParser.INTERFACE = 32;
apexParser.LONG = 33;
apexParser.NATIVE = 34;
apexParser.NEW = 35;
apexParser.PACKAGE = 36;
apexParser.PRIVATE = 37;
apexParser.PROTECTED = 38;
apexParser.PUBLIC = 39;
apexParser.RETURN = 40;
apexParser.SHORT = 41;
apexParser.STATIC = 42;
apexParser.SUPER = 43;
apexParser.SYNCHRONIZED = 44;
apexParser.THIS = 45;
apexParser.THROW = 46;
apexParser.THROWS = 47;
apexParser.TRANSIENT = 48;
apexParser.TRY = 49;
apexParser.VOID = 50;
apexParser.VOLATILE = 51;
apexParser.WHILE = 52;
apexParser.GLOBAL = 53;
apexParser.WEBSERVICE = 54;
apexParser.APEX_WITH_SHARING = 55;
apexParser.APEX_WITHOUT_SHARING = 56;
apexParser.SELECT = 57;
apexParser.DB_INSERT = 58;
apexParser.DB_UPSERT = 59;
apexParser.DB_UPDATE = 60;
apexParser.DB_DELETE = 61;
apexParser.DB_UNDELETE = 62;
apexParser.TESTMETHOD = 63;
apexParser.IntegerLiteral = 64;
apexParser.FloatingPointLiteral = 65;
apexParser.BooleanLiteral = 66;
apexParser.CharacterLiteral = 67;
apexParser.StringLiteral = 68;
apexParser.NullLiteral = 69;
apexParser.LPAREN = 70;
apexParser.RPAREN = 71;
apexParser.LBRACE = 72;
apexParser.RBRACE = 73;
apexParser.LBRACK = 74;
apexParser.RBRACK = 75;
apexParser.SEMI = 76;
apexParser.COMMA = 77;
apexParser.DOT = 78;
apexParser.ASSIGN = 79;
apexParser.GT = 80;
apexParser.LT = 81;
apexParser.BANG = 82;
apexParser.TILDE = 83;
apexParser.QUESTION = 84;
apexParser.COLON = 85;
apexParser.EQUAL = 86;
apexParser.LE = 87;
apexParser.GE = 88;
apexParser.NOTEQUAL = 89;
apexParser.AND = 90;
apexParser.OR = 91;
apexParser.INC = 92;
apexParser.DEC = 93;
apexParser.ADD = 94;
apexParser.SUB = 95;
apexParser.MUL = 96;
apexParser.DIV = 97;
apexParser.BITAND = 98;
apexParser.BITOR = 99;
apexParser.CARET = 100;
apexParser.MOD = 101;
apexParser.ADD_ASSIGN = 102;
apexParser.SUB_ASSIGN = 103;
apexParser.MUL_ASSIGN = 104;
apexParser.DIV_ASSIGN = 105;
apexParser.AND_ASSIGN = 106;
apexParser.OR_ASSIGN = 107;
apexParser.XOR_ASSIGN = 108;
apexParser.MOD_ASSIGN = 109;
apexParser.LSHIFT_ASSIGN = 110;
apexParser.RSHIFT_ASSIGN = 111;
apexParser.URSHIFT_ASSIGN = 112;
apexParser.LAMBDA_LIKE = 113;
apexParser.Identifier = 114;
apexParser.AT = 115;
apexParser.ELLIPSIS = 116;
apexParser.WS = 117;
apexParser.APEXDOC_COMMENT = 118;
apexParser.APEXDOC_COMMENT_START = 119;
apexParser.COMMENT = 120;
apexParser.COMMENT_START = 121;
apexParser.LINE_COMMENT = 122;
apexParser.QUOTE = 123;

apexParser.RULE_compilationUnit = 0;
apexParser.RULE_typeDeclaration = 1;
apexParser.RULE_modifier = 2;
apexParser.RULE_classOrInterfaceModifier = 3;
apexParser.RULE_variableModifier = 4;
apexParser.RULE_classDeclaration = 5;
apexParser.RULE_typeParameters = 6;
apexParser.RULE_typeParameter = 7;
apexParser.RULE_typeBound = 8;
apexParser.RULE_enumDeclaration = 9;
apexParser.RULE_enumConstants = 10;
apexParser.RULE_enumConstant = 11;
apexParser.RULE_enumBodyDeclarations = 12;
apexParser.RULE_interfaceDeclaration = 13;
apexParser.RULE_typeList = 14;
apexParser.RULE_classBody = 15;
apexParser.RULE_interfaceBody = 16;
apexParser.RULE_classBodyDeclaration = 17;
apexParser.RULE_memberDeclaration = 18;
apexParser.RULE_methodDeclaration = 19;
apexParser.RULE_genericMethodDeclaration = 20;
apexParser.RULE_constructorDeclaration = 21;
apexParser.RULE_genericConstructorDeclaration = 22;
apexParser.RULE_fieldDeclaration = 23;
apexParser.RULE_propertyDeclaration = 24;
apexParser.RULE_propertyBodyDeclaration = 25;
apexParser.RULE_interfaceBodyDeclaration = 26;
apexParser.RULE_interfaceMemberDeclaration = 27;
apexParser.RULE_constDeclaration = 28;
apexParser.RULE_constantDeclarator = 29;
apexParser.RULE_interfaceMethodDeclaration = 30;
apexParser.RULE_genericInterfaceMethodDeclaration = 31;
apexParser.RULE_variableDeclarators = 32;
apexParser.RULE_variableDeclarator = 33;
apexParser.RULE_variableDeclaratorId = 34;
apexParser.RULE_variableInitializer = 35;
apexParser.RULE_arrayInitializer = 36;
apexParser.RULE_enumConstantName = 37;
apexParser.RULE_type = 38;
apexParser.RULE_classOrInterfaceType = 39;
apexParser.RULE_primitiveType = 40;
apexParser.RULE_typeArguments = 41;
apexParser.RULE_typeArgument = 42;
apexParser.RULE_qualifiedNameList = 43;
apexParser.RULE_formalParameters = 44;
apexParser.RULE_formalParameterList = 45;
apexParser.RULE_formalParameter = 46;
apexParser.RULE_lastFormalParameter = 47;
apexParser.RULE_methodBody = 48;
apexParser.RULE_constructorBody = 49;
apexParser.RULE_qualifiedName = 50;
apexParser.RULE_literal = 51;
apexParser.RULE_annotation = 52;
apexParser.RULE_annotationName = 53;
apexParser.RULE_elementValuePairs = 54;
apexParser.RULE_elementValuePair = 55;
apexParser.RULE_elementValue = 56;
apexParser.RULE_elementValueArrayInitializer = 57;
apexParser.RULE_annotationTypeDeclaration = 58;
apexParser.RULE_annotationTypeBody = 59;
apexParser.RULE_annotationTypeElementDeclaration = 60;
apexParser.RULE_annotationTypeElementRest = 61;
apexParser.RULE_annotationMethodOrConstantRest = 62;
apexParser.RULE_annotationMethodRest = 63;
apexParser.RULE_annotationConstantRest = 64;
apexParser.RULE_defaultValue = 65;
apexParser.RULE_block = 66;
apexParser.RULE_blockStatement = 67;
apexParser.RULE_localVariableDeclarationStatement = 68;
apexParser.RULE_localVariableDeclaration = 69;
apexParser.RULE_statement = 70;
apexParser.RULE_propertyBlock = 71;
apexParser.RULE_getter = 72;
apexParser.RULE_setter = 73;
apexParser.RULE_catchClause = 74;
apexParser.RULE_catchType = 75;
apexParser.RULE_finallyBlock = 76;
apexParser.RULE_resourceSpecification = 77;
apexParser.RULE_resources = 78;
apexParser.RULE_resource = 79;
apexParser.RULE_forControl = 80;
apexParser.RULE_forInit = 81;
apexParser.RULE_enhancedForControl = 82;
apexParser.RULE_forUpdate = 83;
apexParser.RULE_parExpression = 84;
apexParser.RULE_expressionList = 85;
apexParser.RULE_statementExpression = 86;
apexParser.RULE_constantExpression = 87;
apexParser.RULE_apexDbExpressionLong = 88;
apexParser.RULE_apexDbExpressionShort = 89;
apexParser.RULE_apexDbExpression = 90;
apexParser.RULE_expression = 91;
apexParser.RULE_primary = 92;
apexParser.RULE_creator = 93;
apexParser.RULE_createdName = 94;
apexParser.RULE_innerCreator = 95;
apexParser.RULE_arrayCreatorRest = 96;
apexParser.RULE_mapCreatorRest = 97;
apexParser.RULE_setCreatorRest = 98;
apexParser.RULE_classCreatorRest = 99;
apexParser.RULE_explicitGenericInvocation = 100;
apexParser.RULE_nonWildcardTypeArguments = 101;
apexParser.RULE_typeArgumentsOrDiamond = 102;
apexParser.RULE_nonWildcardTypeArgumentsOrDiamond = 103;
apexParser.RULE_superSuffix = 104;
apexParser.RULE_explicitGenericInvocationSuffix = 105;
apexParser.RULE_arguments = 106;

function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.EOF = function() {
    return this.getToken(apexParser.EOF, 0);
};

CompilationUnitContext.prototype.typeDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeDeclarationContext);
    } else {
        return this.getTypedRuleContext(TypeDeclarationContext,i);
    }
};

CompilationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCompilationUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CompilationUnitContext = CompilationUnitContext;

apexParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, apexParser.RULE_compilationUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.CLASS) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.INTERFACE - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.TESTMETHOD - 32)))) !== 0) || _la===apexParser.SEMI || _la===apexParser.AT) {
            this.state = 214;
            this.typeDeclaration();
            this.state = 219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 220;
        this.match(apexParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeDeclaration;
    return this;
}

TypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclarationContext.prototype.constructor = TypeDeclarationContext;

TypeDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

TypeDeclarationContext.prototype.classOrInterfaceModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
    } else {
        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
    }
};

TypeDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

TypeDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

TypeDeclarationContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

TypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeDeclarationContext = TypeDeclarationContext;

apexParser.prototype.typeDeclaration = function() {

    var localctx = new TypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, apexParser.RULE_typeDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 251;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 225;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0) || _la===apexParser.AT) {
                this.state = 222;
                this.classOrInterfaceModifier();
                this.state = 227;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 228;
            this.classDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0) || _la===apexParser.AT) {
                this.state = 229;
                this.classOrInterfaceModifier();
                this.state = 234;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 235;
            this.enumDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 239;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0) || _la===apexParser.AT) {
                this.state = 236;
                this.classOrInterfaceModifier();
                this.state = 241;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 242;
            this.interfaceDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 246;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 243;
                    this.classOrInterfaceModifier(); 
                }
                this.state = 248;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
            }

            this.state = 249;
            this.annotationTypeDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 250;
            this.match(apexParser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_modifier;
    return this;
}

ModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierContext.prototype.constructor = ModifierContext;

ModifierContext.prototype.classOrInterfaceModifier = function() {
    return this.getTypedRuleContext(ClassOrInterfaceModifierContext,0);
};

ModifierContext.prototype.NATIVE = function() {
    return this.getToken(apexParser.NATIVE, 0);
};

ModifierContext.prototype.SYNCHRONIZED = function() {
    return this.getToken(apexParser.SYNCHRONIZED, 0);
};

ModifierContext.prototype.TRANSIENT = function() {
    return this.getToken(apexParser.TRANSIENT, 0);
};

ModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterModifier(this);
	}
};

ModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitModifier(this);
	}
};

ModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ModifierContext = ModifierContext;

apexParser.prototype.modifier = function() {

    var localctx = new ModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, apexParser.RULE_modifier);
    var _la = 0; // Token type
    try {
        this.state = 255;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.OVERRIDE:
        case apexParser.VIRTUAL:
        case apexParser.ABSTRACT:
        case apexParser.FINAL:
        case apexParser.PRIVATE:
        case apexParser.PROTECTED:
        case apexParser.PUBLIC:
        case apexParser.STATIC:
        case apexParser.GLOBAL:
        case apexParser.WEBSERVICE:
        case apexParser.APEX_WITH_SHARING:
        case apexParser.APEX_WITHOUT_SHARING:
        case apexParser.TESTMETHOD:
        case apexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 253;
            this.classOrInterfaceModifier();
            break;
        case apexParser.NATIVE:
        case apexParser.SYNCHRONIZED:
        case apexParser.TRANSIENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 254;
            _la = this._input.LA(1);
            if(!(((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.NATIVE - 34)) | (1 << (apexParser.SYNCHRONIZED - 34)) | (1 << (apexParser.TRANSIENT - 34)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classOrInterfaceModifier;
    return this;
}

ClassOrInterfaceModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceModifierContext.prototype.constructor = ClassOrInterfaceModifierContext;

ClassOrInterfaceModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ClassOrInterfaceModifierContext.prototype.PUBLIC = function() {
    return this.getToken(apexParser.PUBLIC, 0);
};

ClassOrInterfaceModifierContext.prototype.PROTECTED = function() {
    return this.getToken(apexParser.PROTECTED, 0);
};

ClassOrInterfaceModifierContext.prototype.PRIVATE = function() {
    return this.getToken(apexParser.PRIVATE, 0);
};

ClassOrInterfaceModifierContext.prototype.STATIC = function() {
    return this.getToken(apexParser.STATIC, 0);
};

ClassOrInterfaceModifierContext.prototype.ABSTRACT = function() {
    return this.getToken(apexParser.ABSTRACT, 0);
};

ClassOrInterfaceModifierContext.prototype.FINAL = function() {
    return this.getToken(apexParser.FINAL, 0);
};

ClassOrInterfaceModifierContext.prototype.GLOBAL = function() {
    return this.getToken(apexParser.GLOBAL, 0);
};

ClassOrInterfaceModifierContext.prototype.WEBSERVICE = function() {
    return this.getToken(apexParser.WEBSERVICE, 0);
};

ClassOrInterfaceModifierContext.prototype.OVERRIDE = function() {
    return this.getToken(apexParser.OVERRIDE, 0);
};

ClassOrInterfaceModifierContext.prototype.VIRTUAL = function() {
    return this.getToken(apexParser.VIRTUAL, 0);
};

ClassOrInterfaceModifierContext.prototype.TESTMETHOD = function() {
    return this.getToken(apexParser.TESTMETHOD, 0);
};

ClassOrInterfaceModifierContext.prototype.APEX_WITH_SHARING = function() {
    return this.getToken(apexParser.APEX_WITH_SHARING, 0);
};

ClassOrInterfaceModifierContext.prototype.APEX_WITHOUT_SHARING = function() {
    return this.getToken(apexParser.APEX_WITHOUT_SHARING, 0);
};

ClassOrInterfaceModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassOrInterfaceModifier(this);
	}
};

ClassOrInterfaceModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassOrInterfaceModifier(this);
	}
};

ClassOrInterfaceModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassOrInterfaceModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext;

apexParser.prototype.classOrInterfaceModifier = function() {

    var localctx = new ClassOrInterfaceModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, apexParser.RULE_classOrInterfaceModifier);
    var _la = 0; // Token type
    try {
        this.state = 259;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 257;
            this.annotation();
            break;
        case apexParser.OVERRIDE:
        case apexParser.VIRTUAL:
        case apexParser.ABSTRACT:
        case apexParser.FINAL:
        case apexParser.PRIVATE:
        case apexParser.PROTECTED:
        case apexParser.PUBLIC:
        case apexParser.STATIC:
        case apexParser.GLOBAL:
        case apexParser.WEBSERVICE:
        case apexParser.APEX_WITH_SHARING:
        case apexParser.APEX_WITHOUT_SHARING:
        case apexParser.TESTMETHOD:
            this.enterOuterAlt(localctx, 2);
            this.state = 258;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableModifier;
    return this;
}

VariableModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableModifierContext.prototype.constructor = VariableModifierContext;

VariableModifierContext.prototype.FINAL = function() {
    return this.getToken(apexParser.FINAL, 0);
};

VariableModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

VariableModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableModifier(this);
	}
};

VariableModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableModifier(this);
	}
};

VariableModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableModifierContext = VariableModifierContext;

apexParser.prototype.variableModifier = function() {

    var localctx = new VariableModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, apexParser.RULE_variableModifier);
    try {
        this.state = 263;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.FINAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 261;
            this.match(apexParser.FINAL);
            break;
        case apexParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 262;
            this.annotation();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.CLASS = function() {
    return this.getToken(apexParser.CLASS, 0);
};

ClassDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ClassDeclarationContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

ClassDeclarationContext.prototype.EXTENDS = function() {
    return this.getToken(apexParser.EXTENDS, 0);
};

ClassDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ClassDeclarationContext.prototype.IMPLEMENTS = function() {
    return this.getToken(apexParser.IMPLEMENTS, 0);
};

ClassDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassDeclarationContext = ClassDeclarationContext;

apexParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, apexParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 265;
        this.match(apexParser.CLASS);
        this.state = 266;
        this.match(apexParser.Identifier);
        this.state = 268;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LT) {
            this.state = 267;
            this.typeParameters();
        }

        this.state = 272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.EXTENDS) {
            this.state = 270;
            this.match(apexParser.EXTENDS);
            this.state = 271;
            this.type();
        }

        this.state = 276;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.IMPLEMENTS) {
            this.state = 274;
            this.match(apexParser.IMPLEMENTS);
            this.state = 275;
            this.typeList();
        }

        this.state = 278;
        this.classBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeParameters;
    return this;
}

TypeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParametersContext.prototype.constructor = TypeParametersContext;

TypeParametersContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeParameters(this);
	}
};

TypeParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeParameters(this);
	}
};

TypeParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeParametersContext = TypeParametersContext;

apexParser.prototype.typeParameters = function() {

    var localctx = new TypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, apexParser.RULE_typeParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 280;
        this.match(apexParser.LT);
        this.state = 281;
        this.typeParameter();
        this.state = 286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 282;
            this.match(apexParser.COMMA);
            this.state = 283;
            this.typeParameter();
            this.state = 288;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 289;
        this.match(apexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

TypeParameterContext.prototype.EXTENDS = function() {
    return this.getToken(apexParser.EXTENDS, 0);
};

TypeParameterContext.prototype.typeBound = function() {
    return this.getTypedRuleContext(TypeBoundContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeParameter(this);
	}
};

TypeParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeParameterContext = TypeParameterContext;

apexParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, apexParser.RULE_typeParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 291;
        this.match(apexParser.Identifier);
        this.state = 294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.EXTENDS) {
            this.state = 292;
            this.match(apexParser.EXTENDS);
            this.state = 293;
            this.typeBound();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeBound;
    return this;
}

TypeBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeBoundContext.prototype.constructor = TypeBoundContext;

TypeBoundContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeBound(this);
	}
};

TypeBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeBound(this);
	}
};

TypeBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeBound(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeBoundContext = TypeBoundContext;

apexParser.prototype.typeBound = function() {

    var localctx = new TypeBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, apexParser.RULE_typeBound);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 296;
        this.type();
        this.state = 301;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.BITAND) {
            this.state = 297;
            this.match(apexParser.BITAND);
            this.state = 298;
            this.type();
            this.state = 303;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumDeclaration;
    return this;
}

EnumDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.ENUM = function() {
    return this.getToken(apexParser.ENUM, 0);
};

EnumDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

EnumDeclarationContext.prototype.IMPLEMENTS = function() {
    return this.getToken(apexParser.IMPLEMENTS, 0);
};

EnumDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

EnumDeclarationContext.prototype.enumConstants = function() {
    return this.getTypedRuleContext(EnumConstantsContext,0);
};

EnumDeclarationContext.prototype.enumBodyDeclarations = function() {
    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
};

EnumDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumDeclarationContext = EnumDeclarationContext;

apexParser.prototype.enumDeclaration = function() {

    var localctx = new EnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, apexParser.RULE_enumDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 304;
        this.match(apexParser.ENUM);
        this.state = 305;
        this.match(apexParser.Identifier);
        this.state = 308;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.IMPLEMENTS) {
            this.state = 306;
            this.match(apexParser.IMPLEMENTS);
            this.state = 307;
            this.typeList();
        }

        this.state = 310;
        this.match(apexParser.LBRACE);
        this.state = 312;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 311;
            this.enumConstants();
        }

        this.state = 315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.COMMA) {
            this.state = 314;
            this.match(apexParser.COMMA);
        }

        this.state = 318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.SEMI) {
            this.state = 317;
            this.enumBodyDeclarations();
        }

        this.state = 320;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumConstants;
    return this;
}

EnumConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantsContext.prototype.constructor = EnumConstantsContext;

EnumConstantsContext.prototype.enumConstant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumConstantContext);
    } else {
        return this.getTypedRuleContext(EnumConstantContext,i);
    }
};

EnumConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumConstants(this);
	}
};

EnumConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumConstants(this);
	}
};

EnumConstantsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumConstants(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumConstantsContext = EnumConstantsContext;

apexParser.prototype.enumConstants = function() {

    var localctx = new EnumConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, apexParser.RULE_enumConstants);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 322;
        this.enumConstant();
        this.state = 327;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 323;
                this.match(apexParser.COMMA);
                this.state = 324;
                this.enumConstant(); 
            }
            this.state = 329;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumConstant;
    return this;
}

EnumConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantContext.prototype.constructor = EnumConstantContext;

EnumConstantContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

EnumConstantContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

EnumConstantContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

EnumConstantContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

EnumConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumConstant(this);
	}
};

EnumConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumConstant(this);
	}
};

EnumConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumConstantContext = EnumConstantContext;

apexParser.prototype.enumConstant = function() {

    var localctx = new EnumConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, apexParser.RULE_enumConstant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.AT) {
            this.state = 330;
            this.annotation();
            this.state = 335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 336;
        this.match(apexParser.Identifier);
        this.state = 338;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LPAREN) {
            this.state = 337;
            this.arguments();
        }

        this.state = 341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LBRACE) {
            this.state = 340;
            this.classBody();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumBodyDeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumBodyDeclarations;
    return this;
}

EnumBodyDeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumBodyDeclarationsContext.prototype.constructor = EnumBodyDeclarationsContext;

EnumBodyDeclarationsContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

EnumBodyDeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumBodyDeclarations(this);
	}
};

EnumBodyDeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumBodyDeclarations(this);
	}
};

EnumBodyDeclarationsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumBodyDeclarations(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext;

apexParser.prototype.enumBodyDeclarations = function() {

    var localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, apexParser.RULE_enumBodyDeclarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(apexParser.SEMI);
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.INTERFACE - 32)) | (1 << (apexParser.LONG - 32)) | (1 << (apexParser.NATIVE - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.SYNCHRONIZED - 32)) | (1 << (apexParser.TRANSIENT - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.TESTMETHOD - 32)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (apexParser.LBRACE - 72)) | (1 << (apexParser.SEMI - 72)) | (1 << (apexParser.LT - 72)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 344;
            this.classBodyDeclaration();
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceDeclaration;
    return this;
}

InterfaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDeclarationContext.prototype.constructor = InterfaceDeclarationContext;

InterfaceDeclarationContext.prototype.INTERFACE = function() {
    return this.getToken(apexParser.INTERFACE, 0);
};

InterfaceDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

InterfaceDeclarationContext.prototype.interfaceBody = function() {
    return this.getTypedRuleContext(InterfaceBodyContext,0);
};

InterfaceDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

InterfaceDeclarationContext.prototype.EXTENDS = function() {
    return this.getToken(apexParser.EXTENDS, 0);
};

InterfaceDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

InterfaceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceDeclaration(this);
	}
};

InterfaceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceDeclaration(this);
	}
};

InterfaceDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceDeclarationContext = InterfaceDeclarationContext;

apexParser.prototype.interfaceDeclaration = function() {

    var localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, apexParser.RULE_interfaceDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 350;
        this.match(apexParser.INTERFACE);
        this.state = 351;
        this.match(apexParser.Identifier);
        this.state = 353;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LT) {
            this.state = 352;
            this.typeParameters();
        }

        this.state = 357;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.EXTENDS) {
            this.state = 355;
            this.match(apexParser.EXTENDS);
            this.state = 356;
            this.typeList();
        }

        this.state = 359;
        this.interfaceBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeList;
    return this;
}

TypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeListContext.prototype.constructor = TypeListContext;

TypeListContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeList(this);
	}
};

TypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeList(this);
	}
};

TypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeListContext = TypeListContext;

apexParser.prototype.typeList = function() {

    var localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, apexParser.RULE_typeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 361;
        this.type();
        this.state = 366;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 362;
            this.match(apexParser.COMMA);
            this.state = 363;
            this.type();
            this.state = 368;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassBody(this);
	}
};

ClassBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassBodyContext = ClassBodyContext;

apexParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, apexParser.RULE_classBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 369;
        this.match(apexParser.LBRACE);
        this.state = 373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.INTERFACE - 32)) | (1 << (apexParser.LONG - 32)) | (1 << (apexParser.NATIVE - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.SYNCHRONIZED - 32)) | (1 << (apexParser.TRANSIENT - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.TESTMETHOD - 32)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (apexParser.LBRACE - 72)) | (1 << (apexParser.SEMI - 72)) | (1 << (apexParser.LT - 72)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 370;
            this.classBodyDeclaration();
            this.state = 375;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 376;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceBody;
    return this;
}

InterfaceBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyContext.prototype.constructor = InterfaceBodyContext;

InterfaceBodyContext.prototype.interfaceBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(InterfaceBodyDeclarationContext,i);
    }
};

InterfaceBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceBody(this);
	}
};

InterfaceBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceBody(this);
	}
};

InterfaceBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceBodyContext = InterfaceBodyContext;

apexParser.prototype.interfaceBody = function() {

    var localctx = new InterfaceBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, apexParser.RULE_interfaceBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 378;
        this.match(apexParser.LBRACE);
        this.state = 382;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.INTERFACE - 32)) | (1 << (apexParser.LONG - 32)) | (1 << (apexParser.NATIVE - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.SYNCHRONIZED - 32)) | (1 << (apexParser.TRANSIENT - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.TESTMETHOD - 32)))) !== 0) || _la===apexParser.SEMI || _la===apexParser.LT || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 379;
            this.interfaceBodyDeclaration();
            this.state = 384;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 385;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classBodyDeclaration;
    return this;
}

ClassBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyDeclarationContext.prototype.constructor = ClassBodyDeclarationContext;

ClassBodyDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ClassBodyDeclarationContext.prototype.STATIC = function() {
    return this.getToken(apexParser.STATIC, 0);
};

ClassBodyDeclarationContext.prototype.memberDeclaration = function() {
    return this.getTypedRuleContext(MemberDeclarationContext,0);
};

ClassBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

ClassBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassBodyDeclaration(this);
	}
};

ClassBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassBodyDeclaration(this);
	}
};

ClassBodyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassBodyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext;

apexParser.prototype.classBodyDeclaration = function() {

    var localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, apexParser.RULE_classBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 399;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 387;
            this.match(apexParser.SEMI);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 389;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.STATIC) {
                this.state = 388;
                this.match(apexParser.STATIC);
            }

            this.state = 391;
            this.block();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 395;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 392;
                    this.modifier(); 
                }
                this.state = 397;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
            }

            this.state = 398;
            this.memberDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_memberDeclaration;
    return this;
}

MemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberDeclarationContext.prototype.constructor = MemberDeclarationContext;

MemberDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

MemberDeclarationContext.prototype.genericMethodDeclaration = function() {
    return this.getTypedRuleContext(GenericMethodDeclarationContext,0);
};

MemberDeclarationContext.prototype.fieldDeclaration = function() {
    return this.getTypedRuleContext(FieldDeclarationContext,0);
};

MemberDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

MemberDeclarationContext.prototype.genericConstructorDeclaration = function() {
    return this.getTypedRuleContext(GenericConstructorDeclarationContext,0);
};

MemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

MemberDeclarationContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

MemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

MemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

MemberDeclarationContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

MemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMemberDeclaration(this);
	}
};

MemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMemberDeclaration(this);
	}
};

MemberDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMemberDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MemberDeclarationContext = MemberDeclarationContext;

apexParser.prototype.memberDeclaration = function() {

    var localctx = new MemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, apexParser.RULE_memberDeclaration);
    try {
        this.state = 411;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 401;
            this.methodDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 402;
            this.genericMethodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 403;
            this.fieldDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 404;
            this.constructorDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 405;
            this.genericConstructorDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 406;
            this.interfaceDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 407;
            this.annotationTypeDeclaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 408;
            this.classDeclaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 409;
            this.enumDeclaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 410;
            this.propertyDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

MethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

MethodDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

MethodDeclarationContext.prototype.VOID = function() {
    return this.getToken(apexParser.VOID, 0);
};

MethodDeclarationContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

MethodDeclarationContext.prototype.OVERRIDE = function() {
    return this.getToken(apexParser.OVERRIDE, 0);
};

MethodDeclarationContext.prototype.THROWS = function() {
    return this.getToken(apexParser.THROWS, 0);
};

MethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MethodDeclarationContext = MethodDeclarationContext;

apexParser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, apexParser.RULE_methodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.OVERRIDE) {
            this.state = 413;
            this.match(apexParser.OVERRIDE);
        }

        this.state = 418;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.state = 416;
            this.type();
            break;
        case apexParser.VOID:
            this.state = 417;
            this.match(apexParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 420;
        this.match(apexParser.Identifier);
        this.state = 421;
        this.formalParameters();
        this.state = 426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 422;
            this.match(apexParser.LBRACK);
            this.state = 423;
            this.match(apexParser.RBRACK);
            this.state = 428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 431;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.THROWS) {
            this.state = 429;
            this.match(apexParser.THROWS);
            this.state = 430;
            this.qualifiedNameList();
        }

        this.state = 435;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LBRACE:
            this.state = 433;
            this.methodBody();
            break;
        case apexParser.SEMI:
            this.state = 434;
            this.match(apexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_genericMethodDeclaration;
    return this;
}

GenericMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericMethodDeclarationContext.prototype.constructor = GenericMethodDeclarationContext;

GenericMethodDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

GenericMethodDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

GenericMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterGenericMethodDeclaration(this);
	}
};

GenericMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitGenericMethodDeclaration(this);
	}
};

GenericMethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitGenericMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.GenericMethodDeclarationContext = GenericMethodDeclarationContext;

apexParser.prototype.genericMethodDeclaration = function() {

    var localctx = new GenericMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, apexParser.RULE_genericMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 437;
        this.typeParameters();
        this.state = 438;
        this.methodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constructorDeclaration;
    return this;
}

ConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDeclarationContext.prototype.constructor = ConstructorDeclarationContext;

ConstructorDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ConstructorDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

ConstructorDeclarationContext.prototype.constructorBody = function() {
    return this.getTypedRuleContext(ConstructorBodyContext,0);
};

ConstructorDeclarationContext.prototype.THROWS = function() {
    return this.getToken(apexParser.THROWS, 0);
};

ConstructorDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

ConstructorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstructorDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstructorDeclarationContext = ConstructorDeclarationContext;

apexParser.prototype.constructorDeclaration = function() {

    var localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, apexParser.RULE_constructorDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.match(apexParser.Identifier);
        this.state = 441;
        this.formalParameters();
        this.state = 444;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.THROWS) {
            this.state = 442;
            this.match(apexParser.THROWS);
            this.state = 443;
            this.qualifiedNameList();
        }

        this.state = 446;
        this.constructorBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_genericConstructorDeclaration;
    return this;
}

GenericConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericConstructorDeclarationContext.prototype.constructor = GenericConstructorDeclarationContext;

GenericConstructorDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

GenericConstructorDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

GenericConstructorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterGenericConstructorDeclaration(this);
	}
};

GenericConstructorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitGenericConstructorDeclaration(this);
	}
};

GenericConstructorDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitGenericConstructorDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.GenericConstructorDeclarationContext = GenericConstructorDeclarationContext;

apexParser.prototype.genericConstructorDeclaration = function() {

    var localctx = new GenericConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, apexParser.RULE_genericConstructorDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 448;
        this.typeParameters();
        this.state = 449;
        this.constructorDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_fieldDeclaration;
    return this;
}

FieldDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclarationContext.prototype.constructor = FieldDeclarationContext;

FieldDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FieldDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

FieldDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFieldDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FieldDeclarationContext = FieldDeclarationContext;

apexParser.prototype.fieldDeclaration = function() {

    var localctx = new FieldDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, apexParser.RULE_fieldDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 451;
        this.type();
        this.state = 452;
        this.variableDeclarators();
        this.state = 453;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_propertyDeclaration;
    return this;
}

PropertyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeclarationContext.prototype.constructor = PropertyDeclarationContext;

PropertyDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PropertyDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

PropertyDeclarationContext.prototype.propertyBodyDeclaration = function() {
    return this.getTypedRuleContext(PropertyBodyDeclarationContext,0);
};

PropertyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPropertyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PropertyDeclarationContext = PropertyDeclarationContext;

apexParser.prototype.propertyDeclaration = function() {

    var localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, apexParser.RULE_propertyDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 455;
        this.type();
        this.state = 456;
        this.variableDeclarators();
        this.state = 457;
        this.propertyBodyDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_propertyBodyDeclaration;
    return this;
}

PropertyBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBodyDeclarationContext.prototype.constructor = PropertyBodyDeclarationContext;

PropertyBodyDeclarationContext.prototype.propertyBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyBlockContext);
    } else {
        return this.getTypedRuleContext(PropertyBlockContext,i);
    }
};

PropertyBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPropertyBodyDeclaration(this);
	}
};

PropertyBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPropertyBodyDeclaration(this);
	}
};

PropertyBodyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPropertyBodyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PropertyBodyDeclarationContext = PropertyBodyDeclarationContext;

apexParser.prototype.propertyBodyDeclaration = function() {

    var localctx = new PropertyBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, apexParser.RULE_propertyBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        this.match(apexParser.LBRACE);
        this.state = 460;
        this.propertyBlock();
        this.state = 462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.GET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.NATIVE - 34)) | (1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.SYNCHRONIZED - 34)) | (1 << (apexParser.TRANSIENT - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || _la===apexParser.AT) {
            this.state = 461;
            this.propertyBlock();
        }

        this.state = 464;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceBodyDeclaration;
    return this;
}

InterfaceBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyDeclarationContext.prototype.constructor = InterfaceBodyDeclarationContext;

InterfaceBodyDeclarationContext.prototype.interfaceMemberDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMemberDeclarationContext,0);
};

InterfaceBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

InterfaceBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceBodyDeclaration(this);
	}
};

InterfaceBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceBodyDeclaration(this);
	}
};

InterfaceBodyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceBodyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceBodyDeclarationContext = InterfaceBodyDeclarationContext;

apexParser.prototype.interfaceBodyDeclaration = function() {

    var localctx = new InterfaceBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, apexParser.RULE_interfaceBodyDeclaration);
    try {
        this.state = 474;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.OVERRIDE:
        case apexParser.VIRTUAL:
        case apexParser.SET:
        case apexParser.ABSTRACT:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.CLASS:
        case apexParser.DOUBLE:
        case apexParser.ENUM:
        case apexParser.FINAL:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.INTERFACE:
        case apexParser.LONG:
        case apexParser.NATIVE:
        case apexParser.PRIVATE:
        case apexParser.PROTECTED:
        case apexParser.PUBLIC:
        case apexParser.SHORT:
        case apexParser.STATIC:
        case apexParser.SYNCHRONIZED:
        case apexParser.TRANSIENT:
        case apexParser.VOID:
        case apexParser.GLOBAL:
        case apexParser.WEBSERVICE:
        case apexParser.APEX_WITH_SHARING:
        case apexParser.APEX_WITHOUT_SHARING:
        case apexParser.TESTMETHOD:
        case apexParser.LT:
        case apexParser.Identifier:
        case apexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 469;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 466;
                    this.modifier(); 
                }
                this.state = 471;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
            }

            this.state = 472;
            this.interfaceMemberDeclaration();
            break;
        case apexParser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 473;
            this.match(apexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceMemberDeclaration;
    return this;
}

InterfaceMemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMemberDeclarationContext.prototype.constructor = InterfaceMemberDeclarationContext;

InterfaceMemberDeclarationContext.prototype.constDeclaration = function() {
    return this.getTypedRuleContext(ConstDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.genericInterfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(GenericInterfaceMethodDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceMemberDeclaration(this);
	}
};

InterfaceMemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceMemberDeclaration(this);
	}
};

InterfaceMemberDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceMemberDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext;

apexParser.prototype.interfaceMemberDeclaration = function() {

    var localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, apexParser.RULE_interfaceMemberDeclaration);
    try {
        this.state = 483;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 476;
            this.constDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 477;
            this.interfaceMethodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 478;
            this.genericInterfaceMethodDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 479;
            this.interfaceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 480;
            this.annotationTypeDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 481;
            this.classDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 482;
            this.enumDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constDeclaration;
    return this;
}

ConstDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstDeclarationContext.prototype.constructor = ConstDeclarationContext;

ConstDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ConstDeclarationContext.prototype.constantDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantDeclaratorContext);
    } else {
        return this.getTypedRuleContext(ConstantDeclaratorContext,i);
    }
};

ConstDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstDeclaration(this);
	}
};

ConstDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstDeclaration(this);
	}
};

ConstDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstDeclarationContext = ConstDeclarationContext;

apexParser.prototype.constDeclaration = function() {

    var localctx = new ConstDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, apexParser.RULE_constDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 485;
        this.type();
        this.state = 486;
        this.constantDeclarator();
        this.state = 491;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 487;
            this.match(apexParser.COMMA);
            this.state = 488;
            this.constantDeclarator();
            this.state = 493;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 494;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constantDeclarator;
    return this;
}

ConstantDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDeclaratorContext.prototype.constructor = ConstantDeclaratorContext;

ConstantDeclaratorContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ConstantDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

ConstantDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstantDeclarator(this);
	}
};

ConstantDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstantDeclarator(this);
	}
};

ConstantDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstantDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstantDeclaratorContext = ConstantDeclaratorContext;

apexParser.prototype.constantDeclarator = function() {

    var localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, apexParser.RULE_constantDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 496;
        this.match(apexParser.Identifier);
        this.state = 501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 497;
            this.match(apexParser.LBRACK);
            this.state = 498;
            this.match(apexParser.RBRACK);
            this.state = 503;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 504;
        this.match(apexParser.ASSIGN);
        this.state = 505;
        this.variableInitializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceMethodDeclaration;
    return this;
}

InterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodDeclarationContext.prototype.constructor = InterfaceMethodDeclarationContext;

InterfaceMethodDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

InterfaceMethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

InterfaceMethodDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

InterfaceMethodDeclarationContext.prototype.VOID = function() {
    return this.getToken(apexParser.VOID, 0);
};

InterfaceMethodDeclarationContext.prototype.THROWS = function() {
    return this.getToken(apexParser.THROWS, 0);
};

InterfaceMethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

InterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;

apexParser.prototype.interfaceMethodDeclaration = function() {

    var localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, apexParser.RULE_interfaceMethodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.state = 507;
            this.type();
            break;
        case apexParser.VOID:
            this.state = 508;
            this.match(apexParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 511;
        this.match(apexParser.Identifier);
        this.state = 512;
        this.formalParameters();
        this.state = 517;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 513;
            this.match(apexParser.LBRACK);
            this.state = 514;
            this.match(apexParser.RBRACK);
            this.state = 519;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.THROWS) {
            this.state = 520;
            this.match(apexParser.THROWS);
            this.state = 521;
            this.qualifiedNameList();
        }

        this.state = 524;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericInterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_genericInterfaceMethodDeclaration;
    return this;
}

GenericInterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericInterfaceMethodDeclarationContext.prototype.constructor = GenericInterfaceMethodDeclarationContext;

GenericInterfaceMethodDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

GenericInterfaceMethodDeclarationContext.prototype.interfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
};

GenericInterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterGenericInterfaceMethodDeclaration(this);
	}
};

GenericInterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitGenericInterfaceMethodDeclaration(this);
	}
};

GenericInterfaceMethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitGenericInterfaceMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.GenericInterfaceMethodDeclarationContext = GenericInterfaceMethodDeclarationContext;

apexParser.prototype.genericInterfaceMethodDeclaration = function() {

    var localctx = new GenericInterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, apexParser.RULE_genericInterfaceMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this.typeParameters();
        this.state = 527;
        this.interfaceMethodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableDeclarators;
    return this;
}

VariableDeclaratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorsContext.prototype.constructor = VariableDeclaratorsContext;

VariableDeclaratorsContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableDeclarators(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableDeclaratorsContext = VariableDeclaratorsContext;

apexParser.prototype.variableDeclarators = function() {

    var localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, apexParser.RULE_variableDeclarators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 529;
        this.variableDeclarator();
        this.state = 534;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 530;
            this.match(apexParser.COMMA);
            this.state = 531;
            this.variableDeclarator();
            this.state = 536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

VariableDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

VariableDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableDeclaratorContext = VariableDeclaratorContext;

apexParser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, apexParser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 537;
        this.variableDeclaratorId();
        this.state = 540;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.ASSIGN) {
            this.state = 538;
            this.match(apexParser.ASSIGN);
            this.state = 539;
            this.variableInitializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableDeclaratorId;
    return this;
}

VariableDeclaratorIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorIdContext.prototype.constructor = VariableDeclaratorIdContext;

VariableDeclaratorIdContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

VariableDeclaratorIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableDeclaratorId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext;

apexParser.prototype.variableDeclaratorId = function() {

    var localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, apexParser.RULE_variableDeclaratorId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 542;
        this.match(apexParser.Identifier);
        this.state = 547;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 543;
            this.match(apexParser.LBRACK);
            this.state = 544;
            this.match(apexParser.RBRACK);
            this.state = 549;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableInitializer;
    return this;
}

VariableInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerContext.prototype.constructor = VariableInitializerContext;

VariableInitializerContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

VariableInitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableInitializerContext = VariableInitializerContext;

apexParser.prototype.variableInitializer = function() {

    var localctx = new VariableInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, apexParser.RULE_variableInitializer);
    try {
        this.state = 552;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 550;
            this.arrayInitializer();
            break;
        case apexParser.SoqlLiteral:
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.NEW:
        case apexParser.SHORT:
        case apexParser.SUPER:
        case apexParser.THIS:
        case apexParser.VOID:
        case apexParser.IntegerLiteral:
        case apexParser.FloatingPointLiteral:
        case apexParser.BooleanLiteral:
        case apexParser.CharacterLiteral:
        case apexParser.StringLiteral:
        case apexParser.NullLiteral:
        case apexParser.LPAREN:
        case apexParser.LT:
        case apexParser.BANG:
        case apexParser.TILDE:
        case apexParser.INC:
        case apexParser.DEC:
        case apexParser.ADD:
        case apexParser.SUB:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 551;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.variableInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
        return this.getTypedRuleContext(VariableInitializerContext,i);
    }
};

ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ArrayInitializerContext = ArrayInitializerContext;

apexParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, apexParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 554;
        this.match(apexParser.LBRACE);
        this.state = 566;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)) | (1 << (apexParser.IntegerLiteral - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (apexParser.FloatingPointLiteral - 65)) | (1 << (apexParser.BooleanLiteral - 65)) | (1 << (apexParser.CharacterLiteral - 65)) | (1 << (apexParser.StringLiteral - 65)) | (1 << (apexParser.NullLiteral - 65)) | (1 << (apexParser.LPAREN - 65)) | (1 << (apexParser.LBRACE - 65)) | (1 << (apexParser.LT - 65)) | (1 << (apexParser.BANG - 65)) | (1 << (apexParser.TILDE - 65)) | (1 << (apexParser.INC - 65)) | (1 << (apexParser.DEC - 65)) | (1 << (apexParser.ADD - 65)) | (1 << (apexParser.SUB - 65)))) !== 0) || _la===apexParser.Identifier) {
            this.state = 555;
            this.variableInitializer();
            this.state = 560;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 556;
                    this.match(apexParser.COMMA);
                    this.state = 557;
                    this.variableInitializer(); 
                }
                this.state = 562;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
            }

            this.state = 564;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.COMMA) {
                this.state = 563;
                this.match(apexParser.COMMA);
            }

        }

        this.state = 568;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumConstantName;
    return this;
}

EnumConstantNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantNameContext.prototype.constructor = EnumConstantNameContext;

EnumConstantNameContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

EnumConstantNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumConstantName(this);
	}
};

EnumConstantNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumConstantName(this);
	}
};

EnumConstantNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumConstantName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumConstantNameContext = EnumConstantNameContext;

apexParser.prototype.enumConstantName = function() {

    var localctx = new EnumConstantNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, apexParser.RULE_enumConstantName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this.match(apexParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

TypeContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeContext = TypeContext;

apexParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, apexParser.RULE_type);
    try {
        this.state = 588;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 572;
            this.classOrInterfaceType();
            this.state = 577;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 573;
                    this.match(apexParser.LBRACK);
                    this.state = 574;
                    this.match(apexParser.RBRACK); 
                }
                this.state = 579;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
            }

            break;
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 580;
            this.primitiveType();
            this.state = 585;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 581;
                    this.match(apexParser.LBRACK);
                    this.state = 582;
                    this.match(apexParser.RBRACK); 
                }
                this.state = 587;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classOrInterfaceType;
    return this;
}

ClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceTypeContext.prototype.constructor = ClassOrInterfaceTypeContext;

ClassOrInterfaceTypeContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


ClassOrInterfaceTypeContext.prototype.typeArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsContext,i);
    }
};

ClassOrInterfaceTypeContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

ClassOrInterfaceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassOrInterfaceType(this);
	}
};

ClassOrInterfaceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassOrInterfaceType(this);
	}
};

ClassOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext;

apexParser.prototype.classOrInterfaceType = function() {

    var localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, apexParser.RULE_classOrInterfaceType);
    try {
        this.state = 606;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 590;
            this.match(apexParser.Identifier);
            this.state = 592;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
            if(la_===1) {
                this.state = 591;
                this.typeArguments();

            }
            this.state = 601;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 594;
                    this.match(apexParser.DOT);
                    this.state = 595;
                    this.match(apexParser.Identifier);
                    this.state = 597;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
                    if(la_===1) {
                        this.state = 596;
                        this.typeArguments();

                    } 
                }
                this.state = 603;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
            }

            break;
        case apexParser.SET:
            this.enterOuterAlt(localctx, 2);
            this.state = 604;
            this.match(apexParser.SET);
            this.state = 605;
            this.typeArguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimitiveTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_primitiveType;
    return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;

PrimitiveTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(apexParser.BOOLEAN, 0);
};

PrimitiveTypeContext.prototype.CHAR = function() {
    return this.getToken(apexParser.CHAR, 0);
};

PrimitiveTypeContext.prototype.BYTE = function() {
    return this.getToken(apexParser.BYTE, 0);
};

PrimitiveTypeContext.prototype.SHORT = function() {
    return this.getToken(apexParser.SHORT, 0);
};

PrimitiveTypeContext.prototype.INT = function() {
    return this.getToken(apexParser.INT, 0);
};

PrimitiveTypeContext.prototype.LONG = function() {
    return this.getToken(apexParser.LONG, 0);
};

PrimitiveTypeContext.prototype.FLOAT = function() {
    return this.getToken(apexParser.FLOAT, 0);
};

PrimitiveTypeContext.prototype.DOUBLE = function() {
    return this.getToken(apexParser.DOUBLE, 0);
};

PrimitiveTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPrimitiveType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PrimitiveTypeContext = PrimitiveTypeContext;

apexParser.prototype.primitiveType = function() {

    var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, apexParser.RULE_primitiveType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 608;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || _la===apexParser.LONG || _la===apexParser.SHORT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.typeArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentContext,i);
    }
};

TypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeArgumentsContext = TypeArgumentsContext;

apexParser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, apexParser.RULE_typeArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this.match(apexParser.LT);
        this.state = 611;
        this.typeArgument();
        this.state = 616;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 612;
            this.match(apexParser.COMMA);
            this.state = 613;
            this.typeArgument();
            this.state = 618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 619;
        this.match(apexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeArgument;
    return this;
}

TypeArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentContext.prototype.constructor = TypeArgumentContext;

TypeArgumentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeArgumentContext.prototype.EXTENDS = function() {
    return this.getToken(apexParser.EXTENDS, 0);
};

TypeArgumentContext.prototype.SUPER = function() {
    return this.getToken(apexParser.SUPER, 0);
};

TypeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeArgument(this);
	}
};

TypeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeArgument(this);
	}
};

TypeArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeArgumentContext = TypeArgumentContext;

apexParser.prototype.typeArgument = function() {

    var localctx = new TypeArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, apexParser.RULE_typeArgument);
    var _la = 0; // Token type
    try {
        this.state = 627;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 621;
            this.type();
            break;
        case apexParser.QUESTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 622;
            this.match(apexParser.QUESTION);
            this.state = 625;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.EXTENDS || _la===apexParser.SUPER) {
                this.state = 623;
                _la = this._input.LA(1);
                if(!(_la===apexParser.EXTENDS || _la===apexParser.SUPER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 624;
                this.type();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_qualifiedNameList;
    return this;
}

QualifiedNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameListContext.prototype.constructor = QualifiedNameListContext;

QualifiedNameListContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

QualifiedNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterQualifiedNameList(this);
	}
};

QualifiedNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitQualifiedNameList(this);
	}
};

QualifiedNameListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitQualifiedNameList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.QualifiedNameListContext = QualifiedNameListContext;

apexParser.prototype.qualifiedNameList = function() {

    var localctx = new QualifiedNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, apexParser.RULE_qualifiedNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 629;
        this.qualifiedName();
        this.state = 634;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 630;
            this.match(apexParser.COMMA);
            this.state = 631;
            this.qualifiedName();
            this.state = 636;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFormalParameters(this);
	}
};

FormalParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFormalParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FormalParametersContext = FormalParametersContext;

apexParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, apexParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 637;
        this.match(apexParser.LPAREN);
        this.state = 639;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || _la===apexParser.LONG || _la===apexParser.SHORT || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 638;
            this.formalParameterList();
        }

        this.state = 641;
        this.match(apexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.lastFormalParameter = function() {
    return this.getTypedRuleContext(LastFormalParameterContext,0);
};

FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFormalParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FormalParameterListContext = FormalParameterListContext;

apexParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, apexParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.state = 656;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 643;
            this.formalParameter();
            this.state = 648;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 644;
                    this.match(apexParser.COMMA);
                    this.state = 645;
                    this.formalParameter(); 
                }
                this.state = 650;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
            }

            this.state = 653;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.COMMA) {
                this.state = 651;
                this.match(apexParser.COMMA);
                this.state = 652;
                this.lastFormalParameter();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 655;
            this.lastFormalParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

FormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFormalParameter(this);
	}
};

FormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FormalParameterContext = FormalParameterContext;

apexParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, apexParser.RULE_formalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 658;
            this.variableModifier();
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 664;
        this.type();
        this.state = 665;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LastFormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_lastFormalParameter;
    return this;
}

LastFormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterContext.prototype.constructor = LastFormalParameterContext;

LastFormalParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LastFormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

LastFormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LastFormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLastFormalParameter(this);
	}
};

LastFormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLastFormalParameter(this);
	}
};

LastFormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLastFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LastFormalParameterContext = LastFormalParameterContext;

apexParser.prototype.lastFormalParameter = function() {

    var localctx = new LastFormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, apexParser.RULE_lastFormalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 667;
            this.variableModifier();
            this.state = 672;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 673;
        this.type();
        this.state = 674;
        this.match(apexParser.ELLIPSIS);
        this.state = 675;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_methodBody;
    return this;
}

MethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodBodyContext.prototype.constructor = MethodBodyContext;

MethodBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

MethodBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMethodBody(this);
	}
};

MethodBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMethodBody(this);
	}
};

MethodBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMethodBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MethodBodyContext = MethodBodyContext;

apexParser.prototype.methodBody = function() {

    var localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, apexParser.RULE_methodBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constructorBody;
    return this;
}

ConstructorBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorBodyContext.prototype.constructor = ConstructorBodyContext;

ConstructorBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ConstructorBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstructorBody(this);
	}
};

ConstructorBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstructorBody(this);
	}
};

ConstructorBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstructorBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstructorBodyContext = ConstructorBodyContext;

apexParser.prototype.constructorBody = function() {

    var localctx = new ConstructorBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, apexParser.RULE_constructorBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 679;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitQualifiedName(this);
	}
};

QualifiedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitQualifiedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.QualifiedNameContext = QualifiedNameContext;

apexParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, apexParser.RULE_qualifiedName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this.match(apexParser.Identifier);
        this.state = 686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.DOT) {
            this.state = 682;
            this.match(apexParser.DOT);
            this.state = 683;
            this.match(apexParser.Identifier);
            this.state = 688;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.IntegerLiteral = function() {
    return this.getToken(apexParser.IntegerLiteral, 0);
};

LiteralContext.prototype.FloatingPointLiteral = function() {
    return this.getToken(apexParser.FloatingPointLiteral, 0);
};

LiteralContext.prototype.CharacterLiteral = function() {
    return this.getToken(apexParser.CharacterLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(apexParser.StringLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(apexParser.BooleanLiteral, 0);
};

LiteralContext.prototype.NullLiteral = function() {
    return this.getToken(apexParser.NullLiteral, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LiteralContext = LiteralContext;

apexParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, apexParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        _la = this._input.LA(1);
        if(!(((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.IntegerLiteral - 64)) | (1 << (apexParser.FloatingPointLiteral - 64)) | (1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.annotationName = function() {
    return this.getTypedRuleContext(AnnotationNameContext,0);
};

AnnotationContext.prototype.elementValuePairs = function() {
    return this.getTypedRuleContext(ElementValuePairsContext,0);
};

AnnotationContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotation(this);
	}
};

AnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationContext = AnnotationContext;

apexParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, apexParser.RULE_annotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 691;
        this.match(apexParser.AT);
        this.state = 692;
        this.annotationName();
        this.state = 699;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LPAREN) {
            this.state = 693;
            this.match(apexParser.LPAREN);
            this.state = 696;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
            if(la_===1) {
                this.state = 694;
                this.elementValuePairs();

            } else if(la_===2) {
                this.state = 695;
                this.elementValue();

            }
            this.state = 698;
            this.match(apexParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotationName;
    return this;
}

AnnotationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationNameContext.prototype.constructor = AnnotationNameContext;

AnnotationNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AnnotationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotationName(this);
	}
};

AnnotationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotationName(this);
	}
};

AnnotationNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotationName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationNameContext = AnnotationNameContext;

apexParser.prototype.annotationName = function() {

    var localctx = new AnnotationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, apexParser.RULE_annotationName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 701;
        this.qualifiedName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValuePairs;
    return this;
}

ElementValuePairsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairsContext.prototype.constructor = ElementValuePairsContext;

ElementValuePairsContext.prototype.elementValuePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValuePairContext);
    } else {
        return this.getTypedRuleContext(ElementValuePairContext,i);
    }
};

ElementValuePairsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValuePairs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValuePairsContext = ElementValuePairsContext;

apexParser.prototype.elementValuePairs = function() {

    var localctx = new ElementValuePairsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, apexParser.RULE_elementValuePairs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this.elementValuePair();
        this.state = 708;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 704;
            this.match(apexParser.COMMA);
            this.state = 705;
            this.elementValuePair();
            this.state = 710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValuePair;
    return this;
}

ElementValuePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairContext.prototype.constructor = ElementValuePairContext;

ElementValuePairContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ElementValuePairContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

ElementValuePairContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValuePair(this);
	}
};

ElementValuePairContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValuePair(this);
	}
};

ElementValuePairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValuePair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValuePairContext = ElementValuePairContext;

apexParser.prototype.elementValuePair = function() {

    var localctx = new ElementValuePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, apexParser.RULE_elementValuePair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 711;
        this.match(apexParser.Identifier);
        this.state = 712;
        this.match(apexParser.ASSIGN);
        this.state = 713;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValue;
    return this;
}

ElementValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueContext.prototype.constructor = ElementValueContext;

ElementValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementValueContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ElementValueContext.prototype.elementValueArrayInitializer = function() {
    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
};

ElementValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValue(this);
	}
};

ElementValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValue(this);
	}
};

ElementValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValueContext = ElementValueContext;

apexParser.prototype.elementValue = function() {

    var localctx = new ElementValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, apexParser.RULE_elementValue);
    try {
        this.state = 718;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SoqlLiteral:
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.NEW:
        case apexParser.SHORT:
        case apexParser.SUPER:
        case apexParser.THIS:
        case apexParser.VOID:
        case apexParser.IntegerLiteral:
        case apexParser.FloatingPointLiteral:
        case apexParser.BooleanLiteral:
        case apexParser.CharacterLiteral:
        case apexParser.StringLiteral:
        case apexParser.NullLiteral:
        case apexParser.LPAREN:
        case apexParser.LT:
        case apexParser.BANG:
        case apexParser.TILDE:
        case apexParser.INC:
        case apexParser.DEC:
        case apexParser.ADD:
        case apexParser.SUB:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 715;
            this.expression(0);
            break;
        case apexParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 716;
            this.annotation();
            break;
        case apexParser.LBRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 717;
            this.elementValueArrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValueArrayInitializer;
    return this;
}

ElementValueArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueArrayInitializerContext.prototype.constructor = ElementValueArrayInitializerContext;

ElementValueArrayInitializerContext.prototype.elementValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValueContext);
    } else {
        return this.getTypedRuleContext(ElementValueContext,i);
    }
};

ElementValueArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValueArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;

apexParser.prototype.elementValueArrayInitializer = function() {

    var localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, apexParser.RULE_elementValueArrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 720;
        this.match(apexParser.LBRACE);
        this.state = 729;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)) | (1 << (apexParser.IntegerLiteral - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (apexParser.FloatingPointLiteral - 65)) | (1 << (apexParser.BooleanLiteral - 65)) | (1 << (apexParser.CharacterLiteral - 65)) | (1 << (apexParser.StringLiteral - 65)) | (1 << (apexParser.NullLiteral - 65)) | (1 << (apexParser.LPAREN - 65)) | (1 << (apexParser.LBRACE - 65)) | (1 << (apexParser.LT - 65)) | (1 << (apexParser.BANG - 65)) | (1 << (apexParser.TILDE - 65)) | (1 << (apexParser.INC - 65)) | (1 << (apexParser.DEC - 65)) | (1 << (apexParser.ADD - 65)) | (1 << (apexParser.SUB - 65)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 721;
            this.elementValue();
            this.state = 726;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 722;
                    this.match(apexParser.COMMA);
                    this.state = 723;
                    this.elementValue(); 
                }
                this.state = 728;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
            }

        }

        this.state = 732;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.COMMA) {
            this.state = 731;
            this.match(apexParser.COMMA);
        }

        this.state = 734;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotationTypeDeclaration;
    return this;
}

AnnotationTypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeDeclarationContext.prototype.constructor = AnnotationTypeDeclarationContext;

AnnotationTypeDeclarationContext.prototype.INTERFACE = function() {
    return this.getToken(apexParser.INTERFACE, 0);
};

AnnotationTypeDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

AnnotationTypeDeclarationContext.prototype.annotationTypeBody = function() {
    return this.getTypedRuleContext(AnnotationTypeBodyContext,0);
};

AnnotationTypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotationTypeDeclaration(this);
	}
};

AnnotationTypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotationTypeDeclaration(this);
	}
};

AnnotationTypeDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotationTypeDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext;

apexParser.prototype.annotationTypeDeclaration = function() {

    var localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, apexParser.RULE_annotationTypeDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 736;
        this.match(apexParser.AT);
        this.state = 737;
        this.match(apexParser.INTERFACE);
        this.state = 738;
        this.match(apexParser.Identifier);
        this.state = 739;
        this.annotationTypeBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotationTypeBody;
    return this;
}

AnnotationTypeBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeBodyContext.prototype.constructor = AnnotationTypeBodyContext;

AnnotationTypeBodyContext.prototype.annotationTypeElementDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationTypeElementDeclarationContext);
    } else {
        return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,i);
    }
};

AnnotationTypeBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotationTypeBody(this);
	}
};

AnnotationTypeBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotationTypeBody(this);
	}
};

AnnotationTypeBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotationTypeBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationTypeBodyContext = AnnotationTypeBodyContext;

apexParser.prototype.annotationTypeBody = function() {

    var localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, apexParser.RULE_annotationTypeBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 741;
        this.match(apexParser.LBRACE);
        this.state = 745;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.INTERFACE - 32)) | (1 << (apexParser.LONG - 32)) | (1 << (apexParser.NATIVE - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.SYNCHRONIZED - 32)) | (1 << (apexParser.TRANSIENT - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.TESTMETHOD - 32)))) !== 0) || _la===apexParser.SEMI || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 742;
            this.annotationTypeElementDeclaration();
            this.state = 747;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 748;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeElementDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotationTypeElementDeclaration;
    return this;
}

AnnotationTypeElementDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeElementDeclarationContext.prototype.constructor = AnnotationTypeElementDeclarationContext;

AnnotationTypeElementDeclarationContext.prototype.annotationTypeElementRest = function() {
    return this.getTypedRuleContext(AnnotationTypeElementRestContext,0);
};

AnnotationTypeElementDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

AnnotationTypeElementDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotationTypeElementDeclaration(this);
	}
};

AnnotationTypeElementDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotationTypeElementDeclaration(this);
	}
};

AnnotationTypeElementDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotationTypeElementDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext;

apexParser.prototype.annotationTypeElementDeclaration = function() {

    var localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, apexParser.RULE_annotationTypeElementDeclaration);
    try {
        this.state = 758;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.OVERRIDE:
        case apexParser.VIRTUAL:
        case apexParser.SET:
        case apexParser.ABSTRACT:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.CLASS:
        case apexParser.DOUBLE:
        case apexParser.ENUM:
        case apexParser.FINAL:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.INTERFACE:
        case apexParser.LONG:
        case apexParser.NATIVE:
        case apexParser.PRIVATE:
        case apexParser.PROTECTED:
        case apexParser.PUBLIC:
        case apexParser.SHORT:
        case apexParser.STATIC:
        case apexParser.SYNCHRONIZED:
        case apexParser.TRANSIENT:
        case apexParser.GLOBAL:
        case apexParser.WEBSERVICE:
        case apexParser.APEX_WITH_SHARING:
        case apexParser.APEX_WITHOUT_SHARING:
        case apexParser.TESTMETHOD:
        case apexParser.Identifier:
        case apexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 753;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 750;
                    this.modifier(); 
                }
                this.state = 755;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
            }

            this.state = 756;
            this.annotationTypeElementRest();
            break;
        case apexParser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 757;
            this.match(apexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeElementRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotationTypeElementRest;
    return this;
}

AnnotationTypeElementRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeElementRestContext.prototype.constructor = AnnotationTypeElementRestContext;

AnnotationTypeElementRestContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

AnnotationTypeElementRestContext.prototype.annotationMethodOrConstantRest = function() {
    return this.getTypedRuleContext(AnnotationMethodOrConstantRestContext,0);
};

AnnotationTypeElementRestContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotationTypeElementRest(this);
	}
};

AnnotationTypeElementRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotationTypeElementRest(this);
	}
};

AnnotationTypeElementRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotationTypeElementRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationTypeElementRestContext = AnnotationTypeElementRestContext;

apexParser.prototype.annotationTypeElementRest = function() {

    var localctx = new AnnotationTypeElementRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, apexParser.RULE_annotationTypeElementRest);
    try {
        this.state = 780;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 760;
            this.type();
            this.state = 761;
            this.annotationMethodOrConstantRest();
            this.state = 762;
            this.match(apexParser.SEMI);
            break;
        case apexParser.CLASS:
            this.enterOuterAlt(localctx, 2);
            this.state = 764;
            this.classDeclaration();
            this.state = 766;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
            if(la_===1) {
                this.state = 765;
                this.match(apexParser.SEMI);

            }
            break;
        case apexParser.INTERFACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 768;
            this.interfaceDeclaration();
            this.state = 770;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
            if(la_===1) {
                this.state = 769;
                this.match(apexParser.SEMI);

            }
            break;
        case apexParser.ENUM:
            this.enterOuterAlt(localctx, 4);
            this.state = 772;
            this.enumDeclaration();
            this.state = 774;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
            if(la_===1) {
                this.state = 773;
                this.match(apexParser.SEMI);

            }
            break;
        case apexParser.AT:
            this.enterOuterAlt(localctx, 5);
            this.state = 776;
            this.annotationTypeDeclaration();
            this.state = 778;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
            if(la_===1) {
                this.state = 777;
                this.match(apexParser.SEMI);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationMethodOrConstantRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotationMethodOrConstantRest;
    return this;
}

AnnotationMethodOrConstantRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationMethodOrConstantRestContext.prototype.constructor = AnnotationMethodOrConstantRestContext;

AnnotationMethodOrConstantRestContext.prototype.annotationMethodRest = function() {
    return this.getTypedRuleContext(AnnotationMethodRestContext,0);
};

AnnotationMethodOrConstantRestContext.prototype.annotationConstantRest = function() {
    return this.getTypedRuleContext(AnnotationConstantRestContext,0);
};

AnnotationMethodOrConstantRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotationMethodOrConstantRest(this);
	}
};

AnnotationMethodOrConstantRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotationMethodOrConstantRest(this);
	}
};

AnnotationMethodOrConstantRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotationMethodOrConstantRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationMethodOrConstantRestContext = AnnotationMethodOrConstantRestContext;

apexParser.prototype.annotationMethodOrConstantRest = function() {

    var localctx = new AnnotationMethodOrConstantRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, apexParser.RULE_annotationMethodOrConstantRest);
    try {
        this.state = 784;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 782;
            this.annotationMethodRest();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 783;
            this.annotationConstantRest();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationMethodRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotationMethodRest;
    return this;
}

AnnotationMethodRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationMethodRestContext.prototype.constructor = AnnotationMethodRestContext;

AnnotationMethodRestContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

AnnotationMethodRestContext.prototype.defaultValue = function() {
    return this.getTypedRuleContext(DefaultValueContext,0);
};

AnnotationMethodRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotationMethodRest(this);
	}
};

AnnotationMethodRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotationMethodRest(this);
	}
};

AnnotationMethodRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotationMethodRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationMethodRestContext = AnnotationMethodRestContext;

apexParser.prototype.annotationMethodRest = function() {

    var localctx = new AnnotationMethodRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, apexParser.RULE_annotationMethodRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 786;
        this.match(apexParser.Identifier);
        this.state = 787;
        this.match(apexParser.LPAREN);
        this.state = 788;
        this.match(apexParser.RPAREN);
        this.state = 790;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.DEFAULT) {
            this.state = 789;
            this.defaultValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationConstantRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotationConstantRest;
    return this;
}

AnnotationConstantRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationConstantRestContext.prototype.constructor = AnnotationConstantRestContext;

AnnotationConstantRestContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

AnnotationConstantRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotationConstantRest(this);
	}
};

AnnotationConstantRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotationConstantRest(this);
	}
};

AnnotationConstantRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotationConstantRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationConstantRestContext = AnnotationConstantRestContext;

apexParser.prototype.annotationConstantRest = function() {

    var localctx = new AnnotationConstantRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, apexParser.RULE_annotationConstantRest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 792;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_defaultValue;
    return this;
}

DefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultValueContext.prototype.constructor = DefaultValueContext;

DefaultValueContext.prototype.DEFAULT = function() {
    return this.getToken(apexParser.DEFAULT, 0);
};

DefaultValueContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

DefaultValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterDefaultValue(this);
	}
};

DefaultValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitDefaultValue(this);
	}
};

DefaultValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitDefaultValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.DefaultValueContext = DefaultValueContext;

apexParser.prototype.defaultValue = function() {

    var localctx = new DefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, apexParser.RULE_defaultValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.match(apexParser.DEFAULT);
        this.state = 795;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.BlockContext = BlockContext;

apexParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, apexParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 797;
        this.match(apexParser.LBRACE);
        this.state = 801;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.DATABASE) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BREAK) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.CONTINUE) | (1 << apexParser.DO) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.FOR) | (1 << apexParser.IF) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.INTERFACE - 32)) | (1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.RETURN - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.THROW - 32)) | (1 << (apexParser.TRY - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.WHILE - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.DB_INSERT - 32)) | (1 << (apexParser.DB_UPSERT - 32)) | (1 << (apexParser.DB_UPDATE - 32)) | (1 << (apexParser.DB_DELETE - 32)) | (1 << (apexParser.DB_UNDELETE - 32)) | (1 << (apexParser.TESTMETHOD - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.IntegerLiteral - 64)) | (1 << (apexParser.FloatingPointLiteral - 64)) | (1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.CharacterLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LBRACE - 64)) | (1 << (apexParser.SEMI - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)) | (1 << (apexParser.DEC - 64)) | (1 << (apexParser.ADD - 64)) | (1 << (apexParser.SUB - 64)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 798;
            this.blockStatement();
            this.state = 803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 804;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.localVariableDeclarationStatement = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
};

BlockStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BlockStatementContext.prototype.typeDeclaration = function() {
    return this.getTypedRuleContext(TypeDeclarationContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitBlockStatement(this);
	}
};

BlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.BlockStatementContext = BlockStatementContext;

apexParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, apexParser.RULE_blockStatement);
    try {
        this.state = 809;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 806;
            this.localVariableDeclarationStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 807;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 808;
            this.typeDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_localVariableDeclarationStatement;
    return this;
}

LocalVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationStatementContext.prototype.constructor = LocalVariableDeclarationStatementContext;

LocalVariableDeclarationStatementContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

LocalVariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLocalVariableDeclarationStatement(this);
	}
};

LocalVariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLocalVariableDeclarationStatement(this);
	}
};

LocalVariableDeclarationStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLocalVariableDeclarationStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;

apexParser.prototype.localVariableDeclarationStatement = function() {

    var localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, apexParser.RULE_localVariableDeclarationStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 811;
        this.localVariableDeclaration();
        this.state = 812;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_localVariableDeclaration;
    return this;
}

LocalVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationContext.prototype.constructor = LocalVariableDeclarationContext;

LocalVariableDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LocalVariableDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

LocalVariableDeclarationContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LocalVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLocalVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;

apexParser.prototype.localVariableDeclaration = function() {

    var localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, apexParser.RULE_localVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 817;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 814;
            this.variableModifier();
            this.state = 819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 820;
        this.type();
        this.state = 821;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.IF = function() {
    return this.getToken(apexParser.IF, 0);
};

StatementContext.prototype.parExpression = function() {
    return this.getTypedRuleContext(ParExpressionContext,0);
};

StatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementContext.prototype.ELSE = function() {
    return this.getToken(apexParser.ELSE, 0);
};

StatementContext.prototype.FOR = function() {
    return this.getToken(apexParser.FOR, 0);
};

StatementContext.prototype.forControl = function() {
    return this.getTypedRuleContext(ForControlContext,0);
};

StatementContext.prototype.WHILE = function() {
    return this.getToken(apexParser.WHILE, 0);
};

StatementContext.prototype.DO = function() {
    return this.getToken(apexParser.DO, 0);
};

StatementContext.prototype.TRY = function() {
    return this.getToken(apexParser.TRY, 0);
};

StatementContext.prototype.finallyBlock = function() {
    return this.getTypedRuleContext(FinallyBlockContext,0);
};

StatementContext.prototype.catchClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext,i);
    }
};

StatementContext.prototype.resourceSpecification = function() {
    return this.getTypedRuleContext(ResourceSpecificationContext,0);
};

StatementContext.prototype.RETURN = function() {
    return this.getToken(apexParser.RETURN, 0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.THROW = function() {
    return this.getToken(apexParser.THROW, 0);
};

StatementContext.prototype.BREAK = function() {
    return this.getToken(apexParser.BREAK, 0);
};

StatementContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

StatementContext.prototype.CONTINUE = function() {
    return this.getToken(apexParser.CONTINUE, 0);
};

StatementContext.prototype.statementExpression = function() {
    return this.getTypedRuleContext(StatementExpressionContext,0);
};

StatementContext.prototype.apexDbExpression = function() {
    return this.getTypedRuleContext(ApexDbExpressionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.StatementContext = StatementContext;

apexParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, apexParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 901;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 823;
            this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 824;
            this.match(apexParser.IF);
            this.state = 825;
            this.parExpression();
            this.state = 826;
            this.statement();
            this.state = 829;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
            if(la_===1) {
                this.state = 827;
                this.match(apexParser.ELSE);
                this.state = 828;
                this.statement();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 831;
            this.match(apexParser.FOR);
            this.state = 832;
            this.match(apexParser.LPAREN);
            this.state = 833;
            this.forControl();
            this.state = 834;
            this.match(apexParser.RPAREN);
            this.state = 835;
            this.statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 837;
            this.match(apexParser.WHILE);
            this.state = 838;
            this.parExpression();
            this.state = 839;
            this.statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 841;
            this.match(apexParser.DO);
            this.state = 842;
            this.statement();
            this.state = 843;
            this.match(apexParser.WHILE);
            this.state = 844;
            this.parExpression();
            this.state = 845;
            this.match(apexParser.SEMI);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 847;
            this.match(apexParser.TRY);
            this.state = 848;
            this.block();
            this.state = 858;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case apexParser.CATCH:
                this.state = 850; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 849;
                    this.catchClause();
                    this.state = 852; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===apexParser.CATCH);
                this.state = 855;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===apexParser.FINALLY) {
                    this.state = 854;
                    this.finallyBlock();
                }

                break;
            case apexParser.FINALLY:
                this.state = 857;
                this.finallyBlock();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 860;
            this.match(apexParser.TRY);
            this.state = 861;
            this.resourceSpecification();
            this.state = 862;
            this.block();
            this.state = 866;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===apexParser.CATCH) {
                this.state = 863;
                this.catchClause();
                this.state = 868;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 870;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.FINALLY) {
                this.state = 869;
                this.finallyBlock();
            }

            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 872;
            this.match(apexParser.RETURN);
            this.state = 874;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)) | (1 << (apexParser.IntegerLiteral - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (apexParser.FloatingPointLiteral - 65)) | (1 << (apexParser.BooleanLiteral - 65)) | (1 << (apexParser.CharacterLiteral - 65)) | (1 << (apexParser.StringLiteral - 65)) | (1 << (apexParser.NullLiteral - 65)) | (1 << (apexParser.LPAREN - 65)) | (1 << (apexParser.LT - 65)) | (1 << (apexParser.BANG - 65)) | (1 << (apexParser.TILDE - 65)) | (1 << (apexParser.INC - 65)) | (1 << (apexParser.DEC - 65)) | (1 << (apexParser.ADD - 65)) | (1 << (apexParser.SUB - 65)))) !== 0) || _la===apexParser.Identifier) {
                this.state = 873;
                this.expression(0);
            }

            this.state = 876;
            this.match(apexParser.SEMI);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 877;
            this.match(apexParser.THROW);
            this.state = 878;
            this.expression(0);
            this.state = 879;
            this.match(apexParser.SEMI);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 881;
            this.match(apexParser.BREAK);
            this.state = 883;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.Identifier) {
                this.state = 882;
                this.match(apexParser.Identifier);
            }

            this.state = 885;
            this.match(apexParser.SEMI);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 886;
            this.match(apexParser.CONTINUE);
            this.state = 888;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.Identifier) {
                this.state = 887;
                this.match(apexParser.Identifier);
            }

            this.state = 890;
            this.match(apexParser.SEMI);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 891;
            this.match(apexParser.SEMI);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 892;
            this.statementExpression();
            this.state = 893;
            this.match(apexParser.SEMI);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 895;
            this.match(apexParser.Identifier);
            this.state = 896;
            this.match(apexParser.COLON);
            this.state = 897;
            this.statement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 898;
            this.apexDbExpression();
            this.state = 899;
            this.match(apexParser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_propertyBlock;
    return this;
}

PropertyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBlockContext.prototype.constructor = PropertyBlockContext;

PropertyBlockContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

PropertyBlockContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

PropertyBlockContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

PropertyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPropertyBlock(this);
	}
};

PropertyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPropertyBlock(this);
	}
};

PropertyBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPropertyBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PropertyBlockContext = PropertyBlockContext;

apexParser.prototype.propertyBlock = function() {

    var localctx = new PropertyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, apexParser.RULE_propertyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 906;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (apexParser.NATIVE - 34)) | (1 << (apexParser.PRIVATE - 34)) | (1 << (apexParser.PROTECTED - 34)) | (1 << (apexParser.PUBLIC - 34)) | (1 << (apexParser.STATIC - 34)) | (1 << (apexParser.SYNCHRONIZED - 34)) | (1 << (apexParser.TRANSIENT - 34)) | (1 << (apexParser.GLOBAL - 34)) | (1 << (apexParser.WEBSERVICE - 34)) | (1 << (apexParser.APEX_WITH_SHARING - 34)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 34)) | (1 << (apexParser.TESTMETHOD - 34)))) !== 0) || _la===apexParser.AT) {
            this.state = 903;
            this.modifier();
            this.state = 908;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 911;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.GET:
            this.state = 909;
            this.getter();
            break;
        case apexParser.SET:
            this.state = 910;
            this.setter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_getter;
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.GET = function() {
    return this.getToken(apexParser.GET, 0);
};

GetterContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

GetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterGetter(this);
	}
};

GetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitGetter(this);
	}
};

GetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitGetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.GetterContext = GetterContext;

apexParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, apexParser.RULE_getter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 913;
        this.match(apexParser.GET);
        this.state = 916;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SEMI:
            this.state = 914;
            this.match(apexParser.SEMI);
            break;
        case apexParser.LBRACE:
            this.state = 915;
            this.methodBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_setter;
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

SetterContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

SetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSetter(this);
	}
};

SetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSetter(this);
	}
};

SetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SetterContext = SetterContext;

apexParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, apexParser.RULE_setter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        this.match(apexParser.SET);
        this.state = 921;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SEMI:
            this.state = 919;
            this.match(apexParser.SEMI);
            break;
        case apexParser.LBRACE:
            this.state = 920;
            this.methodBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_catchClause;
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.CATCH = function() {
    return this.getToken(apexParser.CATCH, 0);
};

CatchClauseContext.prototype.catchType = function() {
    return this.getTypedRuleContext(CatchTypeContext,0);
};

CatchClauseContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

CatchClauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchClauseContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

CatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCatchClause(this);
	}
};

CatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCatchClause(this);
	}
};

CatchClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCatchClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CatchClauseContext = CatchClauseContext;

apexParser.prototype.catchClause = function() {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, apexParser.RULE_catchClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        this.match(apexParser.CATCH);
        this.state = 924;
        this.match(apexParser.LPAREN);
        this.state = 928;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 925;
            this.variableModifier();
            this.state = 930;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 931;
        this.catchType();
        this.state = 932;
        this.match(apexParser.Identifier);
        this.state = 933;
        this.match(apexParser.RPAREN);
        this.state = 934;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_catchType;
    return this;
}

CatchTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchTypeContext.prototype.constructor = CatchTypeContext;

CatchTypeContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

CatchTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCatchType(this);
	}
};

CatchTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCatchType(this);
	}
};

CatchTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCatchType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CatchTypeContext = CatchTypeContext;

apexParser.prototype.catchType = function() {

    var localctx = new CatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, apexParser.RULE_catchType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 936;
        this.qualifiedName();
        this.state = 941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.BITOR) {
            this.state = 937;
            this.match(apexParser.BITOR);
            this.state = 938;
            this.qualifiedName();
            this.state = 943;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_finallyBlock;
    return this;
}

FinallyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyBlockContext.prototype.constructor = FinallyBlockContext;

FinallyBlockContext.prototype.FINALLY = function() {
    return this.getToken(apexParser.FINALLY, 0);
};

FinallyBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFinallyBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FinallyBlockContext = FinallyBlockContext;

apexParser.prototype.finallyBlock = function() {

    var localctx = new FinallyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, apexParser.RULE_finallyBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 944;
        this.match(apexParser.FINALLY);
        this.state = 945;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_resourceSpecification;
    return this;
}

ResourceSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceSpecificationContext.prototype.constructor = ResourceSpecificationContext;

ResourceSpecificationContext.prototype.resources = function() {
    return this.getTypedRuleContext(ResourcesContext,0);
};

ResourceSpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterResourceSpecification(this);
	}
};

ResourceSpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitResourceSpecification(this);
	}
};

ResourceSpecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitResourceSpecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ResourceSpecificationContext = ResourceSpecificationContext;

apexParser.prototype.resourceSpecification = function() {

    var localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, apexParser.RULE_resourceSpecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 947;
        this.match(apexParser.LPAREN);
        this.state = 948;
        this.resources();
        this.state = 950;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.SEMI) {
            this.state = 949;
            this.match(apexParser.SEMI);
        }

        this.state = 952;
        this.match(apexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_resources;
    return this;
}

ResourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourcesContext.prototype.constructor = ResourcesContext;

ResourcesContext.prototype.resource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceContext);
    } else {
        return this.getTypedRuleContext(ResourceContext,i);
    }
};

ResourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterResources(this);
	}
};

ResourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitResources(this);
	}
};

ResourcesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitResources(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ResourcesContext = ResourcesContext;

apexParser.prototype.resources = function() {

    var localctx = new ResourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, apexParser.RULE_resources);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 954;
        this.resource();
        this.state = 959;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,110,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 955;
                this.match(apexParser.SEMI);
                this.state = 956;
                this.resource(); 
            }
            this.state = 961;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,110,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

ResourceContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

ResourceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ResourceContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

ResourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterResource(this);
	}
};

ResourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitResource(this);
	}
};

ResourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitResource(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ResourceContext = ResourceContext;

apexParser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, apexParser.RULE_resource);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 965;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 962;
            this.variableModifier();
            this.state = 967;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 968;
        this.classOrInterfaceType();
        this.state = 969;
        this.variableDeclaratorId();
        this.state = 970;
        this.match(apexParser.ASSIGN);
        this.state = 971;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_forControl;
    return this;
}

ForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForControlContext.prototype.constructor = ForControlContext;

ForControlContext.prototype.enhancedForControl = function() {
    return this.getTypedRuleContext(EnhancedForControlContext,0);
};

ForControlContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

ForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForControlContext.prototype.forUpdate = function() {
    return this.getTypedRuleContext(ForUpdateContext,0);
};

ForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterForControl(this);
	}
};

ForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitForControl(this);
	}
};

ForControlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitForControl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ForControlContext = ForControlContext;

apexParser.prototype.forControl = function() {

    var localctx = new ForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, apexParser.RULE_forControl);
    var _la = 0; // Token type
    try {
        this.state = 985;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 973;
            this.enhancedForControl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)) | (1 << (apexParser.IntegerLiteral - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (apexParser.FloatingPointLiteral - 65)) | (1 << (apexParser.BooleanLiteral - 65)) | (1 << (apexParser.CharacterLiteral - 65)) | (1 << (apexParser.StringLiteral - 65)) | (1 << (apexParser.NullLiteral - 65)) | (1 << (apexParser.LPAREN - 65)) | (1 << (apexParser.LT - 65)) | (1 << (apexParser.BANG - 65)) | (1 << (apexParser.TILDE - 65)) | (1 << (apexParser.INC - 65)) | (1 << (apexParser.DEC - 65)) | (1 << (apexParser.ADD - 65)) | (1 << (apexParser.SUB - 65)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
                this.state = 974;
                this.forInit();
            }

            this.state = 977;
            this.match(apexParser.SEMI);
            this.state = 979;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)) | (1 << (apexParser.IntegerLiteral - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (apexParser.FloatingPointLiteral - 65)) | (1 << (apexParser.BooleanLiteral - 65)) | (1 << (apexParser.CharacterLiteral - 65)) | (1 << (apexParser.StringLiteral - 65)) | (1 << (apexParser.NullLiteral - 65)) | (1 << (apexParser.LPAREN - 65)) | (1 << (apexParser.LT - 65)) | (1 << (apexParser.BANG - 65)) | (1 << (apexParser.TILDE - 65)) | (1 << (apexParser.INC - 65)) | (1 << (apexParser.DEC - 65)) | (1 << (apexParser.ADD - 65)) | (1 << (apexParser.SUB - 65)))) !== 0) || _la===apexParser.Identifier) {
                this.state = 978;
                this.expression(0);
            }

            this.state = 981;
            this.match(apexParser.SEMI);
            this.state = 983;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)) | (1 << (apexParser.IntegerLiteral - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (apexParser.FloatingPointLiteral - 65)) | (1 << (apexParser.BooleanLiteral - 65)) | (1 << (apexParser.CharacterLiteral - 65)) | (1 << (apexParser.StringLiteral - 65)) | (1 << (apexParser.NullLiteral - 65)) | (1 << (apexParser.LPAREN - 65)) | (1 << (apexParser.LT - 65)) | (1 << (apexParser.BANG - 65)) | (1 << (apexParser.TILDE - 65)) | (1 << (apexParser.INC - 65)) | (1 << (apexParser.DEC - 65)) | (1 << (apexParser.ADD - 65)) | (1 << (apexParser.SUB - 65)))) !== 0) || _la===apexParser.Identifier) {
                this.state = 982;
                this.forUpdate();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_forInit;
    return this;
}

ForInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitContext.prototype.constructor = ForInitContext;

ForInitContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

ForInitContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterForInit(this);
	}
};

ForInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitForInit(this);
	}
};

ForInitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitForInit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ForInitContext = ForInitContext;

apexParser.prototype.forInit = function() {

    var localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, apexParser.RULE_forInit);
    try {
        this.state = 989;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 987;
            this.localVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 988;
            this.expressionList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnhancedForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enhancedForControl;
    return this;
}

EnhancedForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForControlContext.prototype.constructor = EnhancedForControlContext;

EnhancedForControlContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

EnhancedForControlContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

EnhancedForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnhancedForControlContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

EnhancedForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnhancedForControl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnhancedForControlContext = EnhancedForControlContext;

apexParser.prototype.enhancedForControl = function() {

    var localctx = new EnhancedForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, apexParser.RULE_enhancedForControl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 994;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 991;
            this.variableModifier();
            this.state = 996;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 997;
        this.type();
        this.state = 998;
        this.variableDeclaratorId();
        this.state = 999;
        this.match(apexParser.COLON);
        this.state = 1000;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_forUpdate;
    return this;
}

ForUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForUpdateContext.prototype.constructor = ForUpdateContext;

ForUpdateContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterForUpdate(this);
	}
};

ForUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitForUpdate(this);
	}
};

ForUpdateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitForUpdate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ForUpdateContext = ForUpdateContext;

apexParser.prototype.forUpdate = function() {

    var localctx = new ForUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, apexParser.RULE_forUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1002;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_parExpression;
    return this;
}

ParExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParExpressionContext.prototype.constructor = ParExpressionContext;

ParExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterParExpression(this);
	}
};

ParExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitParExpression(this);
	}
};

ParExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitParExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ParExpressionContext = ParExpressionContext;

apexParser.prototype.parExpression = function() {

    var localctx = new ParExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, apexParser.RULE_parExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1004;
        this.match(apexParser.LPAREN);
        this.state = 1005;
        this.expression(0);
        this.state = 1006;
        this.match(apexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitExpressionList(this);
	}
};

ExpressionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitExpressionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ExpressionListContext = ExpressionListContext;

apexParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, apexParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1008;
        this.expression(0);
        this.state = 1013;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 1009;
            this.match(apexParser.COMMA);
            this.state = 1010;
            this.expression(0);
            this.state = 1015;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_statementExpression;
    return this;
}

StatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementExpressionContext.prototype.constructor = StatementExpressionContext;

StatementExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterStatementExpression(this);
	}
};

StatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitStatementExpression(this);
	}
};

StatementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitStatementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.StatementExpressionContext = StatementExpressionContext;

apexParser.prototype.statementExpression = function() {

    var localctx = new StatementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, apexParser.RULE_statementExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1016;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constantExpression;
    return this;
}

ConstantExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantExpressionContext.prototype.constructor = ConstantExpressionContext;

ConstantExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstantExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstantExpression(this);
	}
};

ConstantExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstantExpression(this);
	}
};

ConstantExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstantExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstantExpressionContext = ConstantExpressionContext;

apexParser.prototype.constantExpression = function() {

    var localctx = new ConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, apexParser.RULE_constantExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1018;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ApexDbExpressionLongContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_apexDbExpressionLong;
    return this;
}

ApexDbExpressionLongContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApexDbExpressionLongContext.prototype.constructor = ApexDbExpressionLongContext;

ApexDbExpressionLongContext.prototype.DATABASE = function() {
    return this.getToken(apexParser.DATABASE, 0);
};

ApexDbExpressionLongContext.prototype.parExpression = function() {
    return this.getTypedRuleContext(ParExpressionContext,0);
};

ApexDbExpressionLongContext.prototype.DB_INSERT = function() {
    return this.getToken(apexParser.DB_INSERT, 0);
};

ApexDbExpressionLongContext.prototype.DB_UPSERT = function() {
    return this.getToken(apexParser.DB_UPSERT, 0);
};

ApexDbExpressionLongContext.prototype.DB_UPDATE = function() {
    return this.getToken(apexParser.DB_UPDATE, 0);
};

ApexDbExpressionLongContext.prototype.DB_DELETE = function() {
    return this.getToken(apexParser.DB_DELETE, 0);
};

ApexDbExpressionLongContext.prototype.DB_UNDELETE = function() {
    return this.getToken(apexParser.DB_UNDELETE, 0);
};

ApexDbExpressionLongContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterApexDbExpressionLong(this);
	}
};

ApexDbExpressionLongContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitApexDbExpressionLong(this);
	}
};

ApexDbExpressionLongContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitApexDbExpressionLong(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ApexDbExpressionLongContext = ApexDbExpressionLongContext;

apexParser.prototype.apexDbExpressionLong = function() {

    var localctx = new ApexDbExpressionLongContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, apexParser.RULE_apexDbExpressionLong);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1020;
        this.match(apexParser.DATABASE);
        this.state = 1021;
        this.match(apexParser.DOT);
        this.state = 1022;
        _la = this._input.LA(1);
        if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (apexParser.DB_INSERT - 58)) | (1 << (apexParser.DB_UPSERT - 58)) | (1 << (apexParser.DB_UPDATE - 58)) | (1 << (apexParser.DB_DELETE - 58)) | (1 << (apexParser.DB_UNDELETE - 58)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1023;
        this.parExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ApexDbExpressionShortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_apexDbExpressionShort;
    return this;
}

ApexDbExpressionShortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApexDbExpressionShortContext.prototype.constructor = ApexDbExpressionShortContext;

ApexDbExpressionShortContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ApexDbExpressionShortContext.prototype.DB_INSERT = function() {
    return this.getToken(apexParser.DB_INSERT, 0);
};

ApexDbExpressionShortContext.prototype.DB_UPSERT = function() {
    return this.getToken(apexParser.DB_UPSERT, 0);
};

ApexDbExpressionShortContext.prototype.DB_UPDATE = function() {
    return this.getToken(apexParser.DB_UPDATE, 0);
};

ApexDbExpressionShortContext.prototype.DB_DELETE = function() {
    return this.getToken(apexParser.DB_DELETE, 0);
};

ApexDbExpressionShortContext.prototype.DB_UNDELETE = function() {
    return this.getToken(apexParser.DB_UNDELETE, 0);
};

ApexDbExpressionShortContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterApexDbExpressionShort(this);
	}
};

ApexDbExpressionShortContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitApexDbExpressionShort(this);
	}
};

ApexDbExpressionShortContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitApexDbExpressionShort(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ApexDbExpressionShortContext = ApexDbExpressionShortContext;

apexParser.prototype.apexDbExpressionShort = function() {

    var localctx = new ApexDbExpressionShortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, apexParser.RULE_apexDbExpressionShort);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1025;
        _la = this._input.LA(1);
        if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (apexParser.DB_INSERT - 58)) | (1 << (apexParser.DB_UPSERT - 58)) | (1 << (apexParser.DB_UPDATE - 58)) | (1 << (apexParser.DB_DELETE - 58)) | (1 << (apexParser.DB_UNDELETE - 58)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1026;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ApexDbExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_apexDbExpression;
    return this;
}

ApexDbExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApexDbExpressionContext.prototype.constructor = ApexDbExpressionContext;

ApexDbExpressionContext.prototype.apexDbExpressionLong = function() {
    return this.getTypedRuleContext(ApexDbExpressionLongContext,0);
};

ApexDbExpressionContext.prototype.apexDbExpressionShort = function() {
    return this.getTypedRuleContext(ApexDbExpressionShortContext,0);
};

ApexDbExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterApexDbExpression(this);
	}
};

ApexDbExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitApexDbExpression(this);
	}
};

ApexDbExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitApexDbExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ApexDbExpressionContext = ApexDbExpressionContext;

apexParser.prototype.apexDbExpression = function() {

    var localctx = new ApexDbExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, apexParser.RULE_apexDbExpression);
    try {
        this.state = 1030;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.DATABASE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1028;
            this.apexDbExpressionLong();
            break;
        case apexParser.DB_INSERT:
        case apexParser.DB_UPSERT:
        case apexParser.DB_UPDATE:
        case apexParser.DB_DELETE:
        case apexParser.DB_UNDELETE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1029;
            this.apexDbExpressionShort();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

ExpressionContext.prototype.NEW = function() {
    return this.getToken(apexParser.NEW, 0);
};

ExpressionContext.prototype.creator = function() {
    return this.getTypedRuleContext(CreatorContext,0);
};

ExpressionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.GET = function() {
    return this.getToken(apexParser.GET, 0);
};

ExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ExpressionContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

ExpressionContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ExpressionContext.prototype.THIS = function() {
    return this.getToken(apexParser.THIS, 0);
};

ExpressionContext.prototype.innerCreator = function() {
    return this.getTypedRuleContext(InnerCreatorContext,0);
};

ExpressionContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

ExpressionContext.prototype.SUPER = function() {
    return this.getToken(apexParser.SUPER, 0);
};

ExpressionContext.prototype.superSuffix = function() {
    return this.getTypedRuleContext(SuperSuffixContext,0);
};

ExpressionContext.prototype.explicitGenericInvocation = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationContext,0);
};

ExpressionContext.prototype.INSTANCEOF = function() {
    return this.getToken(apexParser.INSTANCEOF, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



apexParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 182;
    this.enterRecursionRule(localctx, 182, apexParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1045;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1033;
            this.primary();
            break;

        case 2:
            this.state = 1034;
            this.match(apexParser.NEW);
            this.state = 1035;
            this.creator();
            break;

        case 3:
            this.state = 1036;
            this.match(apexParser.LPAREN);
            this.state = 1037;
            this.type();
            this.state = 1038;
            this.match(apexParser.RPAREN);
            this.state = 1039;
            this.expression(17);
            break;

        case 4:
            this.state = 1041;
            _la = this._input.LA(1);
            if(!(((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (apexParser.INC - 92)) | (1 << (apexParser.DEC - 92)) | (1 << (apexParser.ADD - 92)) | (1 << (apexParser.SUB - 92)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1042;
            this.expression(15);
            break;

        case 5:
            this.state = 1043;
            _la = this._input.LA(1);
            if(!(_la===apexParser.BANG || _la===apexParser.TILDE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1044;
            this.expression(14);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1148;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,127,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1146;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1047;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1048;
                    _la = this._input.LA(1);
                    if(!(((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (apexParser.MUL - 96)) | (1 << (apexParser.DIV - 96)) | (1 << (apexParser.MOD - 96)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1049;
                    this.expression(14);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1050;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1051;
                    _la = this._input.LA(1);
                    if(!(_la===apexParser.ADD || _la===apexParser.SUB)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1052;
                    this.expression(13);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1053;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1061;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1054;
                        this.match(apexParser.LT);
                        this.state = 1055;
                        this.match(apexParser.LT);
                        break;

                    case 2:
                        this.state = 1056;
                        this.match(apexParser.GT);
                        this.state = 1057;
                        this.match(apexParser.GT);
                        this.state = 1058;
                        this.match(apexParser.GT);
                        break;

                    case 3:
                        this.state = 1059;
                        this.match(apexParser.GT);
                        this.state = 1060;
                        this.match(apexParser.GT);
                        break;

                    }
                    this.state = 1063;
                    this.expression(12);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1064;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1065;
                    _la = this._input.LA(1);
                    if(!(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (apexParser.GT - 80)) | (1 << (apexParser.LT - 80)) | (1 << (apexParser.LE - 80)) | (1 << (apexParser.GE - 80)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1066;
                    this.expression(11);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1067;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1068;
                    _la = this._input.LA(1);
                    if(!(_la===apexParser.EQUAL || _la===apexParser.NOTEQUAL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1069;
                    this.expression(9);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1070;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1071;
                    this.match(apexParser.BITAND);
                    this.state = 1072;
                    this.expression(8);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1073;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1074;
                    this.match(apexParser.CARET);
                    this.state = 1075;
                    this.expression(7);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1076;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1077;
                    this.match(apexParser.BITOR);
                    this.state = 1078;
                    this.expression(6);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1079;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1080;
                    this.match(apexParser.AND);
                    this.state = 1081;
                    this.expression(5);
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1082;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1083;
                    this.match(apexParser.OR);
                    this.state = 1084;
                    this.expression(4);
                    break;

                case 11:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1085;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1086;
                    this.match(apexParser.QUESTION);
                    this.state = 1087;
                    this.expression(0);
                    this.state = 1088;
                    this.match(apexParser.COLON);
                    this.state = 1089;
                    this.expression(3);
                    break;

                case 12:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1091;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1092;
                    _la = this._input.LA(1);
                    if(!(((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (apexParser.ASSIGN - 79)) | (1 << (apexParser.ADD_ASSIGN - 79)) | (1 << (apexParser.SUB_ASSIGN - 79)) | (1 << (apexParser.MUL_ASSIGN - 79)) | (1 << (apexParser.DIV_ASSIGN - 79)) | (1 << (apexParser.AND_ASSIGN - 79)) | (1 << (apexParser.OR_ASSIGN - 79)) | (1 << (apexParser.XOR_ASSIGN - 79)) | (1 << (apexParser.MOD_ASSIGN - 79)) | (1 << (apexParser.LSHIFT_ASSIGN - 79)))) !== 0) || _la===apexParser.RSHIFT_ASSIGN || _la===apexParser.URSHIFT_ASSIGN)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1093;
                    this.expression(1);
                    break;

                case 13:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1094;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 1095;
                    this.match(apexParser.DOT);
                    this.state = 1096;
                    this.match(apexParser.GET);
                    this.state = 1097;
                    this.match(apexParser.LPAREN);
                    this.state = 1099;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)) | (1 << (apexParser.IntegerLiteral - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (apexParser.FloatingPointLiteral - 65)) | (1 << (apexParser.BooleanLiteral - 65)) | (1 << (apexParser.CharacterLiteral - 65)) | (1 << (apexParser.StringLiteral - 65)) | (1 << (apexParser.NullLiteral - 65)) | (1 << (apexParser.LPAREN - 65)) | (1 << (apexParser.LT - 65)) | (1 << (apexParser.BANG - 65)) | (1 << (apexParser.TILDE - 65)) | (1 << (apexParser.INC - 65)) | (1 << (apexParser.DEC - 65)) | (1 << (apexParser.ADD - 65)) | (1 << (apexParser.SUB - 65)))) !== 0) || _la===apexParser.Identifier) {
                        this.state = 1098;
                        this.expressionList();
                    }

                    this.state = 1101;
                    this.match(apexParser.RPAREN);
                    break;

                case 14:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1102;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 1103;
                    this.match(apexParser.DOT);
                    this.state = 1104;
                    this.match(apexParser.SET);
                    this.state = 1105;
                    this.match(apexParser.LPAREN);
                    this.state = 1107;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)) | (1 << (apexParser.IntegerLiteral - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (apexParser.FloatingPointLiteral - 65)) | (1 << (apexParser.BooleanLiteral - 65)) | (1 << (apexParser.CharacterLiteral - 65)) | (1 << (apexParser.StringLiteral - 65)) | (1 << (apexParser.NullLiteral - 65)) | (1 << (apexParser.LPAREN - 65)) | (1 << (apexParser.LT - 65)) | (1 << (apexParser.BANG - 65)) | (1 << (apexParser.TILDE - 65)) | (1 << (apexParser.INC - 65)) | (1 << (apexParser.DEC - 65)) | (1 << (apexParser.ADD - 65)) | (1 << (apexParser.SUB - 65)))) !== 0) || _la===apexParser.Identifier) {
                        this.state = 1106;
                        this.expressionList();
                    }

                    this.state = 1109;
                    this.match(apexParser.RPAREN);
                    break;

                case 15:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1110;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 1111;
                    this.match(apexParser.DOT);
                    this.state = 1112;
                    this.match(apexParser.Identifier);
                    break;

                case 16:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1113;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 1114;
                    this.match(apexParser.DOT);
                    this.state = 1115;
                    this.match(apexParser.THIS);
                    break;

                case 17:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1116;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 1117;
                    this.match(apexParser.DOT);
                    this.state = 1118;
                    this.match(apexParser.NEW);
                    this.state = 1120;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===apexParser.LT) {
                        this.state = 1119;
                        this.nonWildcardTypeArguments();
                    }

                    this.state = 1122;
                    this.innerCreator();
                    break;

                case 18:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1123;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 1124;
                    this.match(apexParser.DOT);
                    this.state = 1125;
                    this.match(apexParser.SUPER);
                    this.state = 1126;
                    this.superSuffix();
                    break;

                case 19:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1127;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 1128;
                    this.match(apexParser.DOT);
                    this.state = 1129;
                    this.explicitGenericInvocation();
                    break;

                case 20:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1130;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1131;
                    this.match(apexParser.LBRACK);
                    this.state = 1132;
                    this.expression(0);
                    this.state = 1133;
                    this.match(apexParser.RBRACK);
                    break;

                case 21:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1135;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1136;
                    this.match(apexParser.LPAREN);
                    this.state = 1138;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)) | (1 << (apexParser.IntegerLiteral - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (apexParser.FloatingPointLiteral - 65)) | (1 << (apexParser.BooleanLiteral - 65)) | (1 << (apexParser.CharacterLiteral - 65)) | (1 << (apexParser.StringLiteral - 65)) | (1 << (apexParser.NullLiteral - 65)) | (1 << (apexParser.LPAREN - 65)) | (1 << (apexParser.LT - 65)) | (1 << (apexParser.BANG - 65)) | (1 << (apexParser.TILDE - 65)) | (1 << (apexParser.INC - 65)) | (1 << (apexParser.DEC - 65)) | (1 << (apexParser.ADD - 65)) | (1 << (apexParser.SUB - 65)))) !== 0) || _la===apexParser.Identifier) {
                        this.state = 1137;
                        this.expressionList();
                    }

                    this.state = 1140;
                    this.match(apexParser.RPAREN);
                    break;

                case 22:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1141;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1142;
                    _la = this._input.LA(1);
                    if(!(_la===apexParser.INC || _la===apexParser.DEC)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 23:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1143;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1144;
                    this.match(apexParser.INSTANCEOF);
                    this.state = 1145;
                    this.type();
                    break;

                } 
            }
            this.state = 1150;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,127,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryContext.prototype.THIS = function() {
    return this.getToken(apexParser.THIS, 0);
};

PrimaryContext.prototype.SUPER = function() {
    return this.getToken(apexParser.SUPER, 0);
};

PrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

PrimaryContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PrimaryContext.prototype.CLASS = function() {
    return this.getToken(apexParser.CLASS, 0);
};

PrimaryContext.prototype.VOID = function() {
    return this.getToken(apexParser.VOID, 0);
};

PrimaryContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

PrimaryContext.prototype.explicitGenericInvocationSuffix = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
};

PrimaryContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

PrimaryContext.prototype.SoqlLiteral = function() {
    return this.getToken(apexParser.SoqlLiteral, 0);
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPrimary(this);
	}
};

PrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PrimaryContext = PrimaryContext;

apexParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, apexParser.RULE_primary);
    try {
        this.state = 1173;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1151;
            this.match(apexParser.LPAREN);
            this.state = 1152;
            this.expression(0);
            this.state = 1153;
            this.match(apexParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1155;
            this.match(apexParser.THIS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1156;
            this.match(apexParser.SUPER);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1157;
            this.literal();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1158;
            this.match(apexParser.Identifier);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1159;
            this.type();
            this.state = 1160;
            this.match(apexParser.DOT);
            this.state = 1161;
            this.match(apexParser.CLASS);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1163;
            this.match(apexParser.VOID);
            this.state = 1164;
            this.match(apexParser.DOT);
            this.state = 1165;
            this.match(apexParser.CLASS);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1166;
            this.nonWildcardTypeArguments();
            this.state = 1170;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case apexParser.SUPER:
            case apexParser.Identifier:
                this.state = 1167;
                this.explicitGenericInvocationSuffix();
                break;
            case apexParser.THIS:
                this.state = 1168;
                this.match(apexParser.THIS);
                this.state = 1169;
                this.arguments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1172;
            this.match(apexParser.SoqlLiteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_creator;
    return this;
}

CreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatorContext.prototype.constructor = CreatorContext;

CreatorContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

CreatorContext.prototype.createdName = function() {
    return this.getTypedRuleContext(CreatedNameContext,0);
};

CreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

CreatorContext.prototype.arrayCreatorRest = function() {
    return this.getTypedRuleContext(ArrayCreatorRestContext,0);
};

CreatorContext.prototype.mapCreatorRest = function() {
    return this.getTypedRuleContext(MapCreatorRestContext,0);
};

CreatorContext.prototype.setCreatorRest = function() {
    return this.getTypedRuleContext(SetCreatorRestContext,0);
};

CreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCreator(this);
	}
};

CreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCreator(this);
	}
};

CreatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCreator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CreatorContext = CreatorContext;

apexParser.prototype.creator = function() {

    var localctx = new CreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, apexParser.RULE_creator);
    try {
        this.state = 1186;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1175;
            this.nonWildcardTypeArguments();
            this.state = 1176;
            this.createdName();
            this.state = 1177;
            this.classCreatorRest();
            break;
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1179;
            this.createdName();
            this.state = 1184;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1180;
                this.arrayCreatorRest();
                break;

            case 2:
                this.state = 1181;
                this.classCreatorRest();
                break;

            case 3:
                this.state = 1182;
                this.mapCreatorRest();
                break;

            case 4:
                this.state = 1183;
                this.setCreatorRest();
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreatedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_createdName;
    return this;
}

CreatedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatedNameContext.prototype.constructor = CreatedNameContext;

CreatedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


CreatedNameContext.prototype.typeArgumentsOrDiamond = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsOrDiamondContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,i);
    }
};

CreatedNameContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

CreatedNameContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

CreatedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCreatedName(this);
	}
};

CreatedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCreatedName(this);
	}
};

CreatedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCreatedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CreatedNameContext = CreatedNameContext;

apexParser.prototype.createdName = function() {

    var localctx = new CreatedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, apexParser.RULE_createdName);
    var _la = 0; // Token type
    try {
        this.state = 1205;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1188;
            this.match(apexParser.Identifier);
            this.state = 1190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.LT) {
                this.state = 1189;
                this.typeArgumentsOrDiamond();
            }

            this.state = 1199;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===apexParser.DOT) {
                this.state = 1192;
                this.match(apexParser.DOT);
                this.state = 1193;
                this.match(apexParser.Identifier);
                this.state = 1195;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===apexParser.LT) {
                    this.state = 1194;
                    this.typeArgumentsOrDiamond();
                }

                this.state = 1201;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1202;
            this.primitiveType();
            break;
        case apexParser.SET:
            this.enterOuterAlt(localctx, 3);
            this.state = 1203;
            this.match(apexParser.SET);
            this.state = 1204;
            this.typeArgumentsOrDiamond();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InnerCreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_innerCreator;
    return this;
}

InnerCreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerCreatorContext.prototype.constructor = InnerCreatorContext;

InnerCreatorContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

InnerCreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

InnerCreatorContext.prototype.nonWildcardTypeArgumentsOrDiamond = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsOrDiamondContext,0);
};

InnerCreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInnerCreator(this);
	}
};

InnerCreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInnerCreator(this);
	}
};

InnerCreatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInnerCreator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InnerCreatorContext = InnerCreatorContext;

apexParser.prototype.innerCreator = function() {

    var localctx = new InnerCreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, apexParser.RULE_innerCreator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1207;
        this.match(apexParser.Identifier);
        this.state = 1209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LT) {
            this.state = 1208;
            this.nonWildcardTypeArgumentsOrDiamond();
        }

        this.state = 1211;
        this.classCreatorRest();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_arrayCreatorRest;
    return this;
}

ArrayCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayCreatorRestContext.prototype.constructor = ArrayCreatorRestContext;

ArrayCreatorRestContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

ArrayCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArrayCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ArrayCreatorRestContext = ArrayCreatorRestContext;

apexParser.prototype.arrayCreatorRest = function() {

    var localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, apexParser.RULE_arrayCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1213;
        this.match(apexParser.LBRACK);
        this.state = 1241;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.RBRACK:
            this.state = 1214;
            this.match(apexParser.RBRACK);
            this.state = 1219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===apexParser.LBRACK) {
                this.state = 1215;
                this.match(apexParser.LBRACK);
                this.state = 1216;
                this.match(apexParser.RBRACK);
                this.state = 1221;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1222;
            this.arrayInitializer();
            break;
        case apexParser.SoqlLiteral:
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.NEW:
        case apexParser.SHORT:
        case apexParser.SUPER:
        case apexParser.THIS:
        case apexParser.VOID:
        case apexParser.IntegerLiteral:
        case apexParser.FloatingPointLiteral:
        case apexParser.BooleanLiteral:
        case apexParser.CharacterLiteral:
        case apexParser.StringLiteral:
        case apexParser.NullLiteral:
        case apexParser.LPAREN:
        case apexParser.LT:
        case apexParser.BANG:
        case apexParser.TILDE:
        case apexParser.INC:
        case apexParser.DEC:
        case apexParser.ADD:
        case apexParser.SUB:
        case apexParser.Identifier:
            this.state = 1223;
            this.expression(0);
            this.state = 1224;
            this.match(apexParser.RBRACK);
            this.state = 1231;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,138,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1225;
                    this.match(apexParser.LBRACK);
                    this.state = 1226;
                    this.expression(0);
                    this.state = 1227;
                    this.match(apexParser.RBRACK); 
                }
                this.state = 1233;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,138,this._ctx);
            }

            this.state = 1238;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1234;
                    this.match(apexParser.LBRACK);
                    this.state = 1235;
                    this.match(apexParser.RBRACK); 
                }
                this.state = 1240;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_mapCreatorRest;
    return this;
}

MapCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapCreatorRestContext.prototype.constructor = MapCreatorRestContext;

MapCreatorRestContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


MapCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MapCreatorRestContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

MapCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMapCreatorRest(this);
	}
};

MapCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMapCreatorRest(this);
	}
};

MapCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMapCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MapCreatorRestContext = MapCreatorRestContext;

apexParser.prototype.mapCreatorRest = function() {

    var localctx = new MapCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, apexParser.RULE_mapCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1243;
        this.match(apexParser.LBRACE);
        this.state = 1246;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1244;
            this.match(apexParser.Identifier);
            break;

        case 2:
            this.state = 1245;
            this.expression(0);
            break;

        }
        this.state = 1248;
        this.match(apexParser.LAMBDA_LIKE);
        this.state = 1251;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1249;
            this.literal();
            break;

        case 2:
            this.state = 1250;
            this.expression(0);
            break;

        }
        this.state = 1265;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 1253;
            this.match(apexParser.COMMA);
            this.state = 1256;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1254;
                this.match(apexParser.Identifier);
                break;

            case 2:
                this.state = 1255;
                this.expression(0);
                break;

            }
            this.state = 1258;
            this.match(apexParser.LAMBDA_LIKE);
            this.state = 1261;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1259;
                this.literal();
                break;

            case 2:
                this.state = 1260;
                this.expression(0);
                break;

            }
            this.state = 1267;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1268;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_setCreatorRest;
    return this;
}

SetCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetCreatorRestContext.prototype.constructor = SetCreatorRestContext;

SetCreatorRestContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

SetCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSetCreatorRest(this);
	}
};

SetCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSetCreatorRest(this);
	}
};

SetCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSetCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SetCreatorRestContext = SetCreatorRestContext;

apexParser.prototype.setCreatorRest = function() {

    var localctx = new SetCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, apexParser.RULE_setCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1270;
        this.match(apexParser.LBRACE);
        this.state = 1273;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1271;
            this.literal();
            break;

        case 2:
            this.state = 1272;
            this.expression(0);
            break;

        }
        this.state = 1282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 1275;
            this.match(apexParser.COMMA);
            this.state = 1278;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1276;
                this.literal();
                break;

            case 2:
                this.state = 1277;
                this.expression(0);
                break;

            }
            this.state = 1284;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1285;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classCreatorRest;
    return this;
}

ClassCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassCreatorRestContext.prototype.constructor = ClassCreatorRestContext;

ClassCreatorRestContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ClassCreatorRestContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassCreatorRest(this);
	}
};

ClassCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassCreatorRest(this);
	}
};

ClassCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassCreatorRestContext = ClassCreatorRestContext;

apexParser.prototype.classCreatorRest = function() {

    var localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, apexParser.RULE_classCreatorRest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1287;
        this.arguments();
        this.state = 1289;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
        if(la_===1) {
            this.state = 1288;
            this.classBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitGenericInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_explicitGenericInvocation;
    return this;
}

ExplicitGenericInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitGenericInvocationContext.prototype.constructor = ExplicitGenericInvocationContext;

ExplicitGenericInvocationContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

ExplicitGenericInvocationContext.prototype.explicitGenericInvocationSuffix = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
};

ExplicitGenericInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterExplicitGenericInvocation(this);
	}
};

ExplicitGenericInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitExplicitGenericInvocation(this);
	}
};

ExplicitGenericInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitExplicitGenericInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ExplicitGenericInvocationContext = ExplicitGenericInvocationContext;

apexParser.prototype.explicitGenericInvocation = function() {

    var localctx = new ExplicitGenericInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, apexParser.RULE_explicitGenericInvocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1291;
        this.nonWildcardTypeArguments();
        this.state = 1292;
        this.explicitGenericInvocationSuffix();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonWildcardTypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_nonWildcardTypeArguments;
    return this;
}

NonWildcardTypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonWildcardTypeArgumentsContext.prototype.constructor = NonWildcardTypeArgumentsContext;

NonWildcardTypeArgumentsContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

NonWildcardTypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterNonWildcardTypeArguments(this);
	}
};

NonWildcardTypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitNonWildcardTypeArguments(this);
	}
};

NonWildcardTypeArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitNonWildcardTypeArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.NonWildcardTypeArgumentsContext = NonWildcardTypeArgumentsContext;

apexParser.prototype.nonWildcardTypeArguments = function() {

    var localctx = new NonWildcardTypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, apexParser.RULE_nonWildcardTypeArguments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1294;
        this.match(apexParser.LT);
        this.state = 1295;
        this.typeList();
        this.state = 1296;
        this.match(apexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeArgumentsOrDiamond;
    return this;
}

TypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsOrDiamondContext.prototype.constructor = TypeArgumentsOrDiamondContext;

TypeArgumentsOrDiamondContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

TypeArgumentsOrDiamondContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeArgumentsOrDiamond(this);
	}
};

TypeArgumentsOrDiamondContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeArgumentsOrDiamond(this);
	}
};

TypeArgumentsOrDiamondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeArgumentsOrDiamond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext;

apexParser.prototype.typeArgumentsOrDiamond = function() {

    var localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, apexParser.RULE_typeArgumentsOrDiamond);
    try {
        this.state = 1301;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1298;
            this.match(apexParser.LT);
            this.state = 1299;
            this.match(apexParser.GT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1300;
            this.typeArguments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonWildcardTypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_nonWildcardTypeArgumentsOrDiamond;
    return this;
}

NonWildcardTypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonWildcardTypeArgumentsOrDiamondContext.prototype.constructor = NonWildcardTypeArgumentsOrDiamondContext;

NonWildcardTypeArgumentsOrDiamondContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterNonWildcardTypeArgumentsOrDiamond(this);
	}
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitNonWildcardTypeArgumentsOrDiamond(this);
	}
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitNonWildcardTypeArgumentsOrDiamond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.NonWildcardTypeArgumentsOrDiamondContext = NonWildcardTypeArgumentsOrDiamondContext;

apexParser.prototype.nonWildcardTypeArgumentsOrDiamond = function() {

    var localctx = new NonWildcardTypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, apexParser.RULE_nonWildcardTypeArgumentsOrDiamond);
    try {
        this.state = 1306;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1303;
            this.match(apexParser.LT);
            this.state = 1304;
            this.match(apexParser.GT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1305;
            this.nonWildcardTypeArguments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuperSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_superSuffix;
    return this;
}

SuperSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperSuffixContext.prototype.constructor = SuperSuffixContext;

SuperSuffixContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

SuperSuffixContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

SuperSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSuperSuffix(this);
	}
};

SuperSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSuperSuffix(this);
	}
};

SuperSuffixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSuperSuffix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SuperSuffixContext = SuperSuffixContext;

apexParser.prototype.superSuffix = function() {

    var localctx = new SuperSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, apexParser.RULE_superSuffix);
    try {
        this.state = 1314;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1308;
            this.arguments();
            break;
        case apexParser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1309;
            this.match(apexParser.DOT);
            this.state = 1310;
            this.match(apexParser.Identifier);
            this.state = 1312;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
            if(la_===1) {
                this.state = 1311;
                this.arguments();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitGenericInvocationSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_explicitGenericInvocationSuffix;
    return this;
}

ExplicitGenericInvocationSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitGenericInvocationSuffixContext.prototype.constructor = ExplicitGenericInvocationSuffixContext;

ExplicitGenericInvocationSuffixContext.prototype.SUPER = function() {
    return this.getToken(apexParser.SUPER, 0);
};

ExplicitGenericInvocationSuffixContext.prototype.superSuffix = function() {
    return this.getTypedRuleContext(SuperSuffixContext,0);
};

ExplicitGenericInvocationSuffixContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ExplicitGenericInvocationSuffixContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ExplicitGenericInvocationSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterExplicitGenericInvocationSuffix(this);
	}
};

ExplicitGenericInvocationSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitExplicitGenericInvocationSuffix(this);
	}
};

ExplicitGenericInvocationSuffixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitExplicitGenericInvocationSuffix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ExplicitGenericInvocationSuffixContext = ExplicitGenericInvocationSuffixContext;

apexParser.prototype.explicitGenericInvocationSuffix = function() {

    var localctx = new ExplicitGenericInvocationSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, apexParser.RULE_explicitGenericInvocationSuffix);
    try {
        this.state = 1320;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SUPER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1316;
            this.match(apexParser.SUPER);
            this.state = 1317;
            this.superSuffix();
            break;
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1318;
            this.match(apexParser.Identifier);
            this.state = 1319;
            this.arguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArguments(this);
	}
};

ArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ArgumentsContext = ArgumentsContext;

apexParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, apexParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1322;
        this.match(apexParser.LPAREN);
        this.state = 1324;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)) | (1 << (apexParser.IntegerLiteral - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (apexParser.FloatingPointLiteral - 65)) | (1 << (apexParser.BooleanLiteral - 65)) | (1 << (apexParser.CharacterLiteral - 65)) | (1 << (apexParser.StringLiteral - 65)) | (1 << (apexParser.NullLiteral - 65)) | (1 << (apexParser.LPAREN - 65)) | (1 << (apexParser.LT - 65)) | (1 << (apexParser.BANG - 65)) | (1 << (apexParser.TILDE - 65)) | (1 << (apexParser.INC - 65)) | (1 << (apexParser.DEC - 65)) | (1 << (apexParser.ADD - 65)) | (1 << (apexParser.SUB - 65)))) !== 0) || _la===apexParser.Identifier) {
            this.state = 1323;
            this.expressionList();
        }

        this.state = 1326;
        this.match(apexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


apexParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 91:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

apexParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 13);
		case 1:
			return this.precpred(this._ctx, 12);
		case 2:
			return this.precpred(this._ctx, 11);
		case 3:
			return this.precpred(this._ctx, 10);
		case 4:
			return this.precpred(this._ctx, 8);
		case 5:
			return this.precpred(this._ctx, 7);
		case 6:
			return this.precpred(this._ctx, 6);
		case 7:
			return this.precpred(this._ctx, 5);
		case 8:
			return this.precpred(this._ctx, 4);
		case 9:
			return this.precpred(this._ctx, 3);
		case 10:
			return this.precpred(this._ctx, 2);
		case 11:
			return this.precpred(this._ctx, 1);
		case 12:
			return this.precpred(this._ctx, 27);
		case 13:
			return this.precpred(this._ctx, 26);
		case 14:
			return this.precpred(this._ctx, 25);
		case 15:
			return this.precpred(this._ctx, 24);
		case 16:
			return this.precpred(this._ctx, 23);
		case 17:
			return this.precpred(this._ctx, 22);
		case 18:
			return this.precpred(this._ctx, 21);
		case 19:
			return this.precpred(this._ctx, 20);
		case 20:
			return this.precpred(this._ctx, 19);
		case 21:
			return this.precpred(this._ctx, 16);
		case 22:
			return this.precpred(this._ctx, 9);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.apexParser = apexParser;
