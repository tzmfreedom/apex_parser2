// Generated from apex.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var apexListener = require('./apexListener').apexListener;
var apexVisitor = require('./apexVisitor').apexVisitor;

var grammarFileName = "apex.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0080\u046c\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0007\u0003\u00c3\n\u0003\f\u0003\u000e\u0003\u00c6\u000b",
    "\u0003\u0003\u0003\u0003\u0003\u0007\u0003\u00ca\n\u0003\f\u0003\u000e",
    "\u0003\u00cd\u000b\u0003\u0003\u0003\u0003\u0003\u0007\u0003\u00d1\n",
    "\u0003\f\u0003\u000e\u0003\u00d4\u000b\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0005\u0003\u00d9\n\u0003\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00e7\n\u0005",
    "\f\u0005\u000e\u0005\u00ea\u000b\u0005\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0007\u0003\u0007\u0005\u0007\u00f1\n\u0007\u0003\b\u0003",
    "\b\u0005\b\u00f5\n\b\u0003\t\u0003\t\u0005\t\u00f9\n\t\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u00ff\n\n\u0003\n\u0003\n\u0005\n\u0103\n",
    "\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u010b\n\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u010f\n\u000b",
    "\u0003\u000b\u0005\u000b\u0112\n\u000b\u0003\u000b\u0005\u000b\u0115",
    "\n\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0007\f\u011c",
    "\n\f\f\f\u000e\f\u011f\u000b\f\u0003\r\u0007\r\u0122\n\r\f\r\u000e\r",
    "\u0125\u000b\r\u0003\r\u0003\r\u0005\r\u0129\n\r\u0003\r\u0005\r\u012c",
    "\n\r\u0003\u000e\u0003\u000e\u0007\u000e\u0130\n\u000e\f\u000e\u000e",
    "\u000e\u0133\u000b\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u0139\n\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0007\u0010\u0140\n\u0010\f\u0010\u000e\u0010\u0143",
    "\u000b\u0010\u0003\u0011\u0003\u0011\u0007\u0011\u0147\n\u0011\f\u0011",
    "\u000e\u0011\u014a\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003",
    "\u0012\u0007\u0012\u0150\n\u0012\f\u0012\u000e\u0012\u0153\u000b\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u0159\n",
    "\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u015d\n\u0013\f\u0013\u000e",
    "\u0013\u0160\u000b\u0013\u0003\u0013\u0005\u0013\u0163\n\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u016c\n\u0014\u0003\u0015\u0005\u0015\u016f\n\u0015",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u0173\n\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0179\n\u0015\f\u0015\u000e",
    "\u0015\u017c\u000b\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0180\n",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0184\n\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u018a\n\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u0199\n\u0019\u0003\u0019\u0003\u0019\u0003\u001a",
    "\u0007\u001a\u019e\n\u001a\f\u001a\u000e\u001a\u01a1\u000b\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u01a5\n\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u01ac\n\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u01b2\n\u001c",
    "\f\u001c\u000e\u001c\u01b5\u000b\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u01bc\n\u001d\f\u001d\u000e",
    "\u001d\u01bf\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e",
    "\u0003\u001e\u0005\u001e\u01c6\n\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0007\u001e\u01cc\n\u001e\f\u001e\u000e\u001e\u01cf",
    "\u000b\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01d3\n\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u01da",
    "\n\u001f\f\u001f\u000e\u001f\u01dd\u000b\u001f\u0003 \u0003 \u0003 ",
    "\u0005 \u01e2\n \u0003!\u0003!\u0003!\u0007!\u01e7\n!\f!\u000e!\u01ea",
    "\u000b!\u0003\"\u0003\"\u0005\"\u01ee\n\"\u0003#\u0003#\u0003#\u0003",
    "#\u0007#\u01f4\n#\f#\u000e#\u01f7\u000b#\u0003#\u0005#\u01fa\n#\u0005",
    "#\u01fc\n#\u0003#\u0003#\u0003$\u0003$\u0003%\u0003%\u0007%\u0204\n",
    "%\f%\u000e%\u0207\u000b%\u0003%\u0003%\u0007%\u020b\n%\f%\u000e%\u020e",
    "\u000b%\u0005%\u0210\n%\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0005\'",
    "\u0217\n\'\u0003\'\u0003\'\u0003\'\u0005\'\u021c\n\'\u0007\'\u021e\n",
    "\'\f\'\u000e\'\u0221\u000b\'\u0003\'\u0003\'\u0005\'\u0225\n\'\u0003",
    "(\u0003(\u0003)\u0003)\u0003)\u0003)\u0007)\u022d\n)\f)\u000e)\u0230",
    "\u000b)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0005*\u0238\n*\u0005",
    "*\u023a\n*\u0003+\u0003+\u0003+\u0007+\u023f\n+\f+\u000e+\u0242\u000b",
    "+\u0003,\u0003,\u0005,\u0246\n,\u0003,\u0003,\u0003-\u0003-\u0003-\u0007",
    "-\u024d\n-\f-\u000e-\u0250\u000b-\u0003-\u0003-\u0005-\u0254\n-\u0003",
    "-\u0005-\u0257\n-\u0003.\u0007.\u025a\n.\f.\u000e.\u025d\u000b.\u0003",
    ".\u0003.\u0003.\u0003/\u0007/\u0263\n/\f/\u000e/\u0266\u000b/\u0003",
    "/\u0003/\u0003/\u0003/\u00030\u00030\u00031\u00031\u00032\u00032\u0003",
    "2\u00072\u0273\n2\f2\u000e2\u0276\u000b2\u00033\u00033\u00034\u0003",
    "4\u00034\u00034\u00034\u00054\u027f\n4\u00034\u00054\u0282\n4\u0003",
    "5\u00035\u00036\u00036\u00036\u00076\u0289\n6\f6\u000e6\u028c\u000b",
    "6\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00058\u0295\n8\u0003",
    "9\u00039\u00039\u00039\u00079\u029b\n9\f9\u000e9\u029e\u000b9\u0005",
    "9\u02a0\n9\u00039\u00059\u02a3\n9\u00039\u00039\u0003:\u0003:\u0007",
    ":\u02a9\n:\f:\u000e:\u02ac\u000b:\u0003:\u0003:\u0003;\u0003;\u0003",
    ";\u0005;\u02b3\n;\u0003<\u0003<\u0003<\u0003=\u0007=\u02b9\n=\f=\u000e",
    "=\u02bc\u000b=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0005>\u02c7\n>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0006>\u02db\n>\r>\u000e>\u02dc\u0003>\u0005>\u02e0\n>\u0003",
    ">\u0005>\u02e3\n>\u0003>\u0003>\u0005>\u02e7\n>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0005>\u02f0\n>\u0003>\u0003>\u0003>\u0005",
    ">\u02f5\n>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005",
    ">\u02ff\n>\u0003?\u0007?\u0302\n?\f?\u000e?\u0305\u000b?\u0003?\u0003",
    "?\u0005?\u0309\n?\u0003@\u0003@\u0003@\u0005@\u030e\n@\u0003A\u0003",
    "A\u0003A\u0005A\u0313\nA\u0003B\u0003B\u0003B\u0007B\u0318\nB\fB\u000e",
    "B\u031b\u000bB\u0003B\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003",
    "C\u0007C\u0325\nC\fC\u000eC\u0328\u000bC\u0003D\u0003D\u0003D\u0003",
    "E\u0003E\u0005E\u032f\nE\u0003E\u0003E\u0005E\u0333\nE\u0003E\u0003",
    "E\u0005E\u0337\nE\u0005E\u0339\nE\u0003F\u0003F\u0005F\u033d\nF\u0003",
    "G\u0007G\u0340\nG\fG\u000eG\u0343\u000bG\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003J\u0003J\u0003",
    "J\u0007J\u0353\nJ\fJ\u000eJ\u0356\u000bJ\u0003K\u0003K\u0003L\u0003",
    "L\u0003M\u0003M\u0003M\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0005O\u036e",
    "\nO\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0005O\u037e\nO\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0005O\u03ad\nO\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0007",
    "O\u03b5\nO\fO\u000eO\u03b8\u000bO\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0005P\u03cd\nP\u0003P\u0005P\u03d0\n",
    "P\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0005",
    "Q\u03db\nQ\u0005Q\u03dd\nQ\u0003R\u0003R\u0005R\u03e1\nR\u0003R\u0003",
    "R\u0003R\u0005R\u03e6\nR\u0007R\u03e8\nR\fR\u000eR\u03eb\u000bR\u0003",
    "R\u0003R\u0003R\u0005R\u03f0\nR\u0003S\u0003S\u0005S\u03f4\nS\u0003",
    "S\u0003S\u0003T\u0003T\u0007T\u03fa\nT\fT\u000eT\u03fd\u000bT\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0007T\u0408",
    "\nT\fT\u000eT\u040b\u000bT\u0003T\u0007T\u040e\nT\fT\u000eT\u0411\u000b",
    "T\u0005T\u0413\nT\u0003U\u0003U\u0003U\u0005U\u0418\nU\u0003U\u0003",
    "U\u0003U\u0005U\u041d\nU\u0003U\u0003U\u0003U\u0005U\u0422\nU\u0003",
    "U\u0003U\u0003U\u0005U\u0427\nU\u0007U\u0429\nU\fU\u000eU\u042c\u000b",
    "U\u0003U\u0003U\u0003V\u0003V\u0003V\u0005V\u0433\nV\u0003V\u0003V\u0003",
    "V\u0005V\u0438\nV\u0007V\u043a\nV\fV\u000eV\u043d\u000bV\u0003V\u0003",
    "V\u0003W\u0003W\u0005W\u0443\nW\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Z\u0003Z\u0003Z\u0005Z\u044f\nZ\u0003[\u0003[\u0003[\u0005",
    "[\u0454\n[\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u045a\n\\\u0005\\",
    "\u045c\n\\\u0003]\u0003]\u0003]\u0003]\u0005]\u0462\n]\u0003^\u0003",
    "^\u0005^\u0466\n^\u0003^\u0003^\u0003_\u0003_\u0003_\u0002\u0003\u009c",
    "`\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u0002\u0011\u0003\u0002DE\u0003",
    "\u0002<@\t\u0002\u0004\u0005\t\t\u0018\u0018\'),,7:AA\n\u0002\n\n\f",
    "\f\u000e\u000e\u0014\u0014\u001a\u001a!!##++\u0004\u0002\u0017\u0017",
    "--\u0003\u0002FJ\u0003\u0002ad\u0003\u0002WX\u0004\u0002efjj\u0003\u0002",
    "cd\u0004\u0002UV\\]\u0004\u0002[[^^\u0004\u0002TTku\u0003\u0002ab\u0004",
    "\u0002\u0006\u0007ww\u0002\u04c8\u0002\u00be\u0003\u0002\u0002\u0002",
    "\u0004\u00d8\u0003\u0002\u0002\u0002\u0006\u00da\u0003\u0002\u0002\u0002",
    "\b\u00e3\u0003\u0002\u0002\u0002\n\u00eb\u0003\u0002\u0002\u0002\f\u00f0",
    "\u0003\u0002\u0002\u0002\u000e\u00f4\u0003\u0002\u0002\u0002\u0010\u00f8",
    "\u0003\u0002\u0002\u0002\u0012\u00fa\u0003\u0002\u0002\u0002\u0014\u0106",
    "\u0003\u0002\u0002\u0002\u0016\u0118\u0003\u0002\u0002\u0002\u0018\u0123",
    "\u0003\u0002\u0002\u0002\u001a\u012d\u0003\u0002\u0002\u0002\u001c\u0134",
    "\u0003\u0002\u0002\u0002\u001e\u013c\u0003\u0002\u0002\u0002 \u0144",
    "\u0003\u0002\u0002\u0002\"\u014d\u0003\u0002\u0002\u0002$\u0162\u0003",
    "\u0002\u0002\u0002&\u016b\u0003\u0002\u0002\u0002(\u016e\u0003\u0002",
    "\u0002\u0002*\u0185\u0003\u0002\u0002\u0002,\u018d\u0003\u0002\u0002",
    "\u0002.\u0191\u0003\u0002\u0002\u00020\u0195\u0003\u0002\u0002\u0002",
    "2\u01a4\u0003\u0002\u0002\u00024\u01ab\u0003\u0002\u0002\u00026\u01ad",
    "\u0003\u0002\u0002\u00028\u01b8\u0003\u0002\u0002\u0002:\u01c5\u0003",
    "\u0002\u0002\u0002<\u01d6\u0003\u0002\u0002\u0002>\u01de\u0003\u0002",
    "\u0002\u0002@\u01e3\u0003\u0002\u0002\u0002B\u01ed\u0003\u0002\u0002",
    "\u0002D\u01ef\u0003\u0002\u0002\u0002F\u01ff\u0003\u0002\u0002\u0002",
    "H\u020f\u0003\u0002\u0002\u0002J\u0211\u0003\u0002\u0002\u0002L\u0224",
    "\u0003\u0002\u0002\u0002N\u0226\u0003\u0002\u0002\u0002P\u0228\u0003",
    "\u0002\u0002\u0002R\u0239\u0003\u0002\u0002\u0002T\u023b\u0003\u0002",
    "\u0002\u0002V\u0243\u0003\u0002\u0002\u0002X\u0256\u0003\u0002\u0002",
    "\u0002Z\u025b\u0003\u0002\u0002\u0002\\\u0264\u0003\u0002\u0002\u0002",
    "^\u026b\u0003\u0002\u0002\u0002`\u026d\u0003\u0002\u0002\u0002b\u026f",
    "\u0003\u0002\u0002\u0002d\u0277\u0003\u0002\u0002\u0002f\u0279\u0003",
    "\u0002\u0002\u0002h\u0283\u0003\u0002\u0002\u0002j\u0285\u0003\u0002",
    "\u0002\u0002l\u028d\u0003\u0002\u0002\u0002n\u0294\u0003\u0002\u0002",
    "\u0002p\u0296\u0003\u0002\u0002\u0002r\u02a6\u0003\u0002\u0002\u0002",
    "t\u02b2\u0003\u0002\u0002\u0002v\u02b4\u0003\u0002\u0002\u0002x\u02ba",
    "\u0003\u0002\u0002\u0002z\u02fe\u0003\u0002\u0002\u0002|\u0303\u0003",
    "\u0002\u0002\u0002~\u030a\u0003\u0002\u0002\u0002\u0080\u030f\u0003",
    "\u0002\u0002\u0002\u0082\u0314\u0003\u0002\u0002\u0002\u0084\u0321\u0003",
    "\u0002\u0002\u0002\u0086\u0329\u0003\u0002\u0002\u0002\u0088\u0338\u0003",
    "\u0002\u0002\u0002\u008a\u033c\u0003\u0002\u0002\u0002\u008c\u0341\u0003",
    "\u0002\u0002\u0002\u008e\u0349\u0003\u0002\u0002\u0002\u0090\u034b\u0003",
    "\u0002\u0002\u0002\u0092\u034f\u0003\u0002\u0002\u0002\u0094\u0357\u0003",
    "\u0002\u0002\u0002\u0096\u0359\u0003\u0002\u0002\u0002\u0098\u035b\u0003",
    "\u0002\u0002\u0002\u009a\u035e\u0003\u0002\u0002\u0002\u009c\u036d\u0003",
    "\u0002\u0002\u0002\u009e\u03cf\u0003\u0002\u0002\u0002\u00a0\u03dc\u0003",
    "\u0002\u0002\u0002\u00a2\u03ef\u0003\u0002\u0002\u0002\u00a4\u03f1\u0003",
    "\u0002\u0002\u0002\u00a6\u0412\u0003\u0002\u0002\u0002\u00a8\u0414\u0003",
    "\u0002\u0002\u0002\u00aa\u042f\u0003\u0002\u0002\u0002\u00ac\u0440\u0003",
    "\u0002\u0002\u0002\u00ae\u0444\u0003\u0002\u0002\u0002\u00b0\u0447\u0003",
    "\u0002\u0002\u0002\u00b2\u044e\u0003\u0002\u0002\u0002\u00b4\u0453\u0003",
    "\u0002\u0002\u0002\u00b6\u045b\u0003\u0002\u0002\u0002\u00b8\u0461\u0003",
    "\u0002\u0002\u0002\u00ba\u0463\u0003\u0002\u0002\u0002\u00bc\u0469\u0003",
    "\u0002\u0002\u0002\u00be\u00bf\u0005\u0004\u0003\u0002\u00bf\u00c0\u0007",
    "\u0002\u0002\u0003\u00c0\u0003\u0003\u0002\u0002\u0002\u00c1\u00c3\u0005",
    "\u000e\b\u0002\u00c2\u00c1\u0003\u0002\u0002\u0002\u00c3\u00c6\u0003",
    "\u0002\u0002\u0002\u00c4\u00c2\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003",
    "\u0002\u0002\u0002\u00c5\u00c7\u0003\u0002\u0002\u0002\u00c6\u00c4\u0003",
    "\u0002\u0002\u0002\u00c7\u00d9\u0005\u0012\n\u0002\u00c8\u00ca\u0005",
    "\u000e\b\u0002\u00c9\u00c8\u0003\u0002\u0002\u0002\u00ca\u00cd\u0003",
    "\u0002\u0002\u0002\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cb\u00cc\u0003",
    "\u0002\u0002\u0002\u00cc\u00ce\u0003\u0002\u0002\u0002\u00cd\u00cb\u0003",
    "\u0002\u0002\u0002\u00ce\u00d9\u0005\u0014\u000b\u0002\u00cf\u00d1\u0005",
    "\u000e\b\u0002\u00d0\u00cf\u0003\u0002\u0002\u0002\u00d1\u00d4\u0003",
    "\u0002\u0002\u0002\u00d2\u00d0\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003",
    "\u0002\u0002\u0002\u00d3\u00d5\u0003\u0002\u0002\u0002\u00d4\u00d2\u0003",
    "\u0002\u0002\u0002\u00d5\u00d9\u0005\u001c\u000f\u0002\u00d6\u00d9\u0005",
    "\u0006\u0004\u0002\u00d7\u00d9\u0007Q\u0002\u0002\u00d8\u00c4\u0003",
    "\u0002\u0002\u0002\u00d8\u00cb\u0003\u0002\u0002\u0002\u00d8\u00d2\u0003",
    "\u0002\u0002\u0002\u00d8\u00d6\u0003\u0002\u0002\u0002\u00d8\u00d7\u0003",
    "\u0002\u0002\u0002\u00d9\u0005\u0003\u0002\u0002\u0002\u00da\u00db\u0007",
    "B\u0002\u0002\u00db\u00dc\u0007w\u0002\u0002\u00dc\u00dd\u0007C\u0002",
    "\u0002\u00dd\u00de\u0007w\u0002\u0002\u00de\u00df\u0007K\u0002\u0002",
    "\u00df\u00e0\u0005\b\u0005\u0002\u00e0\u00e1\u0007L\u0002\u0002\u00e1",
    "\u00e2\u0005r:\u0002\u00e2\u0007\u0003\u0002\u0002\u0002\u00e3\u00e8",
    "\u0005\n\u0006\u0002\u00e4\u00e5\u0007R\u0002\u0002\u00e5\u00e7\u0005",
    "\n\u0006\u0002\u00e6\u00e4\u0003\u0002\u0002\u0002\u00e7\u00ea\u0003",
    "\u0002\u0002\u0002\u00e8\u00e6\u0003\u0002\u0002\u0002\u00e8\u00e9\u0003",
    "\u0002\u0002\u0002\u00e9\t\u0003\u0002\u0002\u0002\u00ea\u00e8\u0003",
    "\u0002\u0002\u0002\u00eb\u00ec\t\u0002\u0002\u0002\u00ec\u00ed\t\u0003",
    "\u0002\u0002\u00ed\u000b\u0003\u0002\u0002\u0002\u00ee\u00f1\u0005\u000e",
    "\b\u0002\u00ef\u00f1\u00072\u0002\u0002\u00f0\u00ee\u0003\u0002\u0002",
    "\u0002\u00f0\u00ef\u0003\u0002\u0002\u0002\u00f1\r\u0003\u0002\u0002",
    "\u0002\u00f2\u00f5\u0005f4\u0002\u00f3\u00f5\t\u0004\u0002\u0002\u00f4",
    "\u00f2\u0003\u0002\u0002\u0002\u00f4\u00f3\u0003\u0002\u0002\u0002\u00f5",
    "\u000f\u0003\u0002\u0002\u0002\u00f6\u00f9\u0007\u0018\u0002\u0002\u00f7",
    "\u00f9\u0005f4\u0002\u00f8\u00f6\u0003\u0002\u0002\u0002\u00f8\u00f7",
    "\u0003\u0002\u0002\u0002\u00f9\u0011\u0003\u0002\u0002\u0002\u00fa\u00fb",
    "\u0007\u000f\u0002\u0002\u00fb\u00fe\u0007w\u0002\u0002\u00fc\u00fd",
    "\u0007\u0017\u0002\u0002\u00fd\u00ff\u0005H%\u0002\u00fe\u00fc\u0003",
    "\u0002\u0002\u0002\u00fe\u00ff\u0003\u0002\u0002\u0002\u00ff\u0102\u0003",
    "\u0002\u0002\u0002\u0100\u0101\u0007\u001e\u0002\u0002\u0101\u0103\u0005",
    "\u001e\u0010\u0002\u0102\u0100\u0003\u0002\u0002\u0002\u0102\u0103\u0003",
    "\u0002\u0002\u0002\u0103\u0104\u0003\u0002\u0002\u0002\u0104\u0105\u0005",
    " \u0011\u0002\u0105\u0013\u0003\u0002\u0002\u0002\u0106\u0107\u0007",
    "\u0016\u0002\u0002\u0107\u010a\u0007w\u0002\u0002\u0108\u0109\u0007",
    "\u001e\u0002\u0002\u0109\u010b\u0005\u001e\u0010\u0002\u010a\u0108\u0003",
    "\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b\u010c\u0003",
    "\u0002\u0002\u0002\u010c\u010e\u0007M\u0002\u0002\u010d\u010f\u0005",
    "\u0016\f\u0002\u010e\u010d\u0003\u0002\u0002\u0002\u010e\u010f\u0003",
    "\u0002\u0002\u0002\u010f\u0111\u0003\u0002\u0002\u0002\u0110\u0112\u0007",
    "R\u0002\u0002\u0111\u0110\u0003\u0002\u0002\u0002\u0111\u0112\u0003",
    "\u0002\u0002\u0002\u0112\u0114\u0003\u0002\u0002\u0002\u0113\u0115\u0005",
    "\u001a\u000e\u0002\u0114\u0113\u0003\u0002\u0002\u0002\u0114\u0115\u0003",
    "\u0002\u0002\u0002\u0115\u0116\u0003\u0002\u0002\u0002\u0116\u0117\u0007",
    "N\u0002\u0002\u0117\u0015\u0003\u0002\u0002\u0002\u0118\u011d\u0005",
    "\u0018\r\u0002\u0119\u011a\u0007R\u0002\u0002\u011a\u011c\u0005\u0018",
    "\r\u0002\u011b\u0119\u0003\u0002\u0002\u0002\u011c\u011f\u0003\u0002",
    "\u0002\u0002\u011d\u011b\u0003\u0002\u0002\u0002\u011d\u011e\u0003\u0002",
    "\u0002\u0002\u011e\u0017\u0003\u0002\u0002\u0002\u011f\u011d\u0003\u0002",
    "\u0002\u0002\u0120\u0122\u0005f4\u0002\u0121\u0120\u0003\u0002\u0002",
    "\u0002\u0122\u0125\u0003\u0002\u0002\u0002\u0123\u0121\u0003\u0002\u0002",
    "\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124\u0126\u0003\u0002\u0002",
    "\u0002\u0125\u0123\u0003\u0002\u0002\u0002\u0126\u0128\u0007w\u0002",
    "\u0002\u0127\u0129\u0005\u00ba^\u0002\u0128\u0127\u0003\u0002\u0002",
    "\u0002\u0128\u0129\u0003\u0002\u0002\u0002\u0129\u012b\u0003\u0002\u0002",
    "\u0002\u012a\u012c\u0005 \u0011\u0002\u012b\u012a\u0003\u0002\u0002",
    "\u0002\u012b\u012c\u0003\u0002\u0002\u0002\u012c\u0019\u0003\u0002\u0002",
    "\u0002\u012d\u0131\u0007Q\u0002\u0002\u012e\u0130\u0005$\u0013\u0002",
    "\u012f\u012e\u0003\u0002\u0002\u0002\u0130\u0133\u0003\u0002\u0002\u0002",
    "\u0131\u012f\u0003\u0002\u0002\u0002\u0131\u0132\u0003\u0002\u0002\u0002",
    "\u0132\u001b\u0003\u0002\u0002\u0002\u0133\u0131\u0003\u0002\u0002\u0002",
    "\u0134\u0135\u0007\"\u0002\u0002\u0135\u0138\u0007w\u0002\u0002\u0136",
    "\u0137\u0007\u0017\u0002\u0002\u0137\u0139\u0005\u001e\u0010\u0002\u0138",
    "\u0136\u0003\u0002\u0002\u0002\u0138\u0139\u0003\u0002\u0002\u0002\u0139",
    "\u013a\u0003\u0002\u0002\u0002\u013a\u013b\u0005\"\u0012\u0002\u013b",
    "\u001d\u0003\u0002\u0002\u0002\u013c\u0141\u0005H%\u0002\u013d\u013e",
    "\u0007R\u0002\u0002\u013e\u0140\u0005H%\u0002\u013f\u013d\u0003\u0002",
    "\u0002\u0002\u0140\u0143\u0003\u0002\u0002\u0002\u0141\u013f\u0003\u0002",
    "\u0002\u0002\u0141\u0142\u0003\u0002\u0002\u0002\u0142\u001f\u0003\u0002",
    "\u0002\u0002\u0143\u0141\u0003\u0002\u0002\u0002\u0144\u0148\u0007M",
    "\u0002\u0002\u0145\u0147\u0005$\u0013\u0002\u0146\u0145\u0003\u0002",
    "\u0002\u0002\u0147\u014a\u0003\u0002\u0002\u0002\u0148\u0146\u0003\u0002",
    "\u0002\u0002\u0148\u0149\u0003\u0002\u0002\u0002\u0149\u014b\u0003\u0002",
    "\u0002\u0002\u014a\u0148\u0003\u0002\u0002\u0002\u014b\u014c\u0007N",
    "\u0002\u0002\u014c!\u0003\u0002\u0002\u0002\u014d\u0151\u0007M\u0002",
    "\u0002\u014e\u0150\u00052\u001a\u0002\u014f\u014e\u0003\u0002\u0002",
    "\u0002\u0150\u0153\u0003\u0002\u0002\u0002\u0151\u014f\u0003\u0002\u0002",
    "\u0002\u0151\u0152\u0003\u0002\u0002\u0002\u0152\u0154\u0003\u0002\u0002",
    "\u0002\u0153\u0151\u0003\u0002\u0002\u0002\u0154\u0155\u0007N\u0002",
    "\u0002\u0155#\u0003\u0002\u0002\u0002\u0156\u0163\u0007Q\u0002\u0002",
    "\u0157\u0159\u0007,\u0002\u0002\u0158\u0157\u0003\u0002\u0002\u0002",
    "\u0158\u0159\u0003\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002",
    "\u015a\u0163\u0005r:\u0002\u015b\u015d\u0005\f\u0007\u0002\u015c\u015b",
    "\u0003\u0002\u0002\u0002\u015d\u0160\u0003\u0002\u0002\u0002\u015e\u015c",
    "\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f\u0161",
    "\u0003\u0002\u0002\u0002\u0160\u015e\u0003\u0002\u0002\u0002\u0161\u0163",
    "\u0005&\u0014\u0002\u0162\u0156\u0003\u0002\u0002\u0002\u0162\u0158",
    "\u0003\u0002\u0002\u0002\u0162\u015e\u0003\u0002\u0002\u0002\u0163%",
    "\u0003\u0002\u0002\u0002\u0164\u016c\u0005(\u0015\u0002\u0165\u016c",
    "\u0005,\u0017\u0002\u0166\u016c\u0005*\u0016\u0002\u0167\u016c\u0005",
    "\u001c\u000f\u0002\u0168\u016c\u0005\u0012\n\u0002\u0169\u016c\u0005",
    "\u0014\u000b\u0002\u016a\u016c\u0005.\u0018\u0002\u016b\u0164\u0003",
    "\u0002\u0002\u0002\u016b\u0165\u0003\u0002\u0002\u0002\u016b\u0166\u0003",
    "\u0002\u0002\u0002\u016b\u0167\u0003\u0002\u0002\u0002\u016b\u0168\u0003",
    "\u0002\u0002\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016b\u016a\u0003",
    "\u0002\u0002\u0002\u016c\'\u0003\u0002\u0002\u0002\u016d\u016f\u0007",
    "\u0004\u0002\u0002\u016e\u016d\u0003\u0002\u0002\u0002\u016e\u016f\u0003",
    "\u0002\u0002\u0002\u016f\u0172\u0003\u0002\u0002\u0002\u0170\u0173\u0005",
    "H%\u0002\u0171\u0173\u00074\u0002\u0002\u0172\u0170\u0003\u0002\u0002",
    "\u0002\u0172\u0171\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002",
    "\u0002\u0174\u0175\u0007w\u0002\u0002\u0175\u017a\u0005V,\u0002\u0176",
    "\u0177\u0007O\u0002\u0002\u0177\u0179\u0007P\u0002\u0002\u0178\u0176",
    "\u0003\u0002\u0002\u0002\u0179\u017c\u0003\u0002\u0002\u0002\u017a\u0178",
    "\u0003\u0002\u0002\u0002\u017a\u017b\u0003\u0002\u0002\u0002\u017b\u017f",
    "\u0003\u0002\u0002\u0002\u017c\u017a\u0003\u0002\u0002\u0002\u017d\u017e",
    "\u00071\u0002\u0002\u017e\u0180\u0005T+\u0002\u017f\u017d\u0003\u0002",
    "\u0002\u0002\u017f\u0180\u0003\u0002\u0002\u0002\u0180\u0183\u0003\u0002",
    "\u0002\u0002\u0181\u0184\u0005^0\u0002\u0182\u0184\u0007Q\u0002\u0002",
    "\u0183\u0181\u0003\u0002\u0002\u0002\u0183\u0182\u0003\u0002\u0002\u0002",
    "\u0184)\u0003\u0002\u0002\u0002\u0185\u0186\u0007w\u0002\u0002\u0186",
    "\u0189\u0005V,\u0002\u0187\u0188\u00071\u0002\u0002\u0188\u018a\u0005",
    "T+\u0002\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002",
    "\u0002\u0002\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u018c\u0005`",
    "1\u0002\u018c+\u0003\u0002\u0002\u0002\u018d\u018e\u0005H%\u0002\u018e",
    "\u018f\u0005<\u001f\u0002\u018f\u0190\u0007Q\u0002\u0002\u0190-\u0003",
    "\u0002\u0002\u0002\u0191\u0192\u0005H%\u0002\u0192\u0193\u0005@!\u0002",
    "\u0193\u0194\u00050\u0019\u0002\u0194/\u0003\u0002\u0002\u0002\u0195",
    "\u0196\u0007M\u0002\u0002\u0196\u0198\u0005|?\u0002\u0197\u0199\u0005",
    "|?\u0002\u0198\u0197\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002",
    "\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a\u019b\u0007N",
    "\u0002\u0002\u019b1\u0003\u0002\u0002\u0002\u019c\u019e\u0005\f\u0007",
    "\u0002\u019d\u019c\u0003\u0002\u0002\u0002\u019e\u01a1\u0003\u0002\u0002",
    "\u0002\u019f\u019d\u0003\u0002\u0002\u0002\u019f\u01a0\u0003\u0002\u0002",
    "\u0002\u01a0\u01a2\u0003\u0002\u0002\u0002\u01a1\u019f\u0003\u0002\u0002",
    "\u0002\u01a2\u01a5\u00054\u001b\u0002\u01a3\u01a5\u0007Q\u0002\u0002",
    "\u01a4\u019f\u0003\u0002\u0002\u0002\u01a4\u01a3\u0003\u0002\u0002\u0002",
    "\u01a53\u0003\u0002\u0002\u0002\u01a6\u01ac\u00056\u001c\u0002\u01a7",
    "\u01ac\u0005:\u001e\u0002\u01a8\u01ac\u0005\u001c\u000f\u0002\u01a9",
    "\u01ac\u0005\u0012\n\u0002\u01aa\u01ac\u0005\u0014\u000b\u0002\u01ab",
    "\u01a6\u0003\u0002\u0002\u0002\u01ab\u01a7\u0003\u0002\u0002\u0002\u01ab",
    "\u01a8\u0003\u0002\u0002\u0002\u01ab\u01a9\u0003\u0002\u0002\u0002\u01ab",
    "\u01aa\u0003\u0002\u0002\u0002\u01ac5\u0003\u0002\u0002\u0002\u01ad",
    "\u01ae\u0005H%\u0002\u01ae\u01b3\u00058\u001d\u0002\u01af\u01b0\u0007",
    "R\u0002\u0002\u01b0\u01b2\u00058\u001d\u0002\u01b1\u01af\u0003\u0002",
    "\u0002\u0002\u01b2\u01b5\u0003\u0002\u0002\u0002\u01b3\u01b1\u0003\u0002",
    "\u0002\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002\u01b4\u01b6\u0003\u0002",
    "\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b6\u01b7\u0007Q",
    "\u0002\u0002\u01b77\u0003\u0002\u0002\u0002\u01b8\u01bd\u0007w\u0002",
    "\u0002\u01b9\u01ba\u0007O\u0002\u0002\u01ba\u01bc\u0007P\u0002\u0002",
    "\u01bb\u01b9\u0003\u0002\u0002\u0002\u01bc\u01bf\u0003\u0002\u0002\u0002",
    "\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002\u0002",
    "\u01be\u01c0\u0003\u0002\u0002\u0002\u01bf\u01bd\u0003\u0002\u0002\u0002",
    "\u01c0\u01c1\u0007T\u0002\u0002\u01c1\u01c2\u0005B\"\u0002\u01c29\u0003",
    "\u0002\u0002\u0002\u01c3\u01c6\u0005H%\u0002\u01c4\u01c6\u00074\u0002",
    "\u0002\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c5\u01c4\u0003\u0002\u0002",
    "\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c7\u01c8\u0007w\u0002",
    "\u0002\u01c8\u01cd\u0005V,\u0002\u01c9\u01ca\u0007O\u0002\u0002\u01ca",
    "\u01cc\u0007P\u0002\u0002\u01cb\u01c9\u0003\u0002\u0002\u0002\u01cc",
    "\u01cf\u0003\u0002\u0002\u0002\u01cd\u01cb\u0003\u0002\u0002\u0002\u01cd",
    "\u01ce\u0003\u0002\u0002\u0002\u01ce\u01d2\u0003\u0002\u0002\u0002\u01cf",
    "\u01cd\u0003\u0002\u0002\u0002\u01d0\u01d1\u00071\u0002\u0002\u01d1",
    "\u01d3\u0005T+\u0002\u01d2\u01d0\u0003\u0002\u0002\u0002\u01d2\u01d3",
    "\u0003\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4\u01d5",
    "\u0007Q\u0002\u0002\u01d5;\u0003\u0002\u0002\u0002\u01d6\u01db\u0005",
    "> \u0002\u01d7\u01d8\u0007R\u0002\u0002\u01d8\u01da\u0005> \u0002\u01d9",
    "\u01d7\u0003\u0002\u0002\u0002\u01da\u01dd\u0003\u0002\u0002\u0002\u01db",
    "\u01d9\u0003\u0002\u0002\u0002\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc",
    "=\u0003\u0002\u0002\u0002\u01dd\u01db\u0003\u0002\u0002\u0002\u01de",
    "\u01e1\u0005@!\u0002\u01df\u01e0\u0007T\u0002\u0002\u01e0\u01e2\u0005",
    "B\"\u0002\u01e1\u01df\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003\u0002",
    "\u0002\u0002\u01e2?\u0003\u0002\u0002\u0002\u01e3\u01e8\u0007w\u0002",
    "\u0002\u01e4\u01e5\u0007O\u0002\u0002\u01e5\u01e7\u0007P\u0002\u0002",
    "\u01e6\u01e4\u0003\u0002\u0002\u0002\u01e7\u01ea\u0003\u0002\u0002\u0002",
    "\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e8\u01e9\u0003\u0002\u0002\u0002",
    "\u01e9A\u0003\u0002\u0002\u0002\u01ea\u01e8\u0003\u0002\u0002\u0002",
    "\u01eb\u01ee\u0005D#\u0002\u01ec\u01ee\u0005\u009cO\u0002\u01ed\u01eb",
    "\u0003\u0002\u0002\u0002\u01ed\u01ec\u0003\u0002\u0002\u0002\u01eeC",
    "\u0003\u0002\u0002\u0002\u01ef\u01fb\u0007M\u0002\u0002\u01f0\u01f5",
    "\u0005B\"\u0002\u01f1\u01f2\u0007R\u0002\u0002\u01f2\u01f4\u0005B\"",
    "\u0002\u01f3\u01f1\u0003\u0002\u0002\u0002\u01f4\u01f7\u0003\u0002\u0002",
    "\u0002\u01f5\u01f3\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002",
    "\u0002\u01f6\u01f9\u0003\u0002\u0002\u0002\u01f7\u01f5\u0003\u0002\u0002",
    "\u0002\u01f8\u01fa\u0007R\u0002\u0002\u01f9\u01f8\u0003\u0002\u0002",
    "\u0002\u01f9\u01fa\u0003\u0002\u0002\u0002\u01fa\u01fc\u0003\u0002\u0002",
    "\u0002\u01fb\u01f0\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002",
    "\u0002\u01fc\u01fd\u0003\u0002\u0002\u0002\u01fd\u01fe\u0007N\u0002",
    "\u0002\u01feE\u0003\u0002\u0002\u0002\u01ff\u0200\u0007w\u0002\u0002",
    "\u0200G\u0003\u0002\u0002\u0002\u0201\u0205\u0005L\'\u0002\u0202\u0204",
    "\u0005J&\u0002\u0203\u0202\u0003\u0002\u0002\u0002\u0204\u0207\u0003",
    "\u0002\u0002\u0002\u0205\u0203\u0003\u0002\u0002\u0002\u0205\u0206\u0003",
    "\u0002\u0002\u0002\u0206\u0210\u0003\u0002\u0002\u0002\u0207\u0205\u0003",
    "\u0002\u0002\u0002\u0208\u020c\u0005N(\u0002\u0209\u020b\u0005J&\u0002",
    "\u020a\u0209\u0003\u0002\u0002\u0002\u020b\u020e\u0003\u0002\u0002\u0002",
    "\u020c\u020a\u0003\u0002\u0002\u0002\u020c\u020d\u0003\u0002\u0002\u0002",
    "\u020d\u0210\u0003\u0002\u0002\u0002\u020e\u020c\u0003\u0002\u0002\u0002",
    "\u020f\u0201\u0003\u0002\u0002\u0002\u020f\u0208\u0003\u0002\u0002\u0002",
    "\u0210I\u0003\u0002\u0002\u0002\u0211\u0212\u0007O\u0002\u0002\u0212",
    "\u0213\u0007P\u0002\u0002\u0213K\u0003\u0002\u0002\u0002\u0214\u0216",
    "\u0007w\u0002\u0002\u0215\u0217\u0005P)\u0002\u0216\u0215\u0003\u0002",
    "\u0002\u0002\u0216\u0217\u0003\u0002\u0002\u0002\u0217\u021f\u0003\u0002",
    "\u0002\u0002\u0218\u0219\u0007S\u0002\u0002\u0219\u021b\u0007w\u0002",
    "\u0002\u021a\u021c\u0005P)\u0002\u021b\u021a\u0003\u0002\u0002\u0002",
    "\u021b\u021c\u0003\u0002\u0002\u0002\u021c\u021e\u0003\u0002\u0002\u0002",
    "\u021d\u0218\u0003\u0002\u0002\u0002\u021e\u0221\u0003\u0002\u0002\u0002",
    "\u021f\u021d\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002",
    "\u0220\u0225\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002\u0002\u0002",
    "\u0222\u0223\u0007\u0006\u0002\u0002\u0223\u0225\u0005P)\u0002\u0224",
    "\u0214\u0003\u0002\u0002\u0002\u0224\u0222\u0003\u0002\u0002\u0002\u0225",
    "M\u0003\u0002\u0002\u0002\u0226\u0227\t\u0005\u0002\u0002\u0227O\u0003",
    "\u0002\u0002\u0002\u0228\u0229\u0007V\u0002\u0002\u0229\u022e\u0005",
    "R*\u0002\u022a\u022b\u0007R\u0002\u0002\u022b\u022d\u0005R*\u0002\u022c",
    "\u022a\u0003\u0002\u0002\u0002\u022d\u0230\u0003\u0002\u0002\u0002\u022e",
    "\u022c\u0003\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f",
    "\u0231\u0003\u0002\u0002\u0002\u0230\u022e\u0003\u0002\u0002\u0002\u0231",
    "\u0232\u0007U\u0002\u0002\u0232Q\u0003\u0002\u0002\u0002\u0233\u023a",
    "\u0005H%\u0002\u0234\u0237\u0007Y\u0002\u0002\u0235\u0236\t\u0006\u0002",
    "\u0002\u0236\u0238\u0005H%\u0002\u0237\u0235\u0003\u0002\u0002\u0002",
    "\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u023a\u0003\u0002\u0002\u0002",
    "\u0239\u0233\u0003\u0002\u0002\u0002\u0239\u0234\u0003\u0002\u0002\u0002",
    "\u023aS\u0003\u0002\u0002\u0002\u023b\u0240\u0005b2\u0002\u023c\u023d",
    "\u0007R\u0002\u0002\u023d\u023f\u0005b2\u0002\u023e\u023c\u0003\u0002",
    "\u0002\u0002\u023f\u0242\u0003\u0002\u0002\u0002\u0240\u023e\u0003\u0002",
    "\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241U\u0003\u0002",
    "\u0002\u0002\u0242\u0240\u0003\u0002\u0002\u0002\u0243\u0245\u0007K",
    "\u0002\u0002\u0244\u0246\u0005X-\u0002\u0245\u0244\u0003\u0002\u0002",
    "\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u0247\u0003\u0002\u0002",
    "\u0002\u0247\u0248\u0007L\u0002\u0002\u0248W\u0003\u0002\u0002\u0002",
    "\u0249\u024e\u0005Z.\u0002\u024a\u024b\u0007R\u0002\u0002\u024b\u024d",
    "\u0005Z.\u0002\u024c\u024a\u0003\u0002\u0002\u0002\u024d\u0250\u0003",
    "\u0002\u0002\u0002\u024e\u024c\u0003\u0002\u0002\u0002\u024e\u024f\u0003",
    "\u0002\u0002\u0002\u024f\u0253\u0003\u0002\u0002\u0002\u0250\u024e\u0003",
    "\u0002\u0002\u0002\u0251\u0252\u0007R\u0002\u0002\u0252\u0254\u0005",
    "\\/\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0253\u0254\u0003\u0002",
    "\u0002\u0002\u0254\u0257\u0003\u0002\u0002\u0002\u0255\u0257\u0005\\",
    "/\u0002\u0256\u0249\u0003\u0002\u0002\u0002\u0256\u0255\u0003\u0002",
    "\u0002\u0002\u0257Y\u0003\u0002\u0002\u0002\u0258\u025a\u0005\u0010",
    "\t\u0002\u0259\u0258\u0003\u0002\u0002\u0002\u025a\u025d\u0003\u0002",
    "\u0002\u0002\u025b\u0259\u0003\u0002\u0002\u0002\u025b\u025c\u0003\u0002",
    "\u0002\u0002\u025c\u025e\u0003\u0002\u0002\u0002\u025d\u025b\u0003\u0002",
    "\u0002\u0002\u025e\u025f\u0005H%\u0002\u025f\u0260\u0005@!\u0002\u0260",
    "[\u0003\u0002\u0002\u0002\u0261\u0263\u0005\u0010\t\u0002\u0262\u0261",
    "\u0003\u0002\u0002\u0002\u0263\u0266\u0003\u0002\u0002\u0002\u0264\u0262",
    "\u0003\u0002\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265\u0267",
    "\u0003\u0002\u0002\u0002\u0266\u0264\u0003\u0002\u0002\u0002\u0267\u0268",
    "\u0005H%\u0002\u0268\u0269\u0007y\u0002\u0002\u0269\u026a\u0005@!\u0002",
    "\u026a]\u0003\u0002\u0002\u0002\u026b\u026c\u0005r:\u0002\u026c_\u0003",
    "\u0002\u0002\u0002\u026d\u026e\u0005r:\u0002\u026ea\u0003\u0002\u0002",
    "\u0002\u026f\u0274\u0007w\u0002\u0002\u0270\u0271\u0007S\u0002\u0002",
    "\u0271\u0273\u0007w\u0002\u0002\u0272\u0270\u0003\u0002\u0002\u0002",
    "\u0273\u0276\u0003\u0002\u0002\u0002\u0274\u0272\u0003\u0002\u0002\u0002",
    "\u0274\u0275\u0003\u0002\u0002\u0002\u0275c\u0003\u0002\u0002\u0002",
    "\u0276\u0274\u0003\u0002\u0002\u0002\u0277\u0278\t\u0007\u0002\u0002",
    "\u0278e\u0003\u0002\u0002\u0002\u0279\u027a\u0007x\u0002\u0002\u027a",
    "\u0281\u0005h5\u0002\u027b\u027e\u0007K\u0002\u0002\u027c\u027f\u0005",
    "j6\u0002\u027d\u027f\u0005n8\u0002\u027e\u027c\u0003\u0002\u0002\u0002",
    "\u027e\u027d\u0003\u0002\u0002\u0002\u027e\u027f\u0003\u0002\u0002\u0002",
    "\u027f\u0280\u0003\u0002\u0002\u0002\u0280\u0282\u0007L\u0002\u0002",
    "\u0281\u027b\u0003\u0002\u0002\u0002\u0281\u0282\u0003\u0002\u0002\u0002",
    "\u0282g\u0003\u0002\u0002\u0002\u0283\u0284\u0005b2\u0002\u0284i\u0003",
    "\u0002\u0002\u0002\u0285\u028a\u0005l7\u0002\u0286\u0287\u0007R\u0002",
    "\u0002\u0287\u0289\u0005l7\u0002\u0288\u0286\u0003\u0002\u0002\u0002",
    "\u0289\u028c\u0003\u0002\u0002\u0002\u028a\u0288\u0003\u0002\u0002\u0002",
    "\u028a\u028b\u0003\u0002\u0002\u0002\u028bk\u0003\u0002\u0002\u0002",
    "\u028c\u028a\u0003\u0002\u0002\u0002\u028d\u028e\u0007w\u0002\u0002",
    "\u028e\u028f\u0007T\u0002\u0002\u028f\u0290\u0005n8\u0002\u0290m\u0003",
    "\u0002\u0002\u0002\u0291\u0295\u0005\u009cO\u0002\u0292\u0295\u0005",
    "f4\u0002\u0293\u0295\u0005p9\u0002\u0294\u0291\u0003\u0002\u0002\u0002",
    "\u0294\u0292\u0003\u0002\u0002\u0002\u0294\u0293\u0003\u0002\u0002\u0002",
    "\u0295o\u0003\u0002\u0002\u0002\u0296\u029f\u0007M\u0002\u0002\u0297",
    "\u029c\u0005n8\u0002\u0298\u0299\u0007R\u0002\u0002\u0299\u029b\u0005",
    "n8\u0002\u029a\u0298\u0003\u0002\u0002\u0002\u029b\u029e\u0003\u0002",
    "\u0002\u0002\u029c\u029a\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002",
    "\u0002\u0002\u029d\u02a0\u0003\u0002\u0002\u0002\u029e\u029c\u0003\u0002",
    "\u0002\u0002\u029f\u0297\u0003\u0002\u0002\u0002\u029f\u02a0\u0003\u0002",
    "\u0002\u0002\u02a0\u02a2\u0003\u0002\u0002\u0002\u02a1\u02a3\u0007R",
    "\u0002\u0002\u02a2\u02a1\u0003\u0002\u0002\u0002\u02a2\u02a3\u0003\u0002",
    "\u0002\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4\u02a5\u0007N",
    "\u0002\u0002\u02a5q\u0003\u0002\u0002\u0002\u02a6\u02aa\u0007M\u0002",
    "\u0002\u02a7\u02a9\u0005t;\u0002\u02a8\u02a7\u0003\u0002\u0002\u0002",
    "\u02a9\u02ac\u0003\u0002\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002",
    "\u02aa\u02ab\u0003\u0002\u0002\u0002\u02ab\u02ad\u0003\u0002\u0002\u0002",
    "\u02ac\u02aa\u0003\u0002\u0002\u0002\u02ad\u02ae\u0007N\u0002\u0002",
    "\u02aes\u0003\u0002\u0002\u0002\u02af\u02b3\u0005v<\u0002\u02b0\u02b3",
    "\u0005z>\u0002\u02b1\u02b3\u0005\u0004\u0003\u0002\u02b2\u02af\u0003",
    "\u0002\u0002\u0002\u02b2\u02b0\u0003\u0002\u0002\u0002\u02b2\u02b1\u0003",
    "\u0002\u0002\u0002\u02b3u\u0003\u0002\u0002\u0002\u02b4\u02b5\u0005",
    "x=\u0002\u02b5\u02b6\u0007Q\u0002\u0002\u02b6w\u0003\u0002\u0002\u0002",
    "\u02b7\u02b9\u0005\u0010\t\u0002\u02b8\u02b7\u0003\u0002\u0002\u0002",
    "\u02b9\u02bc\u0003\u0002\u0002\u0002\u02ba\u02b8\u0003\u0002\u0002\u0002",
    "\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bd\u0003\u0002\u0002\u0002",
    "\u02bc\u02ba\u0003\u0002\u0002\u0002\u02bd\u02be\u0005H%\u0002\u02be",
    "\u02bf\u0005<\u001f\u0002\u02bfy\u0003\u0002\u0002\u0002\u02c0\u02ff",
    "\u0005r:\u0002\u02c1\u02c2\u0007\u001c\u0002\u0002\u02c2\u02c3\u0005",
    "\u0090I\u0002\u02c3\u02c6\u0005z>\u0002\u02c4\u02c5\u0007\u0015\u0002",
    "\u0002\u02c5\u02c7\u0005z>\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002",
    "\u02c6\u02c7\u0003\u0002\u0002\u0002\u02c7\u02ff\u0003\u0002\u0002\u0002",
    "\u02c8\u02c9\u0007\u001b\u0002\u0002\u02c9\u02ca\u0007K\u0002\u0002",
    "\u02ca\u02cb\u0005\u0088E\u0002\u02cb\u02cc\u0007L\u0002\u0002\u02cc",
    "\u02cd\u0005z>\u0002\u02cd\u02ff\u0003\u0002\u0002\u0002\u02ce\u02cf",
    "\u00076\u0002\u0002\u02cf\u02d0\u0005\u0090I\u0002\u02d0\u02d1\u0005",
    "z>\u0002\u02d1\u02ff\u0003\u0002\u0002\u0002\u02d2\u02d3\u0007\u0013",
    "\u0002\u0002\u02d3\u02d4\u0005z>\u0002\u02d4\u02d5\u00076\u0002\u0002",
    "\u02d5\u02d6\u0005\u0090I\u0002\u02d6\u02ff\u0003\u0002\u0002\u0002",
    "\u02d7\u02d8\u00073\u0002\u0002\u02d8\u02e2\u0005r:\u0002\u02d9\u02db",
    "\u0005\u0082B\u0002\u02da\u02d9\u0003\u0002\u0002\u0002\u02db\u02dc",
    "\u0003\u0002\u0002\u0002\u02dc\u02da\u0003\u0002\u0002\u0002\u02dc\u02dd",
    "\u0003\u0002\u0002\u0002\u02dd\u02df\u0003\u0002\u0002\u0002\u02de\u02e0",
    "\u0005\u0086D\u0002\u02df\u02de\u0003\u0002\u0002\u0002\u02df\u02e0",
    "\u0003\u0002\u0002\u0002\u02e0\u02e3\u0003\u0002\u0002\u0002\u02e1\u02e3",
    "\u0005\u0086D\u0002\u02e2\u02da\u0003\u0002\u0002\u0002\u02e2\u02e1",
    "\u0003\u0002\u0002\u0002\u02e3\u02ff\u0003\u0002\u0002\u0002\u02e4\u02e6",
    "\u0007*\u0002\u0002\u02e5\u02e7\u0005\u009cO\u0002\u02e6\u02e5\u0003",
    "\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7\u02e8\u0003",
    "\u0002\u0002\u0002\u02e8\u02ff\u0007Q\u0002\u0002\u02e9\u02ea\u0007",
    "0\u0002\u0002\u02ea\u02eb\u0005\u009cO\u0002\u02eb\u02ec\u0007Q\u0002",
    "\u0002\u02ec\u02ff\u0003\u0002\u0002\u0002\u02ed\u02ef\u0007\u000b\u0002",
    "\u0002\u02ee\u02f0\u0007w\u0002\u0002\u02ef\u02ee\u0003\u0002\u0002",
    "\u0002\u02ef\u02f0\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002\u0002",
    "\u0002\u02f1\u02ff\u0007Q\u0002\u0002\u02f2\u02f4\u0007\u0011\u0002",
    "\u0002\u02f3\u02f5\u0007w\u0002\u0002\u02f4\u02f3\u0003\u0002\u0002",
    "\u0002\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002",
    "\u0002\u02f6\u02ff\u0007Q\u0002\u0002\u02f7\u02ff\u0007Q\u0002\u0002",
    "\u02f8\u02f9\u0005\u0094K\u0002\u02f9\u02fa\u0007Q\u0002\u0002\u02fa",
    "\u02ff\u0003\u0002\u0002\u0002\u02fb\u02fc\u0005\u009aN\u0002\u02fc",
    "\u02fd\u0007Q\u0002\u0002\u02fd\u02ff\u0003\u0002\u0002\u0002\u02fe",
    "\u02c0\u0003\u0002\u0002\u0002\u02fe\u02c1\u0003\u0002\u0002\u0002\u02fe",
    "\u02c8\u0003\u0002\u0002\u0002\u02fe\u02ce\u0003\u0002\u0002\u0002\u02fe",
    "\u02d2\u0003\u0002\u0002\u0002\u02fe\u02d7\u0003\u0002\u0002\u0002\u02fe",
    "\u02e4\u0003\u0002\u0002\u0002\u02fe\u02e9\u0003\u0002\u0002\u0002\u02fe",
    "\u02ed\u0003\u0002\u0002\u0002\u02fe\u02f2\u0003\u0002\u0002\u0002\u02fe",
    "\u02f7\u0003\u0002\u0002\u0002\u02fe\u02f8\u0003\u0002\u0002\u0002\u02fe",
    "\u02fb\u0003\u0002\u0002\u0002\u02ff{\u0003\u0002\u0002\u0002\u0300",
    "\u0302\u0005\f\u0007\u0002\u0301\u0300\u0003\u0002\u0002\u0002\u0302",
    "\u0305\u0003\u0002\u0002\u0002\u0303\u0301\u0003\u0002\u0002\u0002\u0303",
    "\u0304\u0003\u0002\u0002\u0002\u0304\u0308\u0003\u0002\u0002\u0002\u0305",
    "\u0303\u0003\u0002\u0002\u0002\u0306\u0309\u0005~@\u0002\u0307\u0309",
    "\u0005\u0080A\u0002\u0308\u0306\u0003\u0002\u0002\u0002\u0308\u0307",
    "\u0003\u0002\u0002\u0002\u0309}\u0003\u0002\u0002\u0002\u030a\u030d",
    "\u0007\u0007\u0002\u0002\u030b\u030e\u0007Q\u0002\u0002\u030c\u030e",
    "\u0005^0\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030d\u030c\u0003",
    "\u0002\u0002\u0002\u030e\u007f\u0003\u0002\u0002\u0002\u030f\u0312\u0007",
    "\u0006\u0002\u0002\u0310\u0313\u0007Q\u0002\u0002\u0311\u0313\u0005",
    "^0\u0002\u0312\u0310\u0003\u0002\u0002\u0002\u0312\u0311\u0003\u0002",
    "\u0002\u0002\u0313\u0081\u0003\u0002\u0002\u0002\u0314\u0315\u0007\r",
    "\u0002\u0002\u0315\u0319\u0007K\u0002\u0002\u0316\u0318\u0005\u0010",
    "\t\u0002\u0317\u0316\u0003\u0002\u0002\u0002\u0318\u031b\u0003\u0002",
    "\u0002\u0002\u0319\u0317\u0003\u0002\u0002\u0002\u0319\u031a\u0003\u0002",
    "\u0002\u0002\u031a\u031c\u0003\u0002\u0002\u0002\u031b\u0319\u0003\u0002",
    "\u0002\u0002\u031c\u031d\u0005\u0084C\u0002\u031d\u031e\u0007w\u0002",
    "\u0002\u031e\u031f\u0007L\u0002\u0002\u031f\u0320\u0005r:\u0002\u0320",
    "\u0083\u0003\u0002\u0002\u0002\u0321\u0326\u0005b2\u0002\u0322\u0323",
    "\u0007h\u0002\u0002\u0323\u0325\u0005b2\u0002\u0324\u0322\u0003\u0002",
    "\u0002\u0002\u0325\u0328\u0003\u0002\u0002\u0002\u0326\u0324\u0003\u0002",
    "\u0002\u0002\u0326\u0327\u0003\u0002\u0002\u0002\u0327\u0085\u0003\u0002",
    "\u0002\u0002\u0328\u0326\u0003\u0002\u0002\u0002\u0329\u032a\u0007\u0019",
    "\u0002\u0002\u032a\u032b\u0005r:\u0002\u032b\u0087\u0003\u0002\u0002",
    "\u0002\u032c\u0339\u0005\u008cG\u0002\u032d\u032f\u0005\u008aF\u0002",
    "\u032e\u032d\u0003\u0002\u0002\u0002\u032e\u032f\u0003\u0002\u0002\u0002",
    "\u032f\u0330\u0003\u0002\u0002\u0002\u0330\u0332\u0007Q\u0002\u0002",
    "\u0331\u0333\u0005\u009cO\u0002\u0332\u0331\u0003\u0002\u0002\u0002",
    "\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0334\u0003\u0002\u0002\u0002",
    "\u0334\u0336\u0007Q\u0002\u0002\u0335\u0337\u0005\u008eH\u0002\u0336",
    "\u0335\u0003\u0002\u0002\u0002\u0336\u0337\u0003\u0002\u0002\u0002\u0337",
    "\u0339\u0003\u0002\u0002\u0002\u0338\u032c\u0003\u0002\u0002\u0002\u0338",
    "\u032e\u0003\u0002\u0002\u0002\u0339\u0089\u0003\u0002\u0002\u0002\u033a",
    "\u033d\u0005x=\u0002\u033b\u033d\u0005\u0092J\u0002\u033c\u033a\u0003",
    "\u0002\u0002\u0002\u033c\u033b\u0003\u0002\u0002\u0002\u033d\u008b\u0003",
    "\u0002\u0002\u0002\u033e\u0340\u0005\u0010\t\u0002\u033f\u033e\u0003",
    "\u0002\u0002\u0002\u0340\u0343\u0003\u0002\u0002\u0002\u0341\u033f\u0003",
    "\u0002\u0002\u0002\u0341\u0342\u0003\u0002\u0002\u0002\u0342\u0344\u0003",
    "\u0002\u0002\u0002\u0343\u0341\u0003\u0002\u0002\u0002\u0344\u0345\u0005",
    "H%\u0002\u0345\u0346\u0005@!\u0002\u0346\u0347\u0007Z\u0002\u0002\u0347",
    "\u0348\u0005\u009cO\u0002\u0348\u008d\u0003\u0002\u0002\u0002\u0349",
    "\u034a\u0005\u0092J\u0002\u034a\u008f\u0003\u0002\u0002\u0002\u034b",
    "\u034c\u0007K\u0002\u0002\u034c\u034d\u0005\u009cO\u0002\u034d\u034e",
    "\u0007L\u0002\u0002\u034e\u0091\u0003\u0002\u0002\u0002\u034f\u0354",
    "\u0005\u009cO\u0002\u0350\u0351\u0007R\u0002\u0002\u0351\u0353\u0005",
    "\u009cO\u0002\u0352\u0350\u0003\u0002\u0002\u0002\u0353\u0356\u0003",
    "\u0002\u0002\u0002\u0354\u0352\u0003\u0002\u0002\u0002\u0354\u0355\u0003",
    "\u0002\u0002\u0002\u0355\u0093\u0003\u0002\u0002\u0002\u0356\u0354\u0003",
    "\u0002\u0002\u0002\u0357\u0358\u0005\u009cO\u0002\u0358\u0095\u0003",
    "\u0002\u0002\u0002\u0359\u035a\u0005\u009cO\u0002\u035a\u0097\u0003",
    "\u0002\u0002\u0002\u035b\u035c\t\u0003\u0002\u0002\u035c\u035d\u0005",
    "\u009cO\u0002\u035d\u0099\u0003\u0002\u0002\u0002\u035e\u035f\u0005",
    "\u0098M\u0002\u035f\u009b\u0003\u0002\u0002\u0002\u0360\u0361\bO\u0001",
    "\u0002\u0361\u036e\u0005\u009eP\u0002\u0362\u0363\u0007%\u0002\u0002",
    "\u0363\u036e\u0005\u00a0Q\u0002\u0364\u0365\u0007K\u0002\u0002\u0365",
    "\u0366\u0005H%\u0002\u0366\u0367\u0007L\u0002\u0002\u0367\u0368\u0005",
    "\u009cO\u0013\u0368\u036e\u0003\u0002\u0002\u0002\u0369\u036a\t\b\u0002",
    "\u0002\u036a\u036e\u0005\u009cO\u0011\u036b\u036c\t\t\u0002\u0002\u036c",
    "\u036e\u0005\u009cO\u0010\u036d\u0360\u0003\u0002\u0002\u0002\u036d",
    "\u0362\u0003\u0002\u0002\u0002\u036d\u0364\u0003\u0002\u0002\u0002\u036d",
    "\u0369\u0003\u0002\u0002\u0002\u036d\u036b\u0003\u0002\u0002\u0002\u036e",
    "\u03b6\u0003\u0002\u0002\u0002\u036f\u0370\f\u000f\u0002\u0002\u0370",
    "\u0371\t\n\u0002\u0002\u0371\u03b5\u0005\u009cO\u0010\u0372\u0373\f",
    "\u000e\u0002\u0002\u0373\u0374\t\u000b\u0002\u0002\u0374\u03b5\u0005",
    "\u009cO\u000f\u0375\u037d\f\r\u0002\u0002\u0376\u0377\u0007V\u0002\u0002",
    "\u0377\u037e\u0007V\u0002\u0002\u0378\u0379\u0007U\u0002\u0002\u0379",
    "\u037a\u0007U\u0002\u0002\u037a\u037e\u0007U\u0002\u0002\u037b\u037c",
    "\u0007U\u0002\u0002\u037c\u037e\u0007U\u0002\u0002\u037d\u0376\u0003",
    "\u0002\u0002\u0002\u037d\u0378\u0003\u0002\u0002\u0002\u037d\u037b\u0003",
    "\u0002\u0002\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f\u03b5\u0005",
    "\u009cO\u000e\u0380\u0381\f\f\u0002\u0002\u0381\u0382\t\f\u0002\u0002",
    "\u0382\u03b5\u0005\u009cO\r\u0383\u0384\f\n\u0002\u0002\u0384\u0385",
    "\t\r\u0002\u0002\u0385\u03b5\u0005\u009cO\u000b\u0386\u0387\f\t\u0002",
    "\u0002\u0387\u0388\u0007g\u0002\u0002\u0388\u03b5\u0005\u009cO\n\u0389",
    "\u038a\f\b\u0002\u0002\u038a\u038b\u0007i\u0002\u0002\u038b\u03b5\u0005",
    "\u009cO\t\u038c\u038d\f\u0007\u0002\u0002\u038d\u038e\u0007h\u0002\u0002",
    "\u038e\u03b5\u0005\u009cO\b\u038f\u0390\f\u0006\u0002\u0002\u0390\u0391",
    "\u0007_\u0002\u0002\u0391\u03b5\u0005\u009cO\u0007\u0392\u0393\f\u0005",
    "\u0002\u0002\u0393\u0394\u0007`\u0002\u0002\u0394\u03b5\u0005\u009c",
    "O\u0006\u0395\u0396\f\u0004\u0002\u0002\u0396\u0397\u0007Y\u0002\u0002",
    "\u0397\u0398\u0005\u009cO\u0002\u0398\u0399\u0007Z\u0002\u0002\u0399",
    "\u039a\u0005\u009cO\u0005\u039a\u03b5\u0003\u0002\u0002\u0002\u039b",
    "\u039c\f\u0003\u0002\u0002\u039c\u039d\t\u000e\u0002\u0002\u039d\u03b5",
    "\u0005\u009cO\u0003\u039e\u039f\f\u0018\u0002\u0002\u039f\u03a0\u0007",
    "S\u0002\u0002\u03a0\u03b5\u0005\u00bc_\u0002\u03a1\u03a2\f\u0017\u0002",
    "\u0002\u03a2\u03a3\u0007S\u0002\u0002\u03a3\u03b5\u0005\u00aeX\u0002",
    "\u03a4\u03a5\f\u0016\u0002\u0002\u03a5\u03a6\u0007O\u0002\u0002\u03a6",
    "\u03a7\u0005\u009cO\u0002\u03a7\u03a8\u0007P\u0002\u0002\u03a8\u03b5",
    "\u0003\u0002\u0002\u0002\u03a9\u03aa\f\u0015\u0002\u0002\u03aa\u03ac",
    "\u0007K\u0002\u0002\u03ab\u03ad\u0005\u0092J\u0002\u03ac\u03ab\u0003",
    "\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002\u0002\u0002\u03ad\u03ae\u0003",
    "\u0002\u0002\u0002\u03ae\u03b5\u0007L\u0002\u0002\u03af\u03b0\f\u0012",
    "\u0002\u0002\u03b0\u03b5\t\u000f\u0002\u0002\u03b1\u03b2\f\u000b\u0002",
    "\u0002\u03b2\u03b3\u0007 \u0002\u0002\u03b3\u03b5\u0005H%\u0002\u03b4",
    "\u036f\u0003\u0002\u0002\u0002\u03b4\u0372\u0003\u0002\u0002\u0002\u03b4",
    "\u0375\u0003\u0002\u0002\u0002\u03b4\u0380\u0003\u0002\u0002\u0002\u03b4",
    "\u0383\u0003\u0002\u0002\u0002\u03b4\u0386\u0003\u0002\u0002\u0002\u03b4",
    "\u0389\u0003\u0002\u0002\u0002\u03b4\u038c\u0003\u0002\u0002\u0002\u03b4",
    "\u038f\u0003\u0002\u0002\u0002\u03b4\u0392\u0003\u0002\u0002\u0002\u03b4",
    "\u0395\u0003\u0002\u0002\u0002\u03b4\u039b\u0003\u0002\u0002\u0002\u03b4",
    "\u039e\u0003\u0002\u0002\u0002\u03b4\u03a1\u0003\u0002\u0002\u0002\u03b4",
    "\u03a4\u0003\u0002\u0002\u0002\u03b4\u03a9\u0003\u0002\u0002\u0002\u03b4",
    "\u03af\u0003\u0002\u0002\u0002\u03b4\u03b1\u0003\u0002\u0002\u0002\u03b5",
    "\u03b8\u0003\u0002\u0002\u0002\u03b6\u03b4\u0003\u0002\u0002\u0002\u03b6",
    "\u03b7\u0003\u0002\u0002\u0002\u03b7\u009d\u0003\u0002\u0002\u0002\u03b8",
    "\u03b6\u0003\u0002\u0002\u0002\u03b9\u03ba\u0007K\u0002\u0002\u03ba",
    "\u03bb\u0005\u009cO\u0002\u03bb\u03bc\u0007L\u0002\u0002\u03bc\u03d0",
    "\u0003\u0002\u0002\u0002\u03bd\u03d0\u0007/\u0002\u0002\u03be\u03d0",
    "\u0007-\u0002\u0002\u03bf\u03d0\u0005d3\u0002\u03c0\u03d0\u0007w\u0002",
    "\u0002\u03c1\u03c2\u0005H%\u0002\u03c2\u03c3\u0007S\u0002\u0002\u03c3",
    "\u03c4\u0007\u000f\u0002\u0002\u03c4\u03d0\u0003\u0002\u0002\u0002\u03c5",
    "\u03c6\u00074\u0002\u0002\u03c6\u03c7\u0007S\u0002\u0002\u03c7\u03d0",
    "\u0007\u000f\u0002\u0002\u03c8\u03cc\u0005\u00b0Y\u0002\u03c9\u03cd",
    "\u0005\u00b8]\u0002\u03ca\u03cb\u0007/\u0002\u0002\u03cb\u03cd\u0005",
    "\u00ba^\u0002\u03cc\u03c9\u0003\u0002\u0002\u0002\u03cc\u03ca\u0003",
    "\u0002\u0002\u0002\u03cd\u03d0\u0003\u0002\u0002\u0002\u03ce\u03d0\u0007",
    "\u0003\u0002\u0002\u03cf\u03b9\u0003\u0002\u0002\u0002\u03cf\u03bd\u0003",
    "\u0002\u0002\u0002\u03cf\u03be\u0003\u0002\u0002\u0002\u03cf\u03bf\u0003",
    "\u0002\u0002\u0002\u03cf\u03c0\u0003\u0002\u0002\u0002\u03cf\u03c1\u0003",
    "\u0002\u0002\u0002\u03cf\u03c5\u0003\u0002\u0002\u0002\u03cf\u03c8\u0003",
    "\u0002\u0002\u0002\u03cf\u03ce\u0003\u0002\u0002\u0002\u03d0\u009f\u0003",
    "\u0002\u0002\u0002\u03d1\u03d2\u0005\u00b0Y\u0002\u03d2\u03d3\u0005",
    "\u00a2R\u0002\u03d3\u03d4\u0005\u00acW\u0002\u03d4\u03dd\u0003\u0002",
    "\u0002\u0002\u03d5\u03da\u0005\u00a2R\u0002\u03d6\u03db\u0005\u00a6",
    "T\u0002\u03d7\u03db\u0005\u00acW\u0002\u03d8\u03db\u0005\u00a8U\u0002",
    "\u03d9\u03db\u0005\u00aaV\u0002\u03da\u03d6\u0003\u0002\u0002\u0002",
    "\u03da\u03d7\u0003\u0002\u0002\u0002\u03da\u03d8\u0003\u0002\u0002\u0002",
    "\u03da\u03d9\u0003\u0002\u0002\u0002\u03db\u03dd\u0003\u0002\u0002\u0002",
    "\u03dc\u03d1\u0003\u0002\u0002\u0002\u03dc\u03d5\u0003\u0002\u0002\u0002",
    "\u03dd\u00a1\u0003\u0002\u0002\u0002\u03de\u03e0\u0007w\u0002\u0002",
    "\u03df\u03e1\u0005\u00b2Z\u0002\u03e0\u03df\u0003\u0002\u0002\u0002",
    "\u03e0\u03e1\u0003\u0002\u0002\u0002\u03e1\u03e9\u0003\u0002\u0002\u0002",
    "\u03e2\u03e3\u0007S\u0002\u0002\u03e3\u03e5\u0007w\u0002\u0002\u03e4",
    "\u03e6\u0005\u00b2Z\u0002\u03e5\u03e4\u0003\u0002\u0002\u0002\u03e5",
    "\u03e6\u0003\u0002\u0002\u0002\u03e6\u03e8\u0003\u0002\u0002\u0002\u03e7",
    "\u03e2\u0003\u0002\u0002\u0002\u03e8\u03eb\u0003\u0002\u0002\u0002\u03e9",
    "\u03e7\u0003\u0002\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea",
    "\u03f0\u0003\u0002\u0002\u0002\u03eb\u03e9\u0003\u0002\u0002\u0002\u03ec",
    "\u03f0\u0005N(\u0002\u03ed\u03ee\u0007\u0006\u0002\u0002\u03ee\u03f0",
    "\u0005\u00b2Z\u0002\u03ef\u03de\u0003\u0002\u0002\u0002\u03ef\u03ec",
    "\u0003\u0002\u0002\u0002\u03ef\u03ed\u0003\u0002\u0002\u0002\u03f0\u00a3",
    "\u0003\u0002\u0002\u0002\u03f1\u03f3\u0007w\u0002\u0002\u03f2\u03f4",
    "\u0005\u00b4[\u0002\u03f3\u03f2\u0003\u0002\u0002\u0002\u03f3\u03f4",
    "\u0003\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002\u0002\u03f5\u03f6",
    "\u0005\u00acW\u0002\u03f6\u00a5\u0003\u0002\u0002\u0002\u03f7\u03fb",
    "\u0005J&\u0002\u03f8\u03fa\u0005J&\u0002\u03f9\u03f8\u0003\u0002\u0002",
    "\u0002\u03fa\u03fd\u0003\u0002\u0002\u0002\u03fb\u03f9\u0003\u0002\u0002",
    "\u0002\u03fb\u03fc\u0003\u0002\u0002\u0002\u03fc\u03fe\u0003\u0002\u0002",
    "\u0002\u03fd\u03fb\u0003\u0002\u0002\u0002\u03fe\u03ff\u0005D#\u0002",
    "\u03ff\u0413\u0003\u0002\u0002\u0002\u0400\u0401\u0007O\u0002\u0002",
    "\u0401\u0402\u0005\u009cO\u0002\u0402\u0409\u0007P\u0002\u0002\u0403",
    "\u0404\u0007O\u0002\u0002\u0404\u0405\u0005\u009cO\u0002\u0405\u0406",
    "\u0007P\u0002\u0002\u0406\u0408\u0003\u0002\u0002\u0002\u0407\u0403",
    "\u0003\u0002\u0002\u0002\u0408\u040b\u0003\u0002\u0002\u0002\u0409\u0407",
    "\u0003\u0002\u0002\u0002\u0409\u040a\u0003\u0002\u0002\u0002\u040a\u040f",
    "\u0003\u0002\u0002\u0002\u040b\u0409\u0003\u0002\u0002\u0002\u040c\u040e",
    "\u0005J&\u0002\u040d\u040c\u0003\u0002\u0002\u0002\u040e\u0411\u0003",
    "\u0002\u0002\u0002\u040f\u040d\u0003\u0002\u0002\u0002\u040f\u0410\u0003",
    "\u0002\u0002\u0002\u0410\u0413\u0003\u0002\u0002\u0002\u0411\u040f\u0003",
    "\u0002\u0002\u0002\u0412\u03f7\u0003\u0002\u0002\u0002\u0412\u0400\u0003",
    "\u0002\u0002\u0002\u0413\u00a7\u0003\u0002\u0002\u0002\u0414\u0417\u0007",
    "M\u0002\u0002\u0415\u0418\u0007w\u0002\u0002\u0416\u0418\u0005\u009c",
    "O\u0002\u0417\u0415\u0003\u0002\u0002\u0002\u0417\u0416\u0003\u0002",
    "\u0002\u0002\u0418\u0419\u0003\u0002\u0002\u0002\u0419\u041c\u0007v",
    "\u0002\u0002\u041a\u041d\u0005d3\u0002\u041b\u041d\u0005\u009cO\u0002",
    "\u041c\u041a\u0003\u0002\u0002\u0002\u041c\u041b\u0003\u0002\u0002\u0002",
    "\u041d\u042a\u0003\u0002\u0002\u0002\u041e\u0421\u0007R\u0002\u0002",
    "\u041f\u0422\u0007w\u0002\u0002\u0420\u0422\u0005\u009cO\u0002\u0421",
    "\u041f\u0003\u0002\u0002\u0002\u0421\u0420\u0003\u0002\u0002\u0002\u0422",
    "\u0423\u0003\u0002\u0002\u0002\u0423\u0426\u0007v\u0002\u0002\u0424",
    "\u0427\u0005d3\u0002\u0425\u0427\u0005\u009cO\u0002\u0426\u0424\u0003",
    "\u0002\u0002\u0002\u0426\u0425\u0003\u0002\u0002\u0002\u0427\u0429\u0003",
    "\u0002\u0002\u0002\u0428\u041e\u0003\u0002\u0002\u0002\u0429\u042c\u0003",
    "\u0002\u0002\u0002\u042a\u0428\u0003\u0002\u0002\u0002\u042a\u042b\u0003",
    "\u0002\u0002\u0002\u042b\u042d\u0003\u0002\u0002\u0002\u042c\u042a\u0003",
    "\u0002\u0002\u0002\u042d\u042e\u0007N\u0002\u0002\u042e\u00a9\u0003",
    "\u0002\u0002\u0002\u042f\u0432\u0007M\u0002\u0002\u0430\u0433\u0005",
    "d3\u0002\u0431\u0433\u0005\u009cO\u0002\u0432\u0430\u0003\u0002\u0002",
    "\u0002\u0432\u0431\u0003\u0002\u0002\u0002\u0433\u043b\u0003\u0002\u0002",
    "\u0002\u0434\u0437\u0007R\u0002\u0002\u0435\u0438\u0005d3\u0002\u0436",
    "\u0438\u0005\u009cO\u0002\u0437\u0435\u0003\u0002\u0002\u0002\u0437",
    "\u0436\u0003\u0002\u0002\u0002\u0438\u043a\u0003\u0002\u0002\u0002\u0439",
    "\u0434\u0003\u0002\u0002\u0002\u043a\u043d\u0003\u0002\u0002\u0002\u043b",
    "\u0439\u0003\u0002\u0002\u0002\u043b\u043c\u0003\u0002\u0002\u0002\u043c",
    "\u043e\u0003\u0002\u0002\u0002\u043d\u043b\u0003\u0002\u0002\u0002\u043e",
    "\u043f\u0007N\u0002\u0002\u043f\u00ab\u0003\u0002\u0002\u0002\u0440",
    "\u0442\u0005\u00ba^\u0002\u0441\u0443\u0005 \u0011\u0002\u0442\u0441",
    "\u0003\u0002\u0002\u0002\u0442\u0443\u0003\u0002\u0002\u0002\u0443\u00ad",
    "\u0003\u0002\u0002\u0002\u0444\u0445\u0005\u00b0Y\u0002\u0445\u0446",
    "\u0005\u00b8]\u0002\u0446\u00af\u0003\u0002\u0002\u0002\u0447\u0448",
    "\u0007V\u0002\u0002\u0448\u0449\u0005\u001e\u0010\u0002\u0449\u044a",
    "\u0007U\u0002\u0002\u044a\u00b1\u0003\u0002\u0002\u0002\u044b\u044c",
    "\u0007V\u0002\u0002\u044c\u044f\u0007U\u0002\u0002\u044d\u044f\u0005",
    "P)\u0002\u044e\u044b\u0003\u0002\u0002\u0002\u044e\u044d\u0003\u0002",
    "\u0002\u0002\u044f\u00b3\u0003\u0002\u0002\u0002\u0450\u0451\u0007V",
    "\u0002\u0002\u0451\u0454\u0007U\u0002\u0002\u0452\u0454\u0005\u00b0",
    "Y\u0002\u0453\u0450\u0003\u0002\u0002\u0002\u0453\u0452\u0003\u0002",
    "\u0002\u0002\u0454\u00b5\u0003\u0002\u0002\u0002\u0455\u045c\u0005\u00ba",
    "^\u0002\u0456\u0457\u0007S\u0002\u0002\u0457\u0459\u0007w\u0002\u0002",
    "\u0458\u045a\u0005\u00ba^\u0002\u0459\u0458\u0003\u0002\u0002\u0002",
    "\u0459\u045a\u0003\u0002\u0002\u0002\u045a\u045c\u0003\u0002\u0002\u0002",
    "\u045b\u0455\u0003\u0002\u0002\u0002\u045b\u0456\u0003\u0002\u0002\u0002",
    "\u045c\u00b7\u0003\u0002\u0002\u0002\u045d\u045e\u0007-\u0002\u0002",
    "\u045e\u0462\u0005\u00b6\\\u0002\u045f\u0460\u0007w\u0002\u0002\u0460",
    "\u0462\u0005\u00ba^\u0002\u0461\u045d\u0003\u0002\u0002\u0002\u0461",
    "\u045f\u0003\u0002\u0002\u0002\u0462\u00b9\u0003\u0002\u0002\u0002\u0463",
    "\u0465\u0007K\u0002\u0002\u0464\u0466\u0005\u0092J\u0002\u0465\u0464",
    "\u0003\u0002\u0002\u0002\u0465\u0466\u0003\u0002\u0002\u0002\u0466\u0467",
    "\u0003\u0002\u0002\u0002\u0467\u0468\u0007L\u0002\u0002\u0468\u00bb",
    "\u0003\u0002\u0002\u0002\u0469\u046a\t\u0010\u0002\u0002\u046a\u00bd",
    "\u0003\u0002\u0002\u0002\u0085\u00c4\u00cb\u00d2\u00d8\u00e8\u00f0\u00f4",
    "\u00f8\u00fe\u0102\u010a\u010e\u0111\u0114\u011d\u0123\u0128\u012b\u0131",
    "\u0138\u0141\u0148\u0151\u0158\u015e\u0162\u016b\u016e\u0172\u017a\u017f",
    "\u0183\u0189\u0198\u019f\u01a4\u01ab\u01b3\u01bd\u01c5\u01cd\u01d2\u01db",
    "\u01e1\u01e8\u01ed\u01f5\u01f9\u01fb\u0205\u020c\u020f\u0216\u021b\u021f",
    "\u0224\u022e\u0237\u0239\u0240\u0245\u024e\u0253\u0256\u025b\u0264\u0274",
    "\u027e\u0281\u028a\u0294\u029c\u029f\u02a2\u02aa\u02b2\u02ba\u02c6\u02dc",
    "\u02df\u02e2\u02e6\u02ef\u02f4\u02fe\u0303\u0308\u030d\u0312\u0319\u0326",
    "\u032e\u0332\u0336\u0338\u033c\u0341\u0354\u036d\u037d\u03ac\u03b4\u03b6",
    "\u03cc\u03cf\u03da\u03dc\u03e0\u03e5\u03e9\u03ef\u03f3\u03fb\u0409\u040f",
    "\u0412\u0417\u041c\u0421\u0426\u042a\u0432\u0437\u043b\u0442\u044e\u0453",
    "\u0459\u045b\u0461\u0465"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
                     "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", 
                     "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", 
                     "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", 
                     "'|'", "'^'", "'%'", "'+='", "'-='", "'*='", "'/='", 
                     "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='", 
                     "'=>'", null, "'@'", "'...'", null, null, "'/**'", 
                     null, "'/*'", null, "'''" ];

var symbolicNames = [ null, "SoqlLiteral", "OVERRIDE", "VIRTUAL", "SET", 
                      "GET", "DATABASE", "ABSTRACT", "BOOLEAN", "BREAK", 
                      "BYTE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", 
                      "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", 
                      "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
                      "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", 
                      "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", 
                      "PUBLIC", "RETURN", "SHORT", "STATIC", "SUPER", "SYNCHRONIZED", 
                      "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", 
                      "VOLATILE", "WHILE", "GLOBAL", "WEBSERVICE", "APEX_WITH_SHARING", 
                      "APEX_WITHOUT_SHARING", "SELECT", "DB_INSERT", "DB_UPSERT", 
                      "DB_UPDATE", "DB_DELETE", "DB_UNDELETE", "TESTMETHOD", 
                      "TRIGGER", "ON", "BEFORE", "AFTER", "IntegerLiteral", 
                      "FloatingPointLiteral", "BooleanLiteral", "StringLiteral", 
                      "NullLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                      "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", 
                      "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
                      "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", 
                      "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", 
                      "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                      "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "LAMBDA_LIKE", "Identifier", "AT", "ELLIPSIS", "WS", 
                      "APEXDOC_COMMENT", "APEXDOC_COMMENT_START", "COMMENT", 
                      "COMMENT_START", "LINE_COMMENT", "QUOTE" ];

var ruleNames =  [ "compilationUnit", "typeDeclaration", "triggerDeclaration", 
                   "triggerTimings", "triggerTiming", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "enumDeclaration", 
                   "enumConstants", "enumConstant", "enumBodyDeclarations", 
                   "interfaceDeclaration", "typeList", "classBody", "interfaceBody", 
                   "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
                   "constructorDeclaration", "fieldDeclaration", "propertyDeclaration", 
                   "propertyBodyDeclaration", "interfaceBodyDeclaration", 
                   "interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
                   "interfaceMethodDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "enumConstantName", "type", "typedArray", 
                   "classOrInterfaceType", "primitiveType", "typeArguments", 
                   "typeArgument", "qualifiedNameList", "formalParameters", 
                   "formalParameterList", "formalParameter", "lastFormalParameter", 
                   "methodBody", "constructorBody", "qualifiedName", "literal", 
                   "annotation", "annotationName", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "block", "blockStatement", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "statement", "propertyBlock", 
                   "getter", "setter", "catchClause", "catchType", "finallyBlock", 
                   "forControl", "forInit", "enhancedForControl", "forUpdate", 
                   "parExpression", "expressionList", "statementExpression", 
                   "constantExpression", "apexDbExpressionShort", "apexDbExpression", 
                   "expression", "primary", "creator", "createdName", "innerCreator", 
                   "arrayCreatorRest", "mapCreatorRest", "setCreatorRest", 
                   "classCreatorRest", "explicitGenericInvocation", "nonWildcardTypeArguments", 
                   "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments", 
                   "accessor" ];

function apexParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

apexParser.prototype = Object.create(antlr4.Parser.prototype);
apexParser.prototype.constructor = apexParser;

Object.defineProperty(apexParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

apexParser.EOF = antlr4.Token.EOF;
apexParser.SoqlLiteral = 1;
apexParser.OVERRIDE = 2;
apexParser.VIRTUAL = 3;
apexParser.SET = 4;
apexParser.GET = 5;
apexParser.DATABASE = 6;
apexParser.ABSTRACT = 7;
apexParser.BOOLEAN = 8;
apexParser.BREAK = 9;
apexParser.BYTE = 10;
apexParser.CATCH = 11;
apexParser.CHAR = 12;
apexParser.CLASS = 13;
apexParser.CONST = 14;
apexParser.CONTINUE = 15;
apexParser.DEFAULT = 16;
apexParser.DO = 17;
apexParser.DOUBLE = 18;
apexParser.ELSE = 19;
apexParser.ENUM = 20;
apexParser.EXTENDS = 21;
apexParser.FINAL = 22;
apexParser.FINALLY = 23;
apexParser.FLOAT = 24;
apexParser.FOR = 25;
apexParser.IF = 26;
apexParser.GOTO = 27;
apexParser.IMPLEMENTS = 28;
apexParser.IMPORT = 29;
apexParser.INSTANCEOF = 30;
apexParser.INT = 31;
apexParser.INTERFACE = 32;
apexParser.LONG = 33;
apexParser.NATIVE = 34;
apexParser.NEW = 35;
apexParser.PACKAGE = 36;
apexParser.PRIVATE = 37;
apexParser.PROTECTED = 38;
apexParser.PUBLIC = 39;
apexParser.RETURN = 40;
apexParser.SHORT = 41;
apexParser.STATIC = 42;
apexParser.SUPER = 43;
apexParser.SYNCHRONIZED = 44;
apexParser.THIS = 45;
apexParser.THROW = 46;
apexParser.THROWS = 47;
apexParser.TRANSIENT = 48;
apexParser.TRY = 49;
apexParser.VOID = 50;
apexParser.VOLATILE = 51;
apexParser.WHILE = 52;
apexParser.GLOBAL = 53;
apexParser.WEBSERVICE = 54;
apexParser.APEX_WITH_SHARING = 55;
apexParser.APEX_WITHOUT_SHARING = 56;
apexParser.SELECT = 57;
apexParser.DB_INSERT = 58;
apexParser.DB_UPSERT = 59;
apexParser.DB_UPDATE = 60;
apexParser.DB_DELETE = 61;
apexParser.DB_UNDELETE = 62;
apexParser.TESTMETHOD = 63;
apexParser.TRIGGER = 64;
apexParser.ON = 65;
apexParser.BEFORE = 66;
apexParser.AFTER = 67;
apexParser.IntegerLiteral = 68;
apexParser.FloatingPointLiteral = 69;
apexParser.BooleanLiteral = 70;
apexParser.StringLiteral = 71;
apexParser.NullLiteral = 72;
apexParser.LPAREN = 73;
apexParser.RPAREN = 74;
apexParser.LBRACE = 75;
apexParser.RBRACE = 76;
apexParser.LBRACK = 77;
apexParser.RBRACK = 78;
apexParser.SEMI = 79;
apexParser.COMMA = 80;
apexParser.DOT = 81;
apexParser.ASSIGN = 82;
apexParser.GT = 83;
apexParser.LT = 84;
apexParser.BANG = 85;
apexParser.TILDE = 86;
apexParser.QUESTION = 87;
apexParser.COLON = 88;
apexParser.EQUAL = 89;
apexParser.LE = 90;
apexParser.GE = 91;
apexParser.NOTEQUAL = 92;
apexParser.AND = 93;
apexParser.OR = 94;
apexParser.INC = 95;
apexParser.DEC = 96;
apexParser.ADD = 97;
apexParser.SUB = 98;
apexParser.MUL = 99;
apexParser.DIV = 100;
apexParser.BITAND = 101;
apexParser.BITOR = 102;
apexParser.CARET = 103;
apexParser.MOD = 104;
apexParser.ADD_ASSIGN = 105;
apexParser.SUB_ASSIGN = 106;
apexParser.MUL_ASSIGN = 107;
apexParser.DIV_ASSIGN = 108;
apexParser.AND_ASSIGN = 109;
apexParser.OR_ASSIGN = 110;
apexParser.XOR_ASSIGN = 111;
apexParser.MOD_ASSIGN = 112;
apexParser.LSHIFT_ASSIGN = 113;
apexParser.RSHIFT_ASSIGN = 114;
apexParser.URSHIFT_ASSIGN = 115;
apexParser.LAMBDA_LIKE = 116;
apexParser.Identifier = 117;
apexParser.AT = 118;
apexParser.ELLIPSIS = 119;
apexParser.WS = 120;
apexParser.APEXDOC_COMMENT = 121;
apexParser.APEXDOC_COMMENT_START = 122;
apexParser.COMMENT = 123;
apexParser.COMMENT_START = 124;
apexParser.LINE_COMMENT = 125;
apexParser.QUOTE = 126;

apexParser.RULE_compilationUnit = 0;
apexParser.RULE_typeDeclaration = 1;
apexParser.RULE_triggerDeclaration = 2;
apexParser.RULE_triggerTimings = 3;
apexParser.RULE_triggerTiming = 4;
apexParser.RULE_modifier = 5;
apexParser.RULE_classOrInterfaceModifier = 6;
apexParser.RULE_variableModifier = 7;
apexParser.RULE_classDeclaration = 8;
apexParser.RULE_enumDeclaration = 9;
apexParser.RULE_enumConstants = 10;
apexParser.RULE_enumConstant = 11;
apexParser.RULE_enumBodyDeclarations = 12;
apexParser.RULE_interfaceDeclaration = 13;
apexParser.RULE_typeList = 14;
apexParser.RULE_classBody = 15;
apexParser.RULE_interfaceBody = 16;
apexParser.RULE_classBodyDeclaration = 17;
apexParser.RULE_memberDeclaration = 18;
apexParser.RULE_methodDeclaration = 19;
apexParser.RULE_constructorDeclaration = 20;
apexParser.RULE_fieldDeclaration = 21;
apexParser.RULE_propertyDeclaration = 22;
apexParser.RULE_propertyBodyDeclaration = 23;
apexParser.RULE_interfaceBodyDeclaration = 24;
apexParser.RULE_interfaceMemberDeclaration = 25;
apexParser.RULE_constDeclaration = 26;
apexParser.RULE_constantDeclarator = 27;
apexParser.RULE_interfaceMethodDeclaration = 28;
apexParser.RULE_variableDeclarators = 29;
apexParser.RULE_variableDeclarator = 30;
apexParser.RULE_variableDeclaratorId = 31;
apexParser.RULE_variableInitializer = 32;
apexParser.RULE_arrayInitializer = 33;
apexParser.RULE_enumConstantName = 34;
apexParser.RULE_type = 35;
apexParser.RULE_typedArray = 36;
apexParser.RULE_classOrInterfaceType = 37;
apexParser.RULE_primitiveType = 38;
apexParser.RULE_typeArguments = 39;
apexParser.RULE_typeArgument = 40;
apexParser.RULE_qualifiedNameList = 41;
apexParser.RULE_formalParameters = 42;
apexParser.RULE_formalParameterList = 43;
apexParser.RULE_formalParameter = 44;
apexParser.RULE_lastFormalParameter = 45;
apexParser.RULE_methodBody = 46;
apexParser.RULE_constructorBody = 47;
apexParser.RULE_qualifiedName = 48;
apexParser.RULE_literal = 49;
apexParser.RULE_annotation = 50;
apexParser.RULE_annotationName = 51;
apexParser.RULE_elementValuePairs = 52;
apexParser.RULE_elementValuePair = 53;
apexParser.RULE_elementValue = 54;
apexParser.RULE_elementValueArrayInitializer = 55;
apexParser.RULE_block = 56;
apexParser.RULE_blockStatement = 57;
apexParser.RULE_localVariableDeclarationStatement = 58;
apexParser.RULE_localVariableDeclaration = 59;
apexParser.RULE_statement = 60;
apexParser.RULE_propertyBlock = 61;
apexParser.RULE_getter = 62;
apexParser.RULE_setter = 63;
apexParser.RULE_catchClause = 64;
apexParser.RULE_catchType = 65;
apexParser.RULE_finallyBlock = 66;
apexParser.RULE_forControl = 67;
apexParser.RULE_forInit = 68;
apexParser.RULE_enhancedForControl = 69;
apexParser.RULE_forUpdate = 70;
apexParser.RULE_parExpression = 71;
apexParser.RULE_expressionList = 72;
apexParser.RULE_statementExpression = 73;
apexParser.RULE_constantExpression = 74;
apexParser.RULE_apexDbExpressionShort = 75;
apexParser.RULE_apexDbExpression = 76;
apexParser.RULE_expression = 77;
apexParser.RULE_primary = 78;
apexParser.RULE_creator = 79;
apexParser.RULE_createdName = 80;
apexParser.RULE_innerCreator = 81;
apexParser.RULE_arrayCreatorRest = 82;
apexParser.RULE_mapCreatorRest = 83;
apexParser.RULE_setCreatorRest = 84;
apexParser.RULE_classCreatorRest = 85;
apexParser.RULE_explicitGenericInvocation = 86;
apexParser.RULE_nonWildcardTypeArguments = 87;
apexParser.RULE_typeArgumentsOrDiamond = 88;
apexParser.RULE_nonWildcardTypeArgumentsOrDiamond = 89;
apexParser.RULE_superSuffix = 90;
apexParser.RULE_explicitGenericInvocationSuffix = 91;
apexParser.RULE_arguments = 92;
apexParser.RULE_accessor = 93;

function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.typeDeclaration = function() {
    return this.getTypedRuleContext(TypeDeclarationContext,0);
};

CompilationUnitContext.prototype.EOF = function() {
    return this.getToken(apexParser.EOF, 0);
};

CompilationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCompilationUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CompilationUnitContext = CompilationUnitContext;

apexParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, apexParser.RULE_compilationUnit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 188;
        this.typeDeclaration();
        this.state = 189;
        this.match(apexParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeDeclaration;
    return this;
}

TypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclarationContext.prototype.constructor = TypeDeclarationContext;

TypeDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

TypeDeclarationContext.prototype.classOrInterfaceModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
    } else {
        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
    }
};

TypeDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

TypeDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

TypeDeclarationContext.prototype.triggerDeclaration = function() {
    return this.getTypedRuleContext(TriggerDeclarationContext,0);
};

TypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeDeclarationContext = TypeDeclarationContext;

apexParser.prototype.typeDeclaration = function() {

    var localctx = new TypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, apexParser.RULE_typeDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 214;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 194;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0) || _la===apexParser.AT) {
                this.state = 191;
                this.classOrInterfaceModifier();
                this.state = 196;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 197;
            this.classDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 201;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0) || _la===apexParser.AT) {
                this.state = 198;
                this.classOrInterfaceModifier();
                this.state = 203;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 204;
            this.enumDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 208;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0) || _la===apexParser.AT) {
                this.state = 205;
                this.classOrInterfaceModifier();
                this.state = 210;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 211;
            this.interfaceDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 212;
            this.triggerDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 213;
            this.match(apexParser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_triggerDeclaration;
    return this;
}

TriggerDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerDeclarationContext.prototype.constructor = TriggerDeclarationContext;

TriggerDeclarationContext.prototype.TRIGGER = function() {
    return this.getToken(apexParser.TRIGGER, 0);
};

TriggerDeclarationContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


TriggerDeclarationContext.prototype.ON = function() {
    return this.getToken(apexParser.ON, 0);
};

TriggerDeclarationContext.prototype.triggerTimings = function() {
    return this.getTypedRuleContext(TriggerTimingsContext,0);
};

TriggerDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TriggerDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTriggerDeclaration(this);
	}
};

TriggerDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTriggerDeclaration(this);
	}
};

TriggerDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTriggerDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TriggerDeclarationContext = TriggerDeclarationContext;

apexParser.prototype.triggerDeclaration = function() {

    var localctx = new TriggerDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, apexParser.RULE_triggerDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 216;
        this.match(apexParser.TRIGGER);
        this.state = 217;
        this.match(apexParser.Identifier);
        this.state = 218;
        this.match(apexParser.ON);
        this.state = 219;
        this.match(apexParser.Identifier);
        this.state = 220;
        this.match(apexParser.LPAREN);
        this.state = 221;
        this.triggerTimings();
        this.state = 222;
        this.match(apexParser.RPAREN);
        this.state = 223;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerTimingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_triggerTimings;
    return this;
}

TriggerTimingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerTimingsContext.prototype.constructor = TriggerTimingsContext;

TriggerTimingsContext.prototype.triggerTiming = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TriggerTimingContext);
    } else {
        return this.getTypedRuleContext(TriggerTimingContext,i);
    }
};

TriggerTimingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTriggerTimings(this);
	}
};

TriggerTimingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTriggerTimings(this);
	}
};

TriggerTimingsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTriggerTimings(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TriggerTimingsContext = TriggerTimingsContext;

apexParser.prototype.triggerTimings = function() {

    var localctx = new TriggerTimingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, apexParser.RULE_triggerTimings);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 225;
        this.triggerTiming();
        this.state = 230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 226;
            this.match(apexParser.COMMA);
            this.state = 227;
            this.triggerTiming();
            this.state = 232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerTimingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_triggerTiming;
    this.timing = null; // Token
    this.dml = null; // Token
    return this;
}

TriggerTimingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerTimingContext.prototype.constructor = TriggerTimingContext;

TriggerTimingContext.prototype.BEFORE = function() {
    return this.getToken(apexParser.BEFORE, 0);
};

TriggerTimingContext.prototype.AFTER = function() {
    return this.getToken(apexParser.AFTER, 0);
};

TriggerTimingContext.prototype.DB_INSERT = function() {
    return this.getToken(apexParser.DB_INSERT, 0);
};

TriggerTimingContext.prototype.DB_UPDATE = function() {
    return this.getToken(apexParser.DB_UPDATE, 0);
};

TriggerTimingContext.prototype.DB_UPSERT = function() {
    return this.getToken(apexParser.DB_UPSERT, 0);
};

TriggerTimingContext.prototype.DB_DELETE = function() {
    return this.getToken(apexParser.DB_DELETE, 0);
};

TriggerTimingContext.prototype.DB_UNDELETE = function() {
    return this.getToken(apexParser.DB_UNDELETE, 0);
};

TriggerTimingContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTriggerTiming(this);
	}
};

TriggerTimingContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTriggerTiming(this);
	}
};

TriggerTimingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTriggerTiming(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TriggerTimingContext = TriggerTimingContext;

apexParser.prototype.triggerTiming = function() {

    var localctx = new TriggerTimingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, apexParser.RULE_triggerTiming);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 233;
        localctx.timing = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===apexParser.BEFORE || _la===apexParser.AFTER)) {
            localctx.timing = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 234;
        localctx.dml = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (apexParser.DB_INSERT - 58)) | (1 << (apexParser.DB_UPSERT - 58)) | (1 << (apexParser.DB_UPDATE - 58)) | (1 << (apexParser.DB_DELETE - 58)) | (1 << (apexParser.DB_UNDELETE - 58)))) !== 0))) {
            localctx.dml = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_modifier;
    return this;
}

ModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierContext.prototype.constructor = ModifierContext;

ModifierContext.prototype.classOrInterfaceModifier = function() {
    return this.getTypedRuleContext(ClassOrInterfaceModifierContext,0);
};

ModifierContext.prototype.TRANSIENT = function() {
    return this.getToken(apexParser.TRANSIENT, 0);
};

ModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterModifier(this);
	}
};

ModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitModifier(this);
	}
};

ModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ModifierContext = ModifierContext;

apexParser.prototype.modifier = function() {

    var localctx = new ModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, apexParser.RULE_modifier);
    try {
        this.state = 238;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.OVERRIDE:
        case apexParser.VIRTUAL:
        case apexParser.ABSTRACT:
        case apexParser.FINAL:
        case apexParser.PRIVATE:
        case apexParser.PROTECTED:
        case apexParser.PUBLIC:
        case apexParser.STATIC:
        case apexParser.GLOBAL:
        case apexParser.WEBSERVICE:
        case apexParser.APEX_WITH_SHARING:
        case apexParser.APEX_WITHOUT_SHARING:
        case apexParser.TESTMETHOD:
        case apexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 236;
            this.classOrInterfaceModifier();
            break;
        case apexParser.TRANSIENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 237;
            this.match(apexParser.TRANSIENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classOrInterfaceModifier;
    return this;
}

ClassOrInterfaceModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceModifierContext.prototype.constructor = ClassOrInterfaceModifierContext;

ClassOrInterfaceModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ClassOrInterfaceModifierContext.prototype.PUBLIC = function() {
    return this.getToken(apexParser.PUBLIC, 0);
};

ClassOrInterfaceModifierContext.prototype.PROTECTED = function() {
    return this.getToken(apexParser.PROTECTED, 0);
};

ClassOrInterfaceModifierContext.prototype.PRIVATE = function() {
    return this.getToken(apexParser.PRIVATE, 0);
};

ClassOrInterfaceModifierContext.prototype.STATIC = function() {
    return this.getToken(apexParser.STATIC, 0);
};

ClassOrInterfaceModifierContext.prototype.ABSTRACT = function() {
    return this.getToken(apexParser.ABSTRACT, 0);
};

ClassOrInterfaceModifierContext.prototype.FINAL = function() {
    return this.getToken(apexParser.FINAL, 0);
};

ClassOrInterfaceModifierContext.prototype.GLOBAL = function() {
    return this.getToken(apexParser.GLOBAL, 0);
};

ClassOrInterfaceModifierContext.prototype.WEBSERVICE = function() {
    return this.getToken(apexParser.WEBSERVICE, 0);
};

ClassOrInterfaceModifierContext.prototype.OVERRIDE = function() {
    return this.getToken(apexParser.OVERRIDE, 0);
};

ClassOrInterfaceModifierContext.prototype.VIRTUAL = function() {
    return this.getToken(apexParser.VIRTUAL, 0);
};

ClassOrInterfaceModifierContext.prototype.TESTMETHOD = function() {
    return this.getToken(apexParser.TESTMETHOD, 0);
};

ClassOrInterfaceModifierContext.prototype.APEX_WITH_SHARING = function() {
    return this.getToken(apexParser.APEX_WITH_SHARING, 0);
};

ClassOrInterfaceModifierContext.prototype.APEX_WITHOUT_SHARING = function() {
    return this.getToken(apexParser.APEX_WITHOUT_SHARING, 0);
};

ClassOrInterfaceModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassOrInterfaceModifier(this);
	}
};

ClassOrInterfaceModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassOrInterfaceModifier(this);
	}
};

ClassOrInterfaceModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassOrInterfaceModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext;

apexParser.prototype.classOrInterfaceModifier = function() {

    var localctx = new ClassOrInterfaceModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, apexParser.RULE_classOrInterfaceModifier);
    var _la = 0; // Token type
    try {
        this.state = 242;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 240;
            this.annotation();
            break;
        case apexParser.OVERRIDE:
        case apexParser.VIRTUAL:
        case apexParser.ABSTRACT:
        case apexParser.FINAL:
        case apexParser.PRIVATE:
        case apexParser.PROTECTED:
        case apexParser.PUBLIC:
        case apexParser.STATIC:
        case apexParser.GLOBAL:
        case apexParser.WEBSERVICE:
        case apexParser.APEX_WITH_SHARING:
        case apexParser.APEX_WITHOUT_SHARING:
        case apexParser.TESTMETHOD:
            this.enterOuterAlt(localctx, 2);
            this.state = 241;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableModifier;
    return this;
}

VariableModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableModifierContext.prototype.constructor = VariableModifierContext;

VariableModifierContext.prototype.FINAL = function() {
    return this.getToken(apexParser.FINAL, 0);
};

VariableModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

VariableModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableModifier(this);
	}
};

VariableModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableModifier(this);
	}
};

VariableModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableModifierContext = VariableModifierContext;

apexParser.prototype.variableModifier = function() {

    var localctx = new VariableModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, apexParser.RULE_variableModifier);
    try {
        this.state = 246;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.FINAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 244;
            this.match(apexParser.FINAL);
            break;
        case apexParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 245;
            this.annotation();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.CLASS = function() {
    return this.getToken(apexParser.CLASS, 0);
};

ClassDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ClassDeclarationContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassDeclarationContext.prototype.EXTENDS = function() {
    return this.getToken(apexParser.EXTENDS, 0);
};

ClassDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ClassDeclarationContext.prototype.IMPLEMENTS = function() {
    return this.getToken(apexParser.IMPLEMENTS, 0);
};

ClassDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassDeclarationContext = ClassDeclarationContext;

apexParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, apexParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 248;
        this.match(apexParser.CLASS);
        this.state = 249;
        this.match(apexParser.Identifier);
        this.state = 252;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.EXTENDS) {
            this.state = 250;
            this.match(apexParser.EXTENDS);
            this.state = 251;
            this.type();
        }

        this.state = 256;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.IMPLEMENTS) {
            this.state = 254;
            this.match(apexParser.IMPLEMENTS);
            this.state = 255;
            this.typeList();
        }

        this.state = 258;
        this.classBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumDeclaration;
    return this;
}

EnumDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.ENUM = function() {
    return this.getToken(apexParser.ENUM, 0);
};

EnumDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

EnumDeclarationContext.prototype.IMPLEMENTS = function() {
    return this.getToken(apexParser.IMPLEMENTS, 0);
};

EnumDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

EnumDeclarationContext.prototype.enumConstants = function() {
    return this.getTypedRuleContext(EnumConstantsContext,0);
};

EnumDeclarationContext.prototype.enumBodyDeclarations = function() {
    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
};

EnumDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumDeclarationContext = EnumDeclarationContext;

apexParser.prototype.enumDeclaration = function() {

    var localctx = new EnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, apexParser.RULE_enumDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 260;
        this.match(apexParser.ENUM);
        this.state = 261;
        this.match(apexParser.Identifier);
        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.IMPLEMENTS) {
            this.state = 262;
            this.match(apexParser.IMPLEMENTS);
            this.state = 263;
            this.typeList();
        }

        this.state = 266;
        this.match(apexParser.LBRACE);
        this.state = 268;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 267;
            this.enumConstants();
        }

        this.state = 271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.COMMA) {
            this.state = 270;
            this.match(apexParser.COMMA);
        }

        this.state = 274;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.SEMI) {
            this.state = 273;
            this.enumBodyDeclarations();
        }

        this.state = 276;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumConstants;
    return this;
}

EnumConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantsContext.prototype.constructor = EnumConstantsContext;

EnumConstantsContext.prototype.enumConstant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumConstantContext);
    } else {
        return this.getTypedRuleContext(EnumConstantContext,i);
    }
};

EnumConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumConstants(this);
	}
};

EnumConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumConstants(this);
	}
};

EnumConstantsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumConstants(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumConstantsContext = EnumConstantsContext;

apexParser.prototype.enumConstants = function() {

    var localctx = new EnumConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, apexParser.RULE_enumConstants);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        this.enumConstant();
        this.state = 283;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 279;
                this.match(apexParser.COMMA);
                this.state = 280;
                this.enumConstant(); 
            }
            this.state = 285;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumConstant;
    return this;
}

EnumConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantContext.prototype.constructor = EnumConstantContext;

EnumConstantContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

EnumConstantContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

EnumConstantContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

EnumConstantContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

EnumConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumConstant(this);
	}
};

EnumConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumConstant(this);
	}
};

EnumConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumConstantContext = EnumConstantContext;

apexParser.prototype.enumConstant = function() {

    var localctx = new EnumConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, apexParser.RULE_enumConstant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.AT) {
            this.state = 286;
            this.annotation();
            this.state = 291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 292;
        this.match(apexParser.Identifier);
        this.state = 294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LPAREN) {
            this.state = 293;
            this.arguments();
        }

        this.state = 297;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LBRACE) {
            this.state = 296;
            this.classBody();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumBodyDeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumBodyDeclarations;
    return this;
}

EnumBodyDeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumBodyDeclarationsContext.prototype.constructor = EnumBodyDeclarationsContext;

EnumBodyDeclarationsContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

EnumBodyDeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumBodyDeclarations(this);
	}
};

EnumBodyDeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumBodyDeclarations(this);
	}
};

EnumBodyDeclarationsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumBodyDeclarations(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext;

apexParser.prototype.enumBodyDeclarations = function() {

    var localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, apexParser.RULE_enumBodyDeclarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 299;
        this.match(apexParser.SEMI);
        this.state = 303;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.INTERFACE - 32)) | (1 << (apexParser.LONG - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.TRANSIENT - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.TESTMETHOD - 32)))) !== 0) || _la===apexParser.LBRACE || _la===apexParser.SEMI || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 300;
            this.classBodyDeclaration();
            this.state = 305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceDeclaration;
    return this;
}

InterfaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDeclarationContext.prototype.constructor = InterfaceDeclarationContext;

InterfaceDeclarationContext.prototype.INTERFACE = function() {
    return this.getToken(apexParser.INTERFACE, 0);
};

InterfaceDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

InterfaceDeclarationContext.prototype.interfaceBody = function() {
    return this.getTypedRuleContext(InterfaceBodyContext,0);
};

InterfaceDeclarationContext.prototype.EXTENDS = function() {
    return this.getToken(apexParser.EXTENDS, 0);
};

InterfaceDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

InterfaceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceDeclaration(this);
	}
};

InterfaceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceDeclaration(this);
	}
};

InterfaceDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceDeclarationContext = InterfaceDeclarationContext;

apexParser.prototype.interfaceDeclaration = function() {

    var localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, apexParser.RULE_interfaceDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 306;
        this.match(apexParser.INTERFACE);
        this.state = 307;
        this.match(apexParser.Identifier);
        this.state = 310;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.EXTENDS) {
            this.state = 308;
            this.match(apexParser.EXTENDS);
            this.state = 309;
            this.typeList();
        }

        this.state = 312;
        this.interfaceBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeList;
    return this;
}

TypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeListContext.prototype.constructor = TypeListContext;

TypeListContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeList(this);
	}
};

TypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeList(this);
	}
};

TypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeListContext = TypeListContext;

apexParser.prototype.typeList = function() {

    var localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, apexParser.RULE_typeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 314;
        this.type();
        this.state = 319;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 315;
            this.match(apexParser.COMMA);
            this.state = 316;
            this.type();
            this.state = 321;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassBody(this);
	}
};

ClassBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassBodyContext = ClassBodyContext;

apexParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, apexParser.RULE_classBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 322;
        this.match(apexParser.LBRACE);
        this.state = 326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.INTERFACE - 32)) | (1 << (apexParser.LONG - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.TRANSIENT - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.TESTMETHOD - 32)))) !== 0) || _la===apexParser.LBRACE || _la===apexParser.SEMI || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 323;
            this.classBodyDeclaration();
            this.state = 328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 329;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceBody;
    return this;
}

InterfaceBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyContext.prototype.constructor = InterfaceBodyContext;

InterfaceBodyContext.prototype.interfaceBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(InterfaceBodyDeclarationContext,i);
    }
};

InterfaceBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceBody(this);
	}
};

InterfaceBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceBody(this);
	}
};

InterfaceBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceBodyContext = InterfaceBodyContext;

apexParser.prototype.interfaceBody = function() {

    var localctx = new InterfaceBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, apexParser.RULE_interfaceBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 331;
        this.match(apexParser.LBRACE);
        this.state = 335;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.INTERFACE - 32)) | (1 << (apexParser.LONG - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.TRANSIENT - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.TESTMETHOD - 32)))) !== 0) || _la===apexParser.SEMI || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 332;
            this.interfaceBodyDeclaration();
            this.state = 337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 338;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classBodyDeclaration;
    return this;
}

ClassBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyDeclarationContext.prototype.constructor = ClassBodyDeclarationContext;

ClassBodyDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ClassBodyDeclarationContext.prototype.STATIC = function() {
    return this.getToken(apexParser.STATIC, 0);
};

ClassBodyDeclarationContext.prototype.memberDeclaration = function() {
    return this.getTypedRuleContext(MemberDeclarationContext,0);
};

ClassBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

ClassBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassBodyDeclaration(this);
	}
};

ClassBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassBodyDeclaration(this);
	}
};

ClassBodyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassBodyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext;

apexParser.prototype.classBodyDeclaration = function() {

    var localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, apexParser.RULE_classBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 352;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 340;
            this.match(apexParser.SEMI);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 342;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.STATIC) {
                this.state = 341;
                this.match(apexParser.STATIC);
            }

            this.state = 344;
            this.block();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 348;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 345;
                    this.modifier(); 
                }
                this.state = 350;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
            }

            this.state = 351;
            this.memberDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_memberDeclaration;
    return this;
}

MemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberDeclarationContext.prototype.constructor = MemberDeclarationContext;

MemberDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

MemberDeclarationContext.prototype.fieldDeclaration = function() {
    return this.getTypedRuleContext(FieldDeclarationContext,0);
};

MemberDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

MemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

MemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

MemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

MemberDeclarationContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

MemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMemberDeclaration(this);
	}
};

MemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMemberDeclaration(this);
	}
};

MemberDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMemberDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MemberDeclarationContext = MemberDeclarationContext;

apexParser.prototype.memberDeclaration = function() {

    var localctx = new MemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, apexParser.RULE_memberDeclaration);
    try {
        this.state = 361;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 354;
            this.methodDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 355;
            this.fieldDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 356;
            this.constructorDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 357;
            this.interfaceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 358;
            this.classDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 359;
            this.enumDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 360;
            this.propertyDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

MethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

MethodDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

MethodDeclarationContext.prototype.VOID = function() {
    return this.getToken(apexParser.VOID, 0);
};

MethodDeclarationContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

MethodDeclarationContext.prototype.OVERRIDE = function() {
    return this.getToken(apexParser.OVERRIDE, 0);
};

MethodDeclarationContext.prototype.THROWS = function() {
    return this.getToken(apexParser.THROWS, 0);
};

MethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MethodDeclarationContext = MethodDeclarationContext;

apexParser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, apexParser.RULE_methodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 364;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.OVERRIDE) {
            this.state = 363;
            this.match(apexParser.OVERRIDE);
        }

        this.state = 368;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.state = 366;
            this.type();
            break;
        case apexParser.VOID:
            this.state = 367;
            this.match(apexParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 370;
        this.match(apexParser.Identifier);
        this.state = 371;
        this.formalParameters();
        this.state = 376;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 372;
            this.match(apexParser.LBRACK);
            this.state = 373;
            this.match(apexParser.RBRACK);
            this.state = 378;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.THROWS) {
            this.state = 379;
            this.match(apexParser.THROWS);
            this.state = 380;
            this.qualifiedNameList();
        }

        this.state = 385;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LBRACE:
            this.state = 383;
            this.methodBody();
            break;
        case apexParser.SEMI:
            this.state = 384;
            this.match(apexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constructorDeclaration;
    return this;
}

ConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDeclarationContext.prototype.constructor = ConstructorDeclarationContext;

ConstructorDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ConstructorDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

ConstructorDeclarationContext.prototype.constructorBody = function() {
    return this.getTypedRuleContext(ConstructorBodyContext,0);
};

ConstructorDeclarationContext.prototype.THROWS = function() {
    return this.getToken(apexParser.THROWS, 0);
};

ConstructorDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

ConstructorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstructorDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstructorDeclarationContext = ConstructorDeclarationContext;

apexParser.prototype.constructorDeclaration = function() {

    var localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, apexParser.RULE_constructorDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 387;
        this.match(apexParser.Identifier);
        this.state = 388;
        this.formalParameters();
        this.state = 391;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.THROWS) {
            this.state = 389;
            this.match(apexParser.THROWS);
            this.state = 390;
            this.qualifiedNameList();
        }

        this.state = 393;
        this.constructorBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_fieldDeclaration;
    return this;
}

FieldDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclarationContext.prototype.constructor = FieldDeclarationContext;

FieldDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FieldDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

FieldDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFieldDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FieldDeclarationContext = FieldDeclarationContext;

apexParser.prototype.fieldDeclaration = function() {

    var localctx = new FieldDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, apexParser.RULE_fieldDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 395;
        this.type();
        this.state = 396;
        this.variableDeclarators();
        this.state = 397;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_propertyDeclaration;
    return this;
}

PropertyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeclarationContext.prototype.constructor = PropertyDeclarationContext;

PropertyDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PropertyDeclarationContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

PropertyDeclarationContext.prototype.propertyBodyDeclaration = function() {
    return this.getTypedRuleContext(PropertyBodyDeclarationContext,0);
};

PropertyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPropertyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PropertyDeclarationContext = PropertyDeclarationContext;

apexParser.prototype.propertyDeclaration = function() {

    var localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, apexParser.RULE_propertyDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 399;
        this.type();
        this.state = 400;
        this.variableDeclaratorId();
        this.state = 401;
        this.propertyBodyDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_propertyBodyDeclaration;
    return this;
}

PropertyBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBodyDeclarationContext.prototype.constructor = PropertyBodyDeclarationContext;

PropertyBodyDeclarationContext.prototype.propertyBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyBlockContext);
    } else {
        return this.getTypedRuleContext(PropertyBlockContext,i);
    }
};

PropertyBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPropertyBodyDeclaration(this);
	}
};

PropertyBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPropertyBodyDeclaration(this);
	}
};

PropertyBodyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPropertyBodyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PropertyBodyDeclarationContext = PropertyBodyDeclarationContext;

apexParser.prototype.propertyBodyDeclaration = function() {

    var localctx = new PropertyBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, apexParser.RULE_propertyBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        this.match(apexParser.LBRACE);
        this.state = 404;
        this.propertyBlock();
        this.state = 406;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.GET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.TRANSIENT - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0) || _la===apexParser.AT) {
            this.state = 405;
            this.propertyBlock();
        }

        this.state = 408;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceBodyDeclaration;
    return this;
}

InterfaceBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyDeclarationContext.prototype.constructor = InterfaceBodyDeclarationContext;

InterfaceBodyDeclarationContext.prototype.interfaceMemberDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMemberDeclarationContext,0);
};

InterfaceBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

InterfaceBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceBodyDeclaration(this);
	}
};

InterfaceBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceBodyDeclaration(this);
	}
};

InterfaceBodyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceBodyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceBodyDeclarationContext = InterfaceBodyDeclarationContext;

apexParser.prototype.interfaceBodyDeclaration = function() {

    var localctx = new InterfaceBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, apexParser.RULE_interfaceBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 418;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.OVERRIDE:
        case apexParser.VIRTUAL:
        case apexParser.SET:
        case apexParser.ABSTRACT:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.CLASS:
        case apexParser.DOUBLE:
        case apexParser.ENUM:
        case apexParser.FINAL:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.INTERFACE:
        case apexParser.LONG:
        case apexParser.PRIVATE:
        case apexParser.PROTECTED:
        case apexParser.PUBLIC:
        case apexParser.SHORT:
        case apexParser.STATIC:
        case apexParser.TRANSIENT:
        case apexParser.VOID:
        case apexParser.GLOBAL:
        case apexParser.WEBSERVICE:
        case apexParser.APEX_WITH_SHARING:
        case apexParser.APEX_WITHOUT_SHARING:
        case apexParser.TESTMETHOD:
        case apexParser.Identifier:
        case apexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.TRANSIENT - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0) || _la===apexParser.AT) {
                this.state = 410;
                this.modifier();
                this.state = 415;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 416;
            this.interfaceMemberDeclaration();
            break;
        case apexParser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 417;
            this.match(apexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceMemberDeclaration;
    return this;
}

InterfaceMemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMemberDeclarationContext.prototype.constructor = InterfaceMemberDeclarationContext;

InterfaceMemberDeclarationContext.prototype.constDeclaration = function() {
    return this.getTypedRuleContext(ConstDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceMemberDeclaration(this);
	}
};

InterfaceMemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceMemberDeclaration(this);
	}
};

InterfaceMemberDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceMemberDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext;

apexParser.prototype.interfaceMemberDeclaration = function() {

    var localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, apexParser.RULE_interfaceMemberDeclaration);
    try {
        this.state = 425;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 420;
            this.constDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 421;
            this.interfaceMethodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 422;
            this.interfaceDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 423;
            this.classDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 424;
            this.enumDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constDeclaration;
    return this;
}

ConstDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstDeclarationContext.prototype.constructor = ConstDeclarationContext;

ConstDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ConstDeclarationContext.prototype.constantDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantDeclaratorContext);
    } else {
        return this.getTypedRuleContext(ConstantDeclaratorContext,i);
    }
};

ConstDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstDeclaration(this);
	}
};

ConstDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstDeclaration(this);
	}
};

ConstDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstDeclarationContext = ConstDeclarationContext;

apexParser.prototype.constDeclaration = function() {

    var localctx = new ConstDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, apexParser.RULE_constDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 427;
        this.type();
        this.state = 428;
        this.constantDeclarator();
        this.state = 433;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 429;
            this.match(apexParser.COMMA);
            this.state = 430;
            this.constantDeclarator();
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 436;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constantDeclarator;
    return this;
}

ConstantDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDeclaratorContext.prototype.constructor = ConstantDeclaratorContext;

ConstantDeclaratorContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ConstantDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

ConstantDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstantDeclarator(this);
	}
};

ConstantDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstantDeclarator(this);
	}
};

ConstantDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstantDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstantDeclaratorContext = ConstantDeclaratorContext;

apexParser.prototype.constantDeclarator = function() {

    var localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, apexParser.RULE_constantDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 438;
        this.match(apexParser.Identifier);
        this.state = 443;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 439;
            this.match(apexParser.LBRACK);
            this.state = 440;
            this.match(apexParser.RBRACK);
            this.state = 445;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 446;
        this.match(apexParser.ASSIGN);
        this.state = 447;
        this.variableInitializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceMethodDeclaration;
    return this;
}

InterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodDeclarationContext.prototype.constructor = InterfaceMethodDeclarationContext;

InterfaceMethodDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

InterfaceMethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

InterfaceMethodDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

InterfaceMethodDeclarationContext.prototype.VOID = function() {
    return this.getToken(apexParser.VOID, 0);
};

InterfaceMethodDeclarationContext.prototype.THROWS = function() {
    return this.getToken(apexParser.THROWS, 0);
};

InterfaceMethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

InterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;

apexParser.prototype.interfaceMethodDeclaration = function() {

    var localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, apexParser.RULE_interfaceMethodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 451;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.state = 449;
            this.type();
            break;
        case apexParser.VOID:
            this.state = 450;
            this.match(apexParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 453;
        this.match(apexParser.Identifier);
        this.state = 454;
        this.formalParameters();
        this.state = 459;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 455;
            this.match(apexParser.LBRACK);
            this.state = 456;
            this.match(apexParser.RBRACK);
            this.state = 461;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.THROWS) {
            this.state = 462;
            this.match(apexParser.THROWS);
            this.state = 463;
            this.qualifiedNameList();
        }

        this.state = 466;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableDeclarators;
    return this;
}

VariableDeclaratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorsContext.prototype.constructor = VariableDeclaratorsContext;

VariableDeclaratorsContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableDeclarators(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableDeclaratorsContext = VariableDeclaratorsContext;

apexParser.prototype.variableDeclarators = function() {

    var localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, apexParser.RULE_variableDeclarators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 468;
        this.variableDeclarator();
        this.state = 473;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 469;
            this.match(apexParser.COMMA);
            this.state = 470;
            this.variableDeclarator();
            this.state = 475;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

VariableDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

VariableDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableDeclaratorContext = VariableDeclaratorContext;

apexParser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, apexParser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 476;
        this.variableDeclaratorId();
        this.state = 479;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.ASSIGN) {
            this.state = 477;
            this.match(apexParser.ASSIGN);
            this.state = 478;
            this.variableInitializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableDeclaratorId;
    return this;
}

VariableDeclaratorIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorIdContext.prototype.constructor = VariableDeclaratorIdContext;

VariableDeclaratorIdContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

VariableDeclaratorIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableDeclaratorId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext;

apexParser.prototype.variableDeclaratorId = function() {

    var localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, apexParser.RULE_variableDeclaratorId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 481;
        this.match(apexParser.Identifier);
        this.state = 486;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 482;
            this.match(apexParser.LBRACK);
            this.state = 483;
            this.match(apexParser.RBRACK);
            this.state = 488;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableInitializer;
    return this;
}

VariableInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerContext.prototype.constructor = VariableInitializerContext;

VariableInitializerContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

VariableInitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableInitializerContext = VariableInitializerContext;

apexParser.prototype.variableInitializer = function() {

    var localctx = new VariableInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, apexParser.RULE_variableInitializer);
    try {
        this.state = 491;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 489;
            this.arrayInitializer();
            break;
        case apexParser.SoqlLiteral:
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.NEW:
        case apexParser.SHORT:
        case apexParser.SUPER:
        case apexParser.THIS:
        case apexParser.VOID:
        case apexParser.IntegerLiteral:
        case apexParser.FloatingPointLiteral:
        case apexParser.BooleanLiteral:
        case apexParser.StringLiteral:
        case apexParser.NullLiteral:
        case apexParser.LPAREN:
        case apexParser.LT:
        case apexParser.BANG:
        case apexParser.TILDE:
        case apexParser.INC:
        case apexParser.DEC:
        case apexParser.ADD:
        case apexParser.SUB:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 490;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.variableInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
        return this.getTypedRuleContext(VariableInitializerContext,i);
    }
};

ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ArrayInitializerContext = ArrayInitializerContext;

apexParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, apexParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 493;
        this.match(apexParser.LBRACE);
        this.state = 505;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (apexParser.IntegerLiteral - 68)) | (1 << (apexParser.FloatingPointLiteral - 68)) | (1 << (apexParser.BooleanLiteral - 68)) | (1 << (apexParser.StringLiteral - 68)) | (1 << (apexParser.NullLiteral - 68)) | (1 << (apexParser.LPAREN - 68)) | (1 << (apexParser.LBRACE - 68)) | (1 << (apexParser.LT - 68)) | (1 << (apexParser.BANG - 68)) | (1 << (apexParser.TILDE - 68)) | (1 << (apexParser.INC - 68)) | (1 << (apexParser.DEC - 68)) | (1 << (apexParser.ADD - 68)) | (1 << (apexParser.SUB - 68)))) !== 0) || _la===apexParser.Identifier) {
            this.state = 494;
            this.variableInitializer();
            this.state = 499;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 495;
                    this.match(apexParser.COMMA);
                    this.state = 496;
                    this.variableInitializer(); 
                }
                this.state = 501;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
            }

            this.state = 503;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.COMMA) {
                this.state = 502;
                this.match(apexParser.COMMA);
            }

        }

        this.state = 507;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumConstantName;
    return this;
}

EnumConstantNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantNameContext.prototype.constructor = EnumConstantNameContext;

EnumConstantNameContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

EnumConstantNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumConstantName(this);
	}
};

EnumConstantNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumConstantName(this);
	}
};

EnumConstantNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumConstantName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumConstantNameContext = EnumConstantNameContext;

apexParser.prototype.enumConstantName = function() {

    var localctx = new EnumConstantNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, apexParser.RULE_enumConstantName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this.match(apexParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

TypeContext.prototype.typedArray = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypedArrayContext);
    } else {
        return this.getTypedRuleContext(TypedArrayContext,i);
    }
};

TypeContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeContext = TypeContext;

apexParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, apexParser.RULE_type);
    try {
        this.state = 525;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 511;
            this.classOrInterfaceType();
            this.state = 515;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 512;
                    this.typedArray(); 
                }
                this.state = 517;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
            }

            break;
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 518;
            this.primitiveType();
            this.state = 522;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 519;
                    this.typedArray(); 
                }
                this.state = 524;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typedArray;
    return this;
}

TypedArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedArrayContext.prototype.constructor = TypedArrayContext;


TypedArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypedArray(this);
	}
};

TypedArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypedArray(this);
	}
};

TypedArrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypedArray(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypedArrayContext = TypedArrayContext;

apexParser.prototype.typedArray = function() {

    var localctx = new TypedArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, apexParser.RULE_typedArray);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 527;
        this.match(apexParser.LBRACK);
        this.state = 528;
        this.match(apexParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classOrInterfaceType;
    return this;
}

ClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceTypeContext.prototype.constructor = ClassOrInterfaceTypeContext;

ClassOrInterfaceTypeContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


ClassOrInterfaceTypeContext.prototype.typeArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsContext,i);
    }
};

ClassOrInterfaceTypeContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

ClassOrInterfaceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassOrInterfaceType(this);
	}
};

ClassOrInterfaceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassOrInterfaceType(this);
	}
};

ClassOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext;

apexParser.prototype.classOrInterfaceType = function() {

    var localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, apexParser.RULE_classOrInterfaceType);
    try {
        this.state = 546;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 530;
            this.match(apexParser.Identifier);
            this.state = 532;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
            if(la_===1) {
                this.state = 531;
                this.typeArguments();

            }
            this.state = 541;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 534;
                    this.match(apexParser.DOT);
                    this.state = 535;
                    this.match(apexParser.Identifier);
                    this.state = 537;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
                    if(la_===1) {
                        this.state = 536;
                        this.typeArguments();

                    } 
                }
                this.state = 543;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
            }

            break;
        case apexParser.SET:
            this.enterOuterAlt(localctx, 2);
            this.state = 544;
            this.match(apexParser.SET);
            this.state = 545;
            this.typeArguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimitiveTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_primitiveType;
    return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;

PrimitiveTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(apexParser.BOOLEAN, 0);
};

PrimitiveTypeContext.prototype.CHAR = function() {
    return this.getToken(apexParser.CHAR, 0);
};

PrimitiveTypeContext.prototype.BYTE = function() {
    return this.getToken(apexParser.BYTE, 0);
};

PrimitiveTypeContext.prototype.SHORT = function() {
    return this.getToken(apexParser.SHORT, 0);
};

PrimitiveTypeContext.prototype.INT = function() {
    return this.getToken(apexParser.INT, 0);
};

PrimitiveTypeContext.prototype.LONG = function() {
    return this.getToken(apexParser.LONG, 0);
};

PrimitiveTypeContext.prototype.FLOAT = function() {
    return this.getToken(apexParser.FLOAT, 0);
};

PrimitiveTypeContext.prototype.DOUBLE = function() {
    return this.getToken(apexParser.DOUBLE, 0);
};

PrimitiveTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPrimitiveType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PrimitiveTypeContext = PrimitiveTypeContext;

apexParser.prototype.primitiveType = function() {

    var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, apexParser.RULE_primitiveType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || _la===apexParser.LONG || _la===apexParser.SHORT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.typeArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentContext,i);
    }
};

TypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeArgumentsContext = TypeArgumentsContext;

apexParser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, apexParser.RULE_typeArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 550;
        this.match(apexParser.LT);
        this.state = 551;
        this.typeArgument();
        this.state = 556;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 552;
            this.match(apexParser.COMMA);
            this.state = 553;
            this.typeArgument();
            this.state = 558;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 559;
        this.match(apexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeArgument;
    return this;
}

TypeArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentContext.prototype.constructor = TypeArgumentContext;

TypeArgumentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeArgumentContext.prototype.EXTENDS = function() {
    return this.getToken(apexParser.EXTENDS, 0);
};

TypeArgumentContext.prototype.SUPER = function() {
    return this.getToken(apexParser.SUPER, 0);
};

TypeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeArgument(this);
	}
};

TypeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeArgument(this);
	}
};

TypeArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeArgumentContext = TypeArgumentContext;

apexParser.prototype.typeArgument = function() {

    var localctx = new TypeArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, apexParser.RULE_typeArgument);
    var _la = 0; // Token type
    try {
        this.state = 567;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 561;
            this.type();
            break;
        case apexParser.QUESTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 562;
            this.match(apexParser.QUESTION);
            this.state = 565;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.EXTENDS || _la===apexParser.SUPER) {
                this.state = 563;
                _la = this._input.LA(1);
                if(!(_la===apexParser.EXTENDS || _la===apexParser.SUPER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 564;
                this.type();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_qualifiedNameList;
    return this;
}

QualifiedNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameListContext.prototype.constructor = QualifiedNameListContext;

QualifiedNameListContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

QualifiedNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterQualifiedNameList(this);
	}
};

QualifiedNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitQualifiedNameList(this);
	}
};

QualifiedNameListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitQualifiedNameList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.QualifiedNameListContext = QualifiedNameListContext;

apexParser.prototype.qualifiedNameList = function() {

    var localctx = new QualifiedNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, apexParser.RULE_qualifiedNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.qualifiedName();
        this.state = 574;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 570;
            this.match(apexParser.COMMA);
            this.state = 571;
            this.qualifiedName();
            this.state = 576;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFormalParameters(this);
	}
};

FormalParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFormalParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FormalParametersContext = FormalParametersContext;

apexParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, apexParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 577;
        this.match(apexParser.LPAREN);
        this.state = 579;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || _la===apexParser.LONG || _la===apexParser.SHORT || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 578;
            this.formalParameterList();
        }

        this.state = 581;
        this.match(apexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.lastFormalParameter = function() {
    return this.getTypedRuleContext(LastFormalParameterContext,0);
};

FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFormalParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FormalParameterListContext = FormalParameterListContext;

apexParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, apexParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.state = 596;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 583;
            this.formalParameter();
            this.state = 588;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 584;
                    this.match(apexParser.COMMA);
                    this.state = 585;
                    this.formalParameter(); 
                }
                this.state = 590;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
            }

            this.state = 593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.COMMA) {
                this.state = 591;
                this.match(apexParser.COMMA);
                this.state = 592;
                this.lastFormalParameter();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 595;
            this.lastFormalParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

FormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFormalParameter(this);
	}
};

FormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FormalParameterContext = FormalParameterContext;

apexParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, apexParser.RULE_formalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 601;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 598;
            this.variableModifier();
            this.state = 603;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 604;
        this.type();
        this.state = 605;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LastFormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_lastFormalParameter;
    return this;
}

LastFormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterContext.prototype.constructor = LastFormalParameterContext;

LastFormalParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LastFormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

LastFormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LastFormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLastFormalParameter(this);
	}
};

LastFormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLastFormalParameter(this);
	}
};

LastFormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLastFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LastFormalParameterContext = LastFormalParameterContext;

apexParser.prototype.lastFormalParameter = function() {

    var localctx = new LastFormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, apexParser.RULE_lastFormalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 607;
            this.variableModifier();
            this.state = 612;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 613;
        this.type();
        this.state = 614;
        this.match(apexParser.ELLIPSIS);
        this.state = 615;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_methodBody;
    return this;
}

MethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodBodyContext.prototype.constructor = MethodBodyContext;

MethodBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

MethodBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMethodBody(this);
	}
};

MethodBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMethodBody(this);
	}
};

MethodBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMethodBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MethodBodyContext = MethodBodyContext;

apexParser.prototype.methodBody = function() {

    var localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, apexParser.RULE_methodBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constructorBody;
    return this;
}

ConstructorBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorBodyContext.prototype.constructor = ConstructorBodyContext;

ConstructorBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ConstructorBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstructorBody(this);
	}
};

ConstructorBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstructorBody(this);
	}
};

ConstructorBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstructorBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstructorBodyContext = ConstructorBodyContext;

apexParser.prototype.constructorBody = function() {

    var localctx = new ConstructorBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, apexParser.RULE_constructorBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 619;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitQualifiedName(this);
	}
};

QualifiedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitQualifiedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.QualifiedNameContext = QualifiedNameContext;

apexParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, apexParser.RULE_qualifiedName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this.match(apexParser.Identifier);
        this.state = 626;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.DOT) {
            this.state = 622;
            this.match(apexParser.DOT);
            this.state = 623;
            this.match(apexParser.Identifier);
            this.state = 628;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.IntegerLiteral = function() {
    return this.getToken(apexParser.IntegerLiteral, 0);
};

LiteralContext.prototype.FloatingPointLiteral = function() {
    return this.getToken(apexParser.FloatingPointLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(apexParser.StringLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(apexParser.BooleanLiteral, 0);
};

LiteralContext.prototype.NullLiteral = function() {
    return this.getToken(apexParser.NullLiteral, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LiteralContext = LiteralContext;

apexParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, apexParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 629;
        _la = this._input.LA(1);
        if(!(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (apexParser.IntegerLiteral - 68)) | (1 << (apexParser.FloatingPointLiteral - 68)) | (1 << (apexParser.BooleanLiteral - 68)) | (1 << (apexParser.StringLiteral - 68)) | (1 << (apexParser.NullLiteral - 68)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.annotationName = function() {
    return this.getTypedRuleContext(AnnotationNameContext,0);
};

AnnotationContext.prototype.elementValuePairs = function() {
    return this.getTypedRuleContext(ElementValuePairsContext,0);
};

AnnotationContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotation(this);
	}
};

AnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationContext = AnnotationContext;

apexParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, apexParser.RULE_annotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this.match(apexParser.AT);
        this.state = 632;
        this.annotationName();
        this.state = 639;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LPAREN) {
            this.state = 633;
            this.match(apexParser.LPAREN);
            this.state = 636;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
            if(la_===1) {
                this.state = 634;
                this.elementValuePairs();

            } else if(la_===2) {
                this.state = 635;
                this.elementValue();

            }
            this.state = 638;
            this.match(apexParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotationName;
    return this;
}

AnnotationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationNameContext.prototype.constructor = AnnotationNameContext;

AnnotationNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AnnotationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotationName(this);
	}
};

AnnotationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotationName(this);
	}
};

AnnotationNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotationName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationNameContext = AnnotationNameContext;

apexParser.prototype.annotationName = function() {

    var localctx = new AnnotationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, apexParser.RULE_annotationName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        this.qualifiedName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValuePairs;
    return this;
}

ElementValuePairsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairsContext.prototype.constructor = ElementValuePairsContext;

ElementValuePairsContext.prototype.elementValuePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValuePairContext);
    } else {
        return this.getTypedRuleContext(ElementValuePairContext,i);
    }
};

ElementValuePairsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValuePairs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValuePairsContext = ElementValuePairsContext;

apexParser.prototype.elementValuePairs = function() {

    var localctx = new ElementValuePairsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, apexParser.RULE_elementValuePairs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        this.elementValuePair();
        this.state = 648;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 644;
            this.match(apexParser.COMMA);
            this.state = 645;
            this.elementValuePair();
            this.state = 650;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValuePair;
    return this;
}

ElementValuePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairContext.prototype.constructor = ElementValuePairContext;

ElementValuePairContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ElementValuePairContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

ElementValuePairContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValuePair(this);
	}
};

ElementValuePairContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValuePair(this);
	}
};

ElementValuePairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValuePair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValuePairContext = ElementValuePairContext;

apexParser.prototype.elementValuePair = function() {

    var localctx = new ElementValuePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, apexParser.RULE_elementValuePair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this.match(apexParser.Identifier);
        this.state = 652;
        this.match(apexParser.ASSIGN);
        this.state = 653;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValue;
    return this;
}

ElementValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueContext.prototype.constructor = ElementValueContext;

ElementValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementValueContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ElementValueContext.prototype.elementValueArrayInitializer = function() {
    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
};

ElementValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValue(this);
	}
};

ElementValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValue(this);
	}
};

ElementValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValueContext = ElementValueContext;

apexParser.prototype.elementValue = function() {

    var localctx = new ElementValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, apexParser.RULE_elementValue);
    try {
        this.state = 658;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SoqlLiteral:
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.NEW:
        case apexParser.SHORT:
        case apexParser.SUPER:
        case apexParser.THIS:
        case apexParser.VOID:
        case apexParser.IntegerLiteral:
        case apexParser.FloatingPointLiteral:
        case apexParser.BooleanLiteral:
        case apexParser.StringLiteral:
        case apexParser.NullLiteral:
        case apexParser.LPAREN:
        case apexParser.LT:
        case apexParser.BANG:
        case apexParser.TILDE:
        case apexParser.INC:
        case apexParser.DEC:
        case apexParser.ADD:
        case apexParser.SUB:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 655;
            this.expression(0);
            break;
        case apexParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 656;
            this.annotation();
            break;
        case apexParser.LBRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 657;
            this.elementValueArrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValueArrayInitializer;
    return this;
}

ElementValueArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueArrayInitializerContext.prototype.constructor = ElementValueArrayInitializerContext;

ElementValueArrayInitializerContext.prototype.elementValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValueContext);
    } else {
        return this.getTypedRuleContext(ElementValueContext,i);
    }
};

ElementValueArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValueArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;

apexParser.prototype.elementValueArrayInitializer = function() {

    var localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, apexParser.RULE_elementValueArrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 660;
        this.match(apexParser.LBRACE);
        this.state = 669;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (apexParser.IntegerLiteral - 68)) | (1 << (apexParser.FloatingPointLiteral - 68)) | (1 << (apexParser.BooleanLiteral - 68)) | (1 << (apexParser.StringLiteral - 68)) | (1 << (apexParser.NullLiteral - 68)) | (1 << (apexParser.LPAREN - 68)) | (1 << (apexParser.LBRACE - 68)) | (1 << (apexParser.LT - 68)) | (1 << (apexParser.BANG - 68)) | (1 << (apexParser.TILDE - 68)) | (1 << (apexParser.INC - 68)) | (1 << (apexParser.DEC - 68)) | (1 << (apexParser.ADD - 68)) | (1 << (apexParser.SUB - 68)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 661;
            this.elementValue();
            this.state = 666;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 662;
                    this.match(apexParser.COMMA);
                    this.state = 663;
                    this.elementValue(); 
                }
                this.state = 668;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
            }

        }

        this.state = 672;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.COMMA) {
            this.state = 671;
            this.match(apexParser.COMMA);
        }

        this.state = 674;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.BlockContext = BlockContext;

apexParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, apexParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 676;
        this.match(apexParser.LBRACE);
        this.state = 680;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BREAK) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.CONTINUE) | (1 << apexParser.DO) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.FOR) | (1 << apexParser.IF) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.INTERFACE - 32)) | (1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.RETURN - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.THROW - 32)) | (1 << (apexParser.TRY - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.WHILE - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)) | (1 << (apexParser.DB_INSERT - 32)) | (1 << (apexParser.DB_UPSERT - 32)) | (1 << (apexParser.DB_UPDATE - 32)) | (1 << (apexParser.DB_DELETE - 32)) | (1 << (apexParser.DB_UNDELETE - 32)) | (1 << (apexParser.TESTMETHOD - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (apexParser.TRIGGER - 64)) | (1 << (apexParser.IntegerLiteral - 64)) | (1 << (apexParser.FloatingPointLiteral - 64)) | (1 << (apexParser.BooleanLiteral - 64)) | (1 << (apexParser.StringLiteral - 64)) | (1 << (apexParser.NullLiteral - 64)) | (1 << (apexParser.LPAREN - 64)) | (1 << (apexParser.LBRACE - 64)) | (1 << (apexParser.SEMI - 64)) | (1 << (apexParser.LT - 64)) | (1 << (apexParser.BANG - 64)) | (1 << (apexParser.TILDE - 64)) | (1 << (apexParser.INC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (apexParser.DEC - 96)) | (1 << (apexParser.ADD - 96)) | (1 << (apexParser.SUB - 96)) | (1 << (apexParser.Identifier - 96)) | (1 << (apexParser.AT - 96)))) !== 0)) {
            this.state = 677;
            this.blockStatement();
            this.state = 682;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 683;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.localVariableDeclarationStatement = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
};

BlockStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BlockStatementContext.prototype.typeDeclaration = function() {
    return this.getTypedRuleContext(TypeDeclarationContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitBlockStatement(this);
	}
};

BlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.BlockStatementContext = BlockStatementContext;

apexParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, apexParser.RULE_blockStatement);
    try {
        this.state = 688;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 685;
            this.localVariableDeclarationStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 686;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 687;
            this.typeDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_localVariableDeclarationStatement;
    return this;
}

LocalVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationStatementContext.prototype.constructor = LocalVariableDeclarationStatementContext;

LocalVariableDeclarationStatementContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

LocalVariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLocalVariableDeclarationStatement(this);
	}
};

LocalVariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLocalVariableDeclarationStatement(this);
	}
};

LocalVariableDeclarationStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLocalVariableDeclarationStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;

apexParser.prototype.localVariableDeclarationStatement = function() {

    var localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, apexParser.RULE_localVariableDeclarationStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 690;
        this.localVariableDeclaration();
        this.state = 691;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_localVariableDeclaration;
    return this;
}

LocalVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationContext.prototype.constructor = LocalVariableDeclarationContext;

LocalVariableDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LocalVariableDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

LocalVariableDeclarationContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LocalVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLocalVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;

apexParser.prototype.localVariableDeclaration = function() {

    var localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, apexParser.RULE_localVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 696;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 693;
            this.variableModifier();
            this.state = 698;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 699;
        this.type();
        this.state = 700;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.IF = function() {
    return this.getToken(apexParser.IF, 0);
};

StatementContext.prototype.parExpression = function() {
    return this.getTypedRuleContext(ParExpressionContext,0);
};

StatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementContext.prototype.ELSE = function() {
    return this.getToken(apexParser.ELSE, 0);
};

StatementContext.prototype.FOR = function() {
    return this.getToken(apexParser.FOR, 0);
};

StatementContext.prototype.forControl = function() {
    return this.getTypedRuleContext(ForControlContext,0);
};

StatementContext.prototype.WHILE = function() {
    return this.getToken(apexParser.WHILE, 0);
};

StatementContext.prototype.DO = function() {
    return this.getToken(apexParser.DO, 0);
};

StatementContext.prototype.TRY = function() {
    return this.getToken(apexParser.TRY, 0);
};

StatementContext.prototype.finallyBlock = function() {
    return this.getTypedRuleContext(FinallyBlockContext,0);
};

StatementContext.prototype.catchClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext,i);
    }
};

StatementContext.prototype.RETURN = function() {
    return this.getToken(apexParser.RETURN, 0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.THROW = function() {
    return this.getToken(apexParser.THROW, 0);
};

StatementContext.prototype.BREAK = function() {
    return this.getToken(apexParser.BREAK, 0);
};

StatementContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

StatementContext.prototype.CONTINUE = function() {
    return this.getToken(apexParser.CONTINUE, 0);
};

StatementContext.prototype.statementExpression = function() {
    return this.getTypedRuleContext(StatementExpressionContext,0);
};

StatementContext.prototype.apexDbExpression = function() {
    return this.getTypedRuleContext(ApexDbExpressionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.StatementContext = StatementContext;

apexParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, apexParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 764;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 702;
            this.block();
            break;
        case apexParser.IF:
            this.enterOuterAlt(localctx, 2);
            this.state = 703;
            this.match(apexParser.IF);
            this.state = 704;
            this.parExpression();
            this.state = 705;
            this.statement();
            this.state = 708;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
            if(la_===1) {
                this.state = 706;
                this.match(apexParser.ELSE);
                this.state = 707;
                this.statement();

            }
            break;
        case apexParser.FOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 710;
            this.match(apexParser.FOR);
            this.state = 711;
            this.match(apexParser.LPAREN);
            this.state = 712;
            this.forControl();
            this.state = 713;
            this.match(apexParser.RPAREN);
            this.state = 714;
            this.statement();
            break;
        case apexParser.WHILE:
            this.enterOuterAlt(localctx, 4);
            this.state = 716;
            this.match(apexParser.WHILE);
            this.state = 717;
            this.parExpression();
            this.state = 718;
            this.statement();
            break;
        case apexParser.DO:
            this.enterOuterAlt(localctx, 5);
            this.state = 720;
            this.match(apexParser.DO);
            this.state = 721;
            this.statement();
            this.state = 722;
            this.match(apexParser.WHILE);
            this.state = 723;
            this.parExpression();
            break;
        case apexParser.TRY:
            this.enterOuterAlt(localctx, 6);
            this.state = 725;
            this.match(apexParser.TRY);
            this.state = 726;
            this.block();
            this.state = 736;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case apexParser.CATCH:
                this.state = 728; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 727;
                    this.catchClause();
                    this.state = 730; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===apexParser.CATCH);
                this.state = 733;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===apexParser.FINALLY) {
                    this.state = 732;
                    this.finallyBlock();
                }

                break;
            case apexParser.FINALLY:
                this.state = 735;
                this.finallyBlock();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case apexParser.RETURN:
            this.enterOuterAlt(localctx, 7);
            this.state = 738;
            this.match(apexParser.RETURN);
            this.state = 740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (apexParser.IntegerLiteral - 68)) | (1 << (apexParser.FloatingPointLiteral - 68)) | (1 << (apexParser.BooleanLiteral - 68)) | (1 << (apexParser.StringLiteral - 68)) | (1 << (apexParser.NullLiteral - 68)) | (1 << (apexParser.LPAREN - 68)) | (1 << (apexParser.LT - 68)) | (1 << (apexParser.BANG - 68)) | (1 << (apexParser.TILDE - 68)) | (1 << (apexParser.INC - 68)) | (1 << (apexParser.DEC - 68)) | (1 << (apexParser.ADD - 68)) | (1 << (apexParser.SUB - 68)))) !== 0) || _la===apexParser.Identifier) {
                this.state = 739;
                this.expression(0);
            }

            this.state = 742;
            this.match(apexParser.SEMI);
            break;
        case apexParser.THROW:
            this.enterOuterAlt(localctx, 8);
            this.state = 743;
            this.match(apexParser.THROW);
            this.state = 744;
            this.expression(0);
            this.state = 745;
            this.match(apexParser.SEMI);
            break;
        case apexParser.BREAK:
            this.enterOuterAlt(localctx, 9);
            this.state = 747;
            this.match(apexParser.BREAK);
            this.state = 749;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.Identifier) {
                this.state = 748;
                this.match(apexParser.Identifier);
            }

            this.state = 751;
            this.match(apexParser.SEMI);
            break;
        case apexParser.CONTINUE:
            this.enterOuterAlt(localctx, 10);
            this.state = 752;
            this.match(apexParser.CONTINUE);
            this.state = 754;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.Identifier) {
                this.state = 753;
                this.match(apexParser.Identifier);
            }

            this.state = 756;
            this.match(apexParser.SEMI);
            break;
        case apexParser.SEMI:
            this.enterOuterAlt(localctx, 11);
            this.state = 757;
            this.match(apexParser.SEMI);
            break;
        case apexParser.SoqlLiteral:
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.NEW:
        case apexParser.SHORT:
        case apexParser.SUPER:
        case apexParser.THIS:
        case apexParser.VOID:
        case apexParser.IntegerLiteral:
        case apexParser.FloatingPointLiteral:
        case apexParser.BooleanLiteral:
        case apexParser.StringLiteral:
        case apexParser.NullLiteral:
        case apexParser.LPAREN:
        case apexParser.LT:
        case apexParser.BANG:
        case apexParser.TILDE:
        case apexParser.INC:
        case apexParser.DEC:
        case apexParser.ADD:
        case apexParser.SUB:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 12);
            this.state = 758;
            this.statementExpression();
            this.state = 759;
            this.match(apexParser.SEMI);
            break;
        case apexParser.DB_INSERT:
        case apexParser.DB_UPSERT:
        case apexParser.DB_UPDATE:
        case apexParser.DB_DELETE:
        case apexParser.DB_UNDELETE:
            this.enterOuterAlt(localctx, 13);
            this.state = 761;
            this.apexDbExpression();
            this.state = 762;
            this.match(apexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_propertyBlock;
    return this;
}

PropertyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBlockContext.prototype.constructor = PropertyBlockContext;

PropertyBlockContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

PropertyBlockContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

PropertyBlockContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

PropertyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPropertyBlock(this);
	}
};

PropertyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPropertyBlock(this);
	}
};

PropertyBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPropertyBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PropertyBlockContext = PropertyBlockContext;

apexParser.prototype.propertyBlock = function() {

    var localctx = new PropertyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, apexParser.RULE_propertyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 769;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (apexParser.PRIVATE - 37)) | (1 << (apexParser.PROTECTED - 37)) | (1 << (apexParser.PUBLIC - 37)) | (1 << (apexParser.STATIC - 37)) | (1 << (apexParser.TRANSIENT - 37)) | (1 << (apexParser.GLOBAL - 37)) | (1 << (apexParser.WEBSERVICE - 37)) | (1 << (apexParser.APEX_WITH_SHARING - 37)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 37)) | (1 << (apexParser.TESTMETHOD - 37)))) !== 0) || _la===apexParser.AT) {
            this.state = 766;
            this.modifier();
            this.state = 771;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 774;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.GET:
            this.state = 772;
            this.getter();
            break;
        case apexParser.SET:
            this.state = 773;
            this.setter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_getter;
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.GET = function() {
    return this.getToken(apexParser.GET, 0);
};

GetterContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

GetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterGetter(this);
	}
};

GetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitGetter(this);
	}
};

GetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitGetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.GetterContext = GetterContext;

apexParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, apexParser.RULE_getter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 776;
        this.match(apexParser.GET);
        this.state = 779;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SEMI:
            this.state = 777;
            this.match(apexParser.SEMI);
            break;
        case apexParser.LBRACE:
            this.state = 778;
            this.methodBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_setter;
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

SetterContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

SetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSetter(this);
	}
};

SetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSetter(this);
	}
};

SetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SetterContext = SetterContext;

apexParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, apexParser.RULE_setter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 781;
        this.match(apexParser.SET);
        this.state = 784;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SEMI:
            this.state = 782;
            this.match(apexParser.SEMI);
            break;
        case apexParser.LBRACE:
            this.state = 783;
            this.methodBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_catchClause;
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.CATCH = function() {
    return this.getToken(apexParser.CATCH, 0);
};

CatchClauseContext.prototype.catchType = function() {
    return this.getTypedRuleContext(CatchTypeContext,0);
};

CatchClauseContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

CatchClauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchClauseContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

CatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCatchClause(this);
	}
};

CatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCatchClause(this);
	}
};

CatchClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCatchClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CatchClauseContext = CatchClauseContext;

apexParser.prototype.catchClause = function() {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, apexParser.RULE_catchClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 786;
        this.match(apexParser.CATCH);
        this.state = 787;
        this.match(apexParser.LPAREN);
        this.state = 791;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 788;
            this.variableModifier();
            this.state = 793;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 794;
        this.catchType();
        this.state = 795;
        this.match(apexParser.Identifier);
        this.state = 796;
        this.match(apexParser.RPAREN);
        this.state = 797;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_catchType;
    return this;
}

CatchTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchTypeContext.prototype.constructor = CatchTypeContext;

CatchTypeContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

CatchTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCatchType(this);
	}
};

CatchTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCatchType(this);
	}
};

CatchTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCatchType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CatchTypeContext = CatchTypeContext;

apexParser.prototype.catchType = function() {

    var localctx = new CatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, apexParser.RULE_catchType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 799;
        this.qualifiedName();
        this.state = 804;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.BITOR) {
            this.state = 800;
            this.match(apexParser.BITOR);
            this.state = 801;
            this.qualifiedName();
            this.state = 806;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_finallyBlock;
    return this;
}

FinallyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyBlockContext.prototype.constructor = FinallyBlockContext;

FinallyBlockContext.prototype.FINALLY = function() {
    return this.getToken(apexParser.FINALLY, 0);
};

FinallyBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFinallyBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FinallyBlockContext = FinallyBlockContext;

apexParser.prototype.finallyBlock = function() {

    var localctx = new FinallyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, apexParser.RULE_finallyBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 807;
        this.match(apexParser.FINALLY);
        this.state = 808;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_forControl;
    return this;
}

ForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForControlContext.prototype.constructor = ForControlContext;

ForControlContext.prototype.enhancedForControl = function() {
    return this.getTypedRuleContext(EnhancedForControlContext,0);
};

ForControlContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

ForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForControlContext.prototype.forUpdate = function() {
    return this.getTypedRuleContext(ForUpdateContext,0);
};

ForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterForControl(this);
	}
};

ForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitForControl(this);
	}
};

ForControlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitForControl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ForControlContext = ForControlContext;

apexParser.prototype.forControl = function() {

    var localctx = new ForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, apexParser.RULE_forControl);
    var _la = 0; // Token type
    try {
        this.state = 822;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 810;
            this.enhancedForControl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (apexParser.IntegerLiteral - 68)) | (1 << (apexParser.FloatingPointLiteral - 68)) | (1 << (apexParser.BooleanLiteral - 68)) | (1 << (apexParser.StringLiteral - 68)) | (1 << (apexParser.NullLiteral - 68)) | (1 << (apexParser.LPAREN - 68)) | (1 << (apexParser.LT - 68)) | (1 << (apexParser.BANG - 68)) | (1 << (apexParser.TILDE - 68)) | (1 << (apexParser.INC - 68)) | (1 << (apexParser.DEC - 68)) | (1 << (apexParser.ADD - 68)) | (1 << (apexParser.SUB - 68)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
                this.state = 811;
                this.forInit();
            }

            this.state = 814;
            this.match(apexParser.SEMI);
            this.state = 816;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (apexParser.IntegerLiteral - 68)) | (1 << (apexParser.FloatingPointLiteral - 68)) | (1 << (apexParser.BooleanLiteral - 68)) | (1 << (apexParser.StringLiteral - 68)) | (1 << (apexParser.NullLiteral - 68)) | (1 << (apexParser.LPAREN - 68)) | (1 << (apexParser.LT - 68)) | (1 << (apexParser.BANG - 68)) | (1 << (apexParser.TILDE - 68)) | (1 << (apexParser.INC - 68)) | (1 << (apexParser.DEC - 68)) | (1 << (apexParser.ADD - 68)) | (1 << (apexParser.SUB - 68)))) !== 0) || _la===apexParser.Identifier) {
                this.state = 815;
                this.expression(0);
            }

            this.state = 818;
            this.match(apexParser.SEMI);
            this.state = 820;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (apexParser.IntegerLiteral - 68)) | (1 << (apexParser.FloatingPointLiteral - 68)) | (1 << (apexParser.BooleanLiteral - 68)) | (1 << (apexParser.StringLiteral - 68)) | (1 << (apexParser.NullLiteral - 68)) | (1 << (apexParser.LPAREN - 68)) | (1 << (apexParser.LT - 68)) | (1 << (apexParser.BANG - 68)) | (1 << (apexParser.TILDE - 68)) | (1 << (apexParser.INC - 68)) | (1 << (apexParser.DEC - 68)) | (1 << (apexParser.ADD - 68)) | (1 << (apexParser.SUB - 68)))) !== 0) || _la===apexParser.Identifier) {
                this.state = 819;
                this.forUpdate();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_forInit;
    return this;
}

ForInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitContext.prototype.constructor = ForInitContext;

ForInitContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

ForInitContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterForInit(this);
	}
};

ForInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitForInit(this);
	}
};

ForInitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitForInit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ForInitContext = ForInitContext;

apexParser.prototype.forInit = function() {

    var localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, apexParser.RULE_forInit);
    try {
        this.state = 826;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 824;
            this.localVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 825;
            this.expressionList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnhancedForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enhancedForControl;
    return this;
}

EnhancedForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForControlContext.prototype.constructor = EnhancedForControlContext;

EnhancedForControlContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

EnhancedForControlContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

EnhancedForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnhancedForControlContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

EnhancedForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnhancedForControl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnhancedForControlContext = EnhancedForControlContext;

apexParser.prototype.enhancedForControl = function() {

    var localctx = new EnhancedForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, apexParser.RULE_enhancedForControl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 831;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 828;
            this.variableModifier();
            this.state = 833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 834;
        this.type();
        this.state = 835;
        this.variableDeclaratorId();
        this.state = 836;
        this.match(apexParser.COLON);
        this.state = 837;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_forUpdate;
    return this;
}

ForUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForUpdateContext.prototype.constructor = ForUpdateContext;

ForUpdateContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterForUpdate(this);
	}
};

ForUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitForUpdate(this);
	}
};

ForUpdateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitForUpdate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ForUpdateContext = ForUpdateContext;

apexParser.prototype.forUpdate = function() {

    var localctx = new ForUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, apexParser.RULE_forUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 839;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_parExpression;
    return this;
}

ParExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParExpressionContext.prototype.constructor = ParExpressionContext;

ParExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterParExpression(this);
	}
};

ParExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitParExpression(this);
	}
};

ParExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitParExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ParExpressionContext = ParExpressionContext;

apexParser.prototype.parExpression = function() {

    var localctx = new ParExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, apexParser.RULE_parExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 841;
        this.match(apexParser.LPAREN);
        this.state = 842;
        this.expression(0);
        this.state = 843;
        this.match(apexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitExpressionList(this);
	}
};

ExpressionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitExpressionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ExpressionListContext = ExpressionListContext;

apexParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, apexParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 845;
        this.expression(0);
        this.state = 850;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 846;
            this.match(apexParser.COMMA);
            this.state = 847;
            this.expression(0);
            this.state = 852;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_statementExpression;
    return this;
}

StatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementExpressionContext.prototype.constructor = StatementExpressionContext;

StatementExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterStatementExpression(this);
	}
};

StatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitStatementExpression(this);
	}
};

StatementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitStatementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.StatementExpressionContext = StatementExpressionContext;

apexParser.prototype.statementExpression = function() {

    var localctx = new StatementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, apexParser.RULE_statementExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 853;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constantExpression;
    return this;
}

ConstantExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantExpressionContext.prototype.constructor = ConstantExpressionContext;

ConstantExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstantExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstantExpression(this);
	}
};

ConstantExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstantExpression(this);
	}
};

ConstantExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstantExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstantExpressionContext = ConstantExpressionContext;

apexParser.prototype.constantExpression = function() {

    var localctx = new ConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, apexParser.RULE_constantExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 855;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ApexDbExpressionShortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_apexDbExpressionShort;
    this.dml = null; // Token
    return this;
}

ApexDbExpressionShortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApexDbExpressionShortContext.prototype.constructor = ApexDbExpressionShortContext;

ApexDbExpressionShortContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ApexDbExpressionShortContext.prototype.DB_INSERT = function() {
    return this.getToken(apexParser.DB_INSERT, 0);
};

ApexDbExpressionShortContext.prototype.DB_UPSERT = function() {
    return this.getToken(apexParser.DB_UPSERT, 0);
};

ApexDbExpressionShortContext.prototype.DB_UPDATE = function() {
    return this.getToken(apexParser.DB_UPDATE, 0);
};

ApexDbExpressionShortContext.prototype.DB_DELETE = function() {
    return this.getToken(apexParser.DB_DELETE, 0);
};

ApexDbExpressionShortContext.prototype.DB_UNDELETE = function() {
    return this.getToken(apexParser.DB_UNDELETE, 0);
};

ApexDbExpressionShortContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterApexDbExpressionShort(this);
	}
};

ApexDbExpressionShortContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitApexDbExpressionShort(this);
	}
};

ApexDbExpressionShortContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitApexDbExpressionShort(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ApexDbExpressionShortContext = ApexDbExpressionShortContext;

apexParser.prototype.apexDbExpressionShort = function() {

    var localctx = new ApexDbExpressionShortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, apexParser.RULE_apexDbExpressionShort);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 857;
        localctx.dml = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (apexParser.DB_INSERT - 58)) | (1 << (apexParser.DB_UPSERT - 58)) | (1 << (apexParser.DB_UPDATE - 58)) | (1 << (apexParser.DB_DELETE - 58)) | (1 << (apexParser.DB_UNDELETE - 58)))) !== 0))) {
            localctx.dml = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 858;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ApexDbExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_apexDbExpression;
    return this;
}

ApexDbExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApexDbExpressionContext.prototype.constructor = ApexDbExpressionContext;

ApexDbExpressionContext.prototype.apexDbExpressionShort = function() {
    return this.getTypedRuleContext(ApexDbExpressionShortContext,0);
};

ApexDbExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterApexDbExpression(this);
	}
};

ApexDbExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitApexDbExpression(this);
	}
};

ApexDbExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitApexDbExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ApexDbExpressionContext = ApexDbExpressionContext;

apexParser.prototype.apexDbExpression = function() {

    var localctx = new ApexDbExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, apexParser.RULE_apexDbExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        this.apexDbExpressionShort();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TernalyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernalyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TernalyExpressionContext.prototype.constructor = TernalyExpressionContext;

apexParser.TernalyExpressionContext = TernalyExpressionContext;

TernalyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
TernalyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTernalyExpression(this);
	}
};

TernalyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTernalyExpression(this);
	}
};

TernalyExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTernalyExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreUnaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreUnaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PreUnaryExpressionContext.prototype.constructor = PreUnaryExpressionContext;

apexParser.PreUnaryExpressionContext = PreUnaryExpressionContext;

PreUnaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PreUnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPreUnaryExpression(this);
	}
};

PreUnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPreUnaryExpression(this);
	}
};

PreUnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPreUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArrayAccessContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayAccessContext.prototype = Object.create(ExpressionContext.prototype);
ArrayAccessContext.prototype.constructor = ArrayAccessContext;

apexParser.ArrayAccessContext = ArrayAccessContext;

ArrayAccessContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ArrayAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArrayAccess(this);
	}
};

ArrayAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArrayAccess(this);
	}
};

ArrayAccessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArrayAccess(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PostUnaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostUnaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PostUnaryExpressionContext.prototype.constructor = PostUnaryExpressionContext;

apexParser.PostUnaryExpressionContext = PostUnaryExpressionContext;

PostUnaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PostUnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPostUnaryExpression(this);
	}
};

PostUnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPostUnaryExpression(this);
	}
};

PostUnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPostUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PrimaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

apexParser.PrimaryExpressionContext = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};
PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPrimaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function OpExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OpExpressionContext.prototype = Object.create(ExpressionContext.prototype);
OpExpressionContext.prototype.constructor = OpExpressionContext;

apexParser.OpExpressionContext = OpExpressionContext;

OpExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

OpExpressionContext.prototype.explicitGenericInvocation = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationContext,0);
};

OpExpressionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

OpExpressionContext.prototype.INSTANCEOF = function() {
    return this.getToken(apexParser.INSTANCEOF, 0);
};
OpExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterOpExpression(this);
	}
};

OpExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitOpExpression(this);
	}
};

OpExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitOpExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NewExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

apexParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.NEW = function() {
    return this.getToken(apexParser.NEW, 0);
};

NewExpressionContext.prototype.creator = function() {
    return this.getTypedRuleContext(CreatorContext,0);
};
NewExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterNewExpression(this);
	}
};

NewExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitNewExpression(this);
	}
};

NewExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitNewExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

apexParser.UnaryExpressionContext = UnaryExpressionContext;

UnaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MethodInvocationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodInvocationContext.prototype = Object.create(ExpressionContext.prototype);
MethodInvocationContext.prototype.constructor = MethodInvocationContext;

apexParser.MethodInvocationContext = MethodInvocationContext;

MethodInvocationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MethodInvocationContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
MethodInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMethodInvocation(this);
	}
};

MethodInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMethodInvocation(this);
	}
};

MethodInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMethodInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CastExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

apexParser.CastExpressionContext = CastExpressionContext;

CastExpressionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

CastExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCastExpression(this);
	}
};

CastExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCastExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShiftExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ShiftExpressionContext.prototype.constructor = ShiftExpressionContext;

apexParser.ShiftExpressionContext = ShiftExpressionContext;

ShiftExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ShiftExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterShiftExpression(this);
	}
};

ShiftExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitShiftExpression(this);
	}
};

ShiftExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitShiftExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldAccessContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldAccessContext.prototype = Object.create(ExpressionContext.prototype);
FieldAccessContext.prototype.constructor = FieldAccessContext;

apexParser.FieldAccessContext = FieldAccessContext;

FieldAccessContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FieldAccessContext.prototype.accessor = function() {
    return this.getTypedRuleContext(AccessorContext,0);
};
FieldAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFieldAccess(this);
	}
};

FieldAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFieldAccess(this);
	}
};

FieldAccessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFieldAccess(this);
    } else {
        return visitor.visitChildren(this);
    }
};



apexParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 154;
    this.enterRecursionRule(localctx, 154, apexParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 875;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PrimaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 863;
            this.primary();
            break;

        case 2:
            localctx = new NewExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 864;
            this.match(apexParser.NEW);
            this.state = 865;
            this.creator();
            break;

        case 3:
            localctx = new CastExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 866;
            this.match(apexParser.LPAREN);
            this.state = 867;
            this.type();
            this.state = 868;
            this.match(apexParser.RPAREN);
            this.state = 869;
            this.expression(17);
            break;

        case 4:
            localctx = new PreUnaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 871;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 95)) & ~0x1f) == 0 && ((1 << (_la - 95)) & ((1 << (apexParser.INC - 95)) | (1 << (apexParser.DEC - 95)) | (1 << (apexParser.ADD - 95)) | (1 << (apexParser.SUB - 95)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 872;
            this.expression(15);
            break;

        case 5:
            localctx = new UnaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 873;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===apexParser.BANG || _la===apexParser.TILDE)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 874;
            this.expression(14);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 948;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 946;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 877;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 878;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (apexParser.MUL - 99)) | (1 << (apexParser.DIV - 99)) | (1 << (apexParser.MOD - 99)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 879;
                    this.expression(14);
                    break;

                case 2:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 880;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 881;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===apexParser.ADD || _la===apexParser.SUB)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 882;
                    this.expression(13);
                    break;

                case 3:
                    localctx = new ShiftExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 883;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 891;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 884;
                        this.match(apexParser.LT);
                        this.state = 885;
                        this.match(apexParser.LT);
                        break;

                    case 2:
                        this.state = 886;
                        this.match(apexParser.GT);
                        this.state = 887;
                        this.match(apexParser.GT);
                        this.state = 888;
                        this.match(apexParser.GT);
                        break;

                    case 3:
                        this.state = 889;
                        this.match(apexParser.GT);
                        this.state = 890;
                        this.match(apexParser.GT);
                        break;

                    }
                    this.state = 893;
                    this.expression(12);
                    break;

                case 4:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 894;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 895;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (apexParser.GT - 83)) | (1 << (apexParser.LT - 83)) | (1 << (apexParser.LE - 83)) | (1 << (apexParser.GE - 83)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 896;
                    this.expression(11);
                    break;

                case 5:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 897;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 898;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===apexParser.EQUAL || _la===apexParser.NOTEQUAL)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 899;
                    this.expression(9);
                    break;

                case 6:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 900;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 901;
                    localctx.op = this.match(apexParser.BITAND);
                    this.state = 902;
                    this.expression(8);
                    break;

                case 7:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 903;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 904;
                    localctx.op = this.match(apexParser.CARET);
                    this.state = 905;
                    this.expression(7);
                    break;

                case 8:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 906;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 907;
                    localctx.op = this.match(apexParser.BITOR);
                    this.state = 908;
                    this.expression(6);
                    break;

                case 9:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 909;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 910;
                    localctx.op = this.match(apexParser.AND);
                    this.state = 911;
                    this.expression(5);
                    break;

                case 10:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 912;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 913;
                    localctx.op = this.match(apexParser.OR);
                    this.state = 914;
                    this.expression(4);
                    break;

                case 11:
                    localctx = new TernalyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 915;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 916;
                    localctx.op = this.match(apexParser.QUESTION);
                    this.state = 917;
                    this.expression(0);
                    this.state = 918;
                    this.match(apexParser.COLON);
                    this.state = 919;
                    this.expression(3);
                    break;

                case 12:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 921;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 922;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (apexParser.ASSIGN - 82)) | (1 << (apexParser.ADD_ASSIGN - 82)) | (1 << (apexParser.SUB_ASSIGN - 82)) | (1 << (apexParser.MUL_ASSIGN - 82)) | (1 << (apexParser.DIV_ASSIGN - 82)) | (1 << (apexParser.AND_ASSIGN - 82)) | (1 << (apexParser.OR_ASSIGN - 82)) | (1 << (apexParser.XOR_ASSIGN - 82)) | (1 << (apexParser.MOD_ASSIGN - 82)) | (1 << (apexParser.LSHIFT_ASSIGN - 82)))) !== 0) || _la===apexParser.RSHIFT_ASSIGN || _la===apexParser.URSHIFT_ASSIGN)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 923;
                    this.expression(1);
                    break;

                case 13:
                    localctx = new FieldAccessContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 924;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 925;
                    this.match(apexParser.DOT);
                    this.state = 926;
                    this.accessor();
                    break;

                case 14:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 927;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 928;
                    this.match(apexParser.DOT);
                    this.state = 929;
                    this.explicitGenericInvocation();
                    break;

                case 15:
                    localctx = new ArrayAccessContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 930;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 931;
                    this.match(apexParser.LBRACK);
                    this.state = 932;
                    this.expression(0);
                    this.state = 933;
                    this.match(apexParser.RBRACK);
                    break;

                case 16:
                    localctx = new MethodInvocationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 935;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 936;
                    this.match(apexParser.LPAREN);
                    this.state = 938;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (apexParser.IntegerLiteral - 68)) | (1 << (apexParser.FloatingPointLiteral - 68)) | (1 << (apexParser.BooleanLiteral - 68)) | (1 << (apexParser.StringLiteral - 68)) | (1 << (apexParser.NullLiteral - 68)) | (1 << (apexParser.LPAREN - 68)) | (1 << (apexParser.LT - 68)) | (1 << (apexParser.BANG - 68)) | (1 << (apexParser.TILDE - 68)) | (1 << (apexParser.INC - 68)) | (1 << (apexParser.DEC - 68)) | (1 << (apexParser.ADD - 68)) | (1 << (apexParser.SUB - 68)))) !== 0) || _la===apexParser.Identifier) {
                        this.state = 937;
                        this.expressionList();
                    }

                    this.state = 940;
                    this.match(apexParser.RPAREN);
                    break;

                case 17:
                    localctx = new PostUnaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 941;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 942;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===apexParser.INC || _la===apexParser.DEC)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 18:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 943;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 944;
                    localctx.op = this.match(apexParser.INSTANCEOF);
                    this.state = 945;
                    this.type();
                    break;

                } 
            }
            this.state = 950;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryContext.prototype.THIS = function() {
    return this.getToken(apexParser.THIS, 0);
};

PrimaryContext.prototype.SUPER = function() {
    return this.getToken(apexParser.SUPER, 0);
};

PrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

PrimaryContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PrimaryContext.prototype.CLASS = function() {
    return this.getToken(apexParser.CLASS, 0);
};

PrimaryContext.prototype.VOID = function() {
    return this.getToken(apexParser.VOID, 0);
};

PrimaryContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

PrimaryContext.prototype.explicitGenericInvocationSuffix = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
};

PrimaryContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

PrimaryContext.prototype.SoqlLiteral = function() {
    return this.getToken(apexParser.SoqlLiteral, 0);
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPrimary(this);
	}
};

PrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PrimaryContext = PrimaryContext;

apexParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, apexParser.RULE_primary);
    try {
        this.state = 973;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 951;
            this.match(apexParser.LPAREN);
            this.state = 952;
            this.expression(0);
            this.state = 953;
            this.match(apexParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 955;
            this.match(apexParser.THIS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 956;
            this.match(apexParser.SUPER);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 957;
            this.literal();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 958;
            this.match(apexParser.Identifier);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 959;
            this.type();
            this.state = 960;
            this.match(apexParser.DOT);
            this.state = 961;
            this.match(apexParser.CLASS);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 963;
            this.match(apexParser.VOID);
            this.state = 964;
            this.match(apexParser.DOT);
            this.state = 965;
            this.match(apexParser.CLASS);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 966;
            this.nonWildcardTypeArguments();
            this.state = 970;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case apexParser.SUPER:
            case apexParser.Identifier:
                this.state = 967;
                this.explicitGenericInvocationSuffix();
                break;
            case apexParser.THIS:
                this.state = 968;
                this.match(apexParser.THIS);
                this.state = 969;
                this.arguments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 972;
            this.match(apexParser.SoqlLiteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_creator;
    return this;
}

CreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatorContext.prototype.constructor = CreatorContext;

CreatorContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

CreatorContext.prototype.createdName = function() {
    return this.getTypedRuleContext(CreatedNameContext,0);
};

CreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

CreatorContext.prototype.arrayCreatorRest = function() {
    return this.getTypedRuleContext(ArrayCreatorRestContext,0);
};

CreatorContext.prototype.mapCreatorRest = function() {
    return this.getTypedRuleContext(MapCreatorRestContext,0);
};

CreatorContext.prototype.setCreatorRest = function() {
    return this.getTypedRuleContext(SetCreatorRestContext,0);
};

CreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCreator(this);
	}
};

CreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCreator(this);
	}
};

CreatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCreator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CreatorContext = CreatorContext;

apexParser.prototype.creator = function() {

    var localctx = new CreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, apexParser.RULE_creator);
    try {
        this.state = 986;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LT:
            this.enterOuterAlt(localctx, 1);
            this.state = 975;
            this.nonWildcardTypeArguments();
            this.state = 976;
            this.createdName();
            this.state = 977;
            this.classCreatorRest();
            break;
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 979;
            this.createdName();
            this.state = 984;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
            switch(la_) {
            case 1:
                this.state = 980;
                this.arrayCreatorRest();
                break;

            case 2:
                this.state = 981;
                this.classCreatorRest();
                break;

            case 3:
                this.state = 982;
                this.mapCreatorRest();
                break;

            case 4:
                this.state = 983;
                this.setCreatorRest();
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreatedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_createdName;
    return this;
}

CreatedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatedNameContext.prototype.constructor = CreatedNameContext;

CreatedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


CreatedNameContext.prototype.typeArgumentsOrDiamond = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsOrDiamondContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,i);
    }
};

CreatedNameContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

CreatedNameContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

CreatedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCreatedName(this);
	}
};

CreatedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCreatedName(this);
	}
};

CreatedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCreatedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CreatedNameContext = CreatedNameContext;

apexParser.prototype.createdName = function() {

    var localctx = new CreatedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, apexParser.RULE_createdName);
    var _la = 0; // Token type
    try {
        this.state = 1005;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 988;
            this.match(apexParser.Identifier);
            this.state = 990;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.LT) {
                this.state = 989;
                this.typeArgumentsOrDiamond();
            }

            this.state = 999;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===apexParser.DOT) {
                this.state = 992;
                this.match(apexParser.DOT);
                this.state = 993;
                this.match(apexParser.Identifier);
                this.state = 995;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===apexParser.LT) {
                    this.state = 994;
                    this.typeArgumentsOrDiamond();
                }

                this.state = 1001;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1002;
            this.primitiveType();
            break;
        case apexParser.SET:
            this.enterOuterAlt(localctx, 3);
            this.state = 1003;
            this.match(apexParser.SET);
            this.state = 1004;
            this.typeArgumentsOrDiamond();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InnerCreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_innerCreator;
    return this;
}

InnerCreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerCreatorContext.prototype.constructor = InnerCreatorContext;

InnerCreatorContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

InnerCreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

InnerCreatorContext.prototype.nonWildcardTypeArgumentsOrDiamond = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsOrDiamondContext,0);
};

InnerCreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInnerCreator(this);
	}
};

InnerCreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInnerCreator(this);
	}
};

InnerCreatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInnerCreator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InnerCreatorContext = InnerCreatorContext;

apexParser.prototype.innerCreator = function() {

    var localctx = new InnerCreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, apexParser.RULE_innerCreator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1007;
        this.match(apexParser.Identifier);
        this.state = 1009;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LT) {
            this.state = 1008;
            this.nonWildcardTypeArgumentsOrDiamond();
        }

        this.state = 1011;
        this.classCreatorRest();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_arrayCreatorRest;
    return this;
}

ArrayCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayCreatorRestContext.prototype.constructor = ArrayCreatorRestContext;

ArrayCreatorRestContext.prototype.typedArray = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypedArrayContext);
    } else {
        return this.getTypedRuleContext(TypedArrayContext,i);
    }
};

ArrayCreatorRestContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

ArrayCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArrayCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ArrayCreatorRestContext = ArrayCreatorRestContext;

apexParser.prototype.arrayCreatorRest = function() {

    var localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, apexParser.RULE_arrayCreatorRest);
    var _la = 0; // Token type
    try {
        this.state = 1040;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1013;
            this.typedArray();
            this.state = 1017;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===apexParser.LBRACK) {
                this.state = 1014;
                this.typedArray();
                this.state = 1019;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1020;
            this.arrayInitializer();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1022;
            this.match(apexParser.LBRACK);
            this.state = 1023;
            this.expression(0);
            this.state = 1024;
            this.match(apexParser.RBRACK);
            this.state = 1031;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1025;
                    this.match(apexParser.LBRACK);
                    this.state = 1026;
                    this.expression(0);
                    this.state = 1027;
                    this.match(apexParser.RBRACK); 
                }
                this.state = 1033;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
            }

            this.state = 1037;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1034;
                    this.typedArray(); 
                }
                this.state = 1039;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_mapCreatorRest;
    return this;
}

MapCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapCreatorRestContext.prototype.constructor = MapCreatorRestContext;

MapCreatorRestContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


MapCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MapCreatorRestContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

MapCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMapCreatorRest(this);
	}
};

MapCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMapCreatorRest(this);
	}
};

MapCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMapCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MapCreatorRestContext = MapCreatorRestContext;

apexParser.prototype.mapCreatorRest = function() {

    var localctx = new MapCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, apexParser.RULE_mapCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1042;
        this.match(apexParser.LBRACE);
        this.state = 1045;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1043;
            this.match(apexParser.Identifier);
            break;

        case 2:
            this.state = 1044;
            this.expression(0);
            break;

        }
        this.state = 1047;
        this.match(apexParser.LAMBDA_LIKE);
        this.state = 1050;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1048;
            this.literal();
            break;

        case 2:
            this.state = 1049;
            this.expression(0);
            break;

        }
        this.state = 1064;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 1052;
            this.match(apexParser.COMMA);
            this.state = 1055;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1053;
                this.match(apexParser.Identifier);
                break;

            case 2:
                this.state = 1054;
                this.expression(0);
                break;

            }
            this.state = 1057;
            this.match(apexParser.LAMBDA_LIKE);
            this.state = 1060;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1058;
                this.literal();
                break;

            case 2:
                this.state = 1059;
                this.expression(0);
                break;

            }
            this.state = 1066;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1067;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_setCreatorRest;
    return this;
}

SetCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetCreatorRestContext.prototype.constructor = SetCreatorRestContext;

SetCreatorRestContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

SetCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSetCreatorRest(this);
	}
};

SetCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSetCreatorRest(this);
	}
};

SetCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSetCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SetCreatorRestContext = SetCreatorRestContext;

apexParser.prototype.setCreatorRest = function() {

    var localctx = new SetCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, apexParser.RULE_setCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1069;
        this.match(apexParser.LBRACE);
        this.state = 1072;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1070;
            this.literal();
            break;

        case 2:
            this.state = 1071;
            this.expression(0);
            break;

        }
        this.state = 1081;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 1074;
            this.match(apexParser.COMMA);
            this.state = 1077;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1075;
                this.literal();
                break;

            case 2:
                this.state = 1076;
                this.expression(0);
                break;

            }
            this.state = 1083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1084;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classCreatorRest;
    return this;
}

ClassCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassCreatorRestContext.prototype.constructor = ClassCreatorRestContext;

ClassCreatorRestContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ClassCreatorRestContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassCreatorRest(this);
	}
};

ClassCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassCreatorRest(this);
	}
};

ClassCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassCreatorRestContext = ClassCreatorRestContext;

apexParser.prototype.classCreatorRest = function() {

    var localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, apexParser.RULE_classCreatorRest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1086;
        this.arguments();
        this.state = 1088;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        if(la_===1) {
            this.state = 1087;
            this.classBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitGenericInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_explicitGenericInvocation;
    return this;
}

ExplicitGenericInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitGenericInvocationContext.prototype.constructor = ExplicitGenericInvocationContext;

ExplicitGenericInvocationContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

ExplicitGenericInvocationContext.prototype.explicitGenericInvocationSuffix = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
};

ExplicitGenericInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterExplicitGenericInvocation(this);
	}
};

ExplicitGenericInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitExplicitGenericInvocation(this);
	}
};

ExplicitGenericInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitExplicitGenericInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ExplicitGenericInvocationContext = ExplicitGenericInvocationContext;

apexParser.prototype.explicitGenericInvocation = function() {

    var localctx = new ExplicitGenericInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, apexParser.RULE_explicitGenericInvocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1090;
        this.nonWildcardTypeArguments();
        this.state = 1091;
        this.explicitGenericInvocationSuffix();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonWildcardTypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_nonWildcardTypeArguments;
    return this;
}

NonWildcardTypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonWildcardTypeArgumentsContext.prototype.constructor = NonWildcardTypeArgumentsContext;

NonWildcardTypeArgumentsContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

NonWildcardTypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterNonWildcardTypeArguments(this);
	}
};

NonWildcardTypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitNonWildcardTypeArguments(this);
	}
};

NonWildcardTypeArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitNonWildcardTypeArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.NonWildcardTypeArgumentsContext = NonWildcardTypeArgumentsContext;

apexParser.prototype.nonWildcardTypeArguments = function() {

    var localctx = new NonWildcardTypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, apexParser.RULE_nonWildcardTypeArguments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1093;
        this.match(apexParser.LT);
        this.state = 1094;
        this.typeList();
        this.state = 1095;
        this.match(apexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeArgumentsOrDiamond;
    return this;
}

TypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsOrDiamondContext.prototype.constructor = TypeArgumentsOrDiamondContext;

TypeArgumentsOrDiamondContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

TypeArgumentsOrDiamondContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeArgumentsOrDiamond(this);
	}
};

TypeArgumentsOrDiamondContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeArgumentsOrDiamond(this);
	}
};

TypeArgumentsOrDiamondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeArgumentsOrDiamond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext;

apexParser.prototype.typeArgumentsOrDiamond = function() {

    var localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, apexParser.RULE_typeArgumentsOrDiamond);
    try {
        this.state = 1100;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1097;
            this.match(apexParser.LT);
            this.state = 1098;
            this.match(apexParser.GT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1099;
            this.typeArguments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonWildcardTypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_nonWildcardTypeArgumentsOrDiamond;
    return this;
}

NonWildcardTypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonWildcardTypeArgumentsOrDiamondContext.prototype.constructor = NonWildcardTypeArgumentsOrDiamondContext;

NonWildcardTypeArgumentsOrDiamondContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterNonWildcardTypeArgumentsOrDiamond(this);
	}
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitNonWildcardTypeArgumentsOrDiamond(this);
	}
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitNonWildcardTypeArgumentsOrDiamond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.NonWildcardTypeArgumentsOrDiamondContext = NonWildcardTypeArgumentsOrDiamondContext;

apexParser.prototype.nonWildcardTypeArgumentsOrDiamond = function() {

    var localctx = new NonWildcardTypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, apexParser.RULE_nonWildcardTypeArgumentsOrDiamond);
    try {
        this.state = 1105;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1102;
            this.match(apexParser.LT);
            this.state = 1103;
            this.match(apexParser.GT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1104;
            this.nonWildcardTypeArguments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuperSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_superSuffix;
    return this;
}

SuperSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperSuffixContext.prototype.constructor = SuperSuffixContext;

SuperSuffixContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

SuperSuffixContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

SuperSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSuperSuffix(this);
	}
};

SuperSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSuperSuffix(this);
	}
};

SuperSuffixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSuperSuffix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SuperSuffixContext = SuperSuffixContext;

apexParser.prototype.superSuffix = function() {

    var localctx = new SuperSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, apexParser.RULE_superSuffix);
    try {
        this.state = 1113;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1107;
            this.arguments();
            break;
        case apexParser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1108;
            this.match(apexParser.DOT);
            this.state = 1109;
            this.match(apexParser.Identifier);
            this.state = 1111;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
            if(la_===1) {
                this.state = 1110;
                this.arguments();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitGenericInvocationSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_explicitGenericInvocationSuffix;
    return this;
}

ExplicitGenericInvocationSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitGenericInvocationSuffixContext.prototype.constructor = ExplicitGenericInvocationSuffixContext;

ExplicitGenericInvocationSuffixContext.prototype.SUPER = function() {
    return this.getToken(apexParser.SUPER, 0);
};

ExplicitGenericInvocationSuffixContext.prototype.superSuffix = function() {
    return this.getTypedRuleContext(SuperSuffixContext,0);
};

ExplicitGenericInvocationSuffixContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ExplicitGenericInvocationSuffixContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ExplicitGenericInvocationSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterExplicitGenericInvocationSuffix(this);
	}
};

ExplicitGenericInvocationSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitExplicitGenericInvocationSuffix(this);
	}
};

ExplicitGenericInvocationSuffixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitExplicitGenericInvocationSuffix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ExplicitGenericInvocationSuffixContext = ExplicitGenericInvocationSuffixContext;

apexParser.prototype.explicitGenericInvocationSuffix = function() {

    var localctx = new ExplicitGenericInvocationSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, apexParser.RULE_explicitGenericInvocationSuffix);
    try {
        this.state = 1119;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SUPER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1115;
            this.match(apexParser.SUPER);
            this.state = 1116;
            this.superSuffix();
            break;
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1117;
            this.match(apexParser.Identifier);
            this.state = 1118;
            this.arguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArguments(this);
	}
};

ArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ArgumentsContext = ArgumentsContext;

apexParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, apexParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1121;
        this.match(apexParser.LPAREN);
        this.state = 1123;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SoqlLiteral) | (1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (apexParser.LONG - 33)) | (1 << (apexParser.NEW - 33)) | (1 << (apexParser.SHORT - 33)) | (1 << (apexParser.SUPER - 33)) | (1 << (apexParser.THIS - 33)) | (1 << (apexParser.VOID - 33)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (apexParser.IntegerLiteral - 68)) | (1 << (apexParser.FloatingPointLiteral - 68)) | (1 << (apexParser.BooleanLiteral - 68)) | (1 << (apexParser.StringLiteral - 68)) | (1 << (apexParser.NullLiteral - 68)) | (1 << (apexParser.LPAREN - 68)) | (1 << (apexParser.LT - 68)) | (1 << (apexParser.BANG - 68)) | (1 << (apexParser.TILDE - 68)) | (1 << (apexParser.INC - 68)) | (1 << (apexParser.DEC - 68)) | (1 << (apexParser.ADD - 68)) | (1 << (apexParser.SUB - 68)))) !== 0) || _la===apexParser.Identifier) {
            this.state = 1122;
            this.expressionList();
        }

        this.state = 1125;
        this.match(apexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AccessorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_accessor;
    return this;
}

AccessorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AccessorContext.prototype.constructor = AccessorContext;

AccessorContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

AccessorContext.prototype.GET = function() {
    return this.getToken(apexParser.GET, 0);
};

AccessorContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

AccessorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAccessor(this);
	}
};

AccessorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAccessor(this);
	}
};

AccessorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAccessor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AccessorContext = AccessorContext;

apexParser.prototype.accessor = function() {

    var localctx = new AccessorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, apexParser.RULE_accessor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1127;
        _la = this._input.LA(1);
        if(!(_la===apexParser.SET || _la===apexParser.GET || _la===apexParser.Identifier)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


apexParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 77:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

apexParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 13);
		case 1:
			return this.precpred(this._ctx, 12);
		case 2:
			return this.precpred(this._ctx, 11);
		case 3:
			return this.precpred(this._ctx, 10);
		case 4:
			return this.precpred(this._ctx, 8);
		case 5:
			return this.precpred(this._ctx, 7);
		case 6:
			return this.precpred(this._ctx, 6);
		case 7:
			return this.precpred(this._ctx, 5);
		case 8:
			return this.precpred(this._ctx, 4);
		case 9:
			return this.precpred(this._ctx, 3);
		case 10:
			return this.precpred(this._ctx, 2);
		case 11:
			return this.precpred(this._ctx, 1);
		case 12:
			return this.precpred(this._ctx, 22);
		case 13:
			return this.precpred(this._ctx, 21);
		case 14:
			return this.precpred(this._ctx, 20);
		case 15:
			return this.precpred(this._ctx, 19);
		case 16:
			return this.precpred(this._ctx, 16);
		case 17:
			return this.precpred(this._ctx, 9);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.apexParser = apexParser;
