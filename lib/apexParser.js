// Generated from lib/apex.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var apexListener = require('./apexListener').apexListener;
var apexVisitor = require('./apexVisitor').apexVisitor;

var grammarFileName = "apex.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u009e\u0560\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0007",
    "\u0003\u00f7\n\u0003\f\u0003\u000e\u0003\u00fa\u000b\u0003\u0003\u0003",
    "\u0003\u0003\u0007\u0003\u00fe\n\u0003\f\u0003\u000e\u0003\u0101\u000b",
    "\u0003\u0003\u0003\u0003\u0003\u0007\u0003\u0105\n\u0003\f\u0003\u000e",
    "\u0003\u0108\u000b\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003",
    "\u010d\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0007\u0005\u011b\n\u0005\f\u0005\u000e\u0005\u011e",
    "\u000b\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u0125\n\u0007\u0003\b\u0003\b\u0005\b\u0129\n\b\u0003\t",
    "\u0003\t\u0005\t\u012d\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0133",
    "\n\n\u0003\n\u0003\n\u0005\n\u0137\n\n\u0003\n\u0003\n\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u013f\n\u000b\u0003\u000b",
    "\u0003\u000b\u0005\u000b\u0143\n\u000b\u0003\u000b\u0005\u000b\u0146",
    "\n\u000b\u0003\u000b\u0005\u000b\u0149\n\u000b\u0003\u000b\u0003\u000b",
    "\u0003\f\u0003\f\u0003\f\u0007\f\u0150\n\f\f\f\u000e\f\u0153\u000b\f",
    "\u0003\r\u0007\r\u0156\n\r\f\r\u000e\r\u0159\u000b\r\u0003\r\u0003\r",
    "\u0005\r\u015d\n\r\u0003\r\u0005\r\u0160\n\r\u0003\u000e\u0003\u000e",
    "\u0007\u000e\u0164\n\u000e\f\u000e\u000e\u000e\u0167\u000b\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u016d\n\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010",
    "\u0174\n\u0010\f\u0010\u000e\u0010\u0177\u000b\u0010\u0003\u0011\u0003",
    "\u0011\u0007\u0011\u017b\n\u0011\f\u0011\u000e\u0011\u017e\u000b\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0007\u0012\u0184\n",
    "\u0012\f\u0012\u000e\u0012\u0187\u000b\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u018d\n\u0013\u0003\u0013\u0003",
    "\u0013\u0007\u0013\u0191\n\u0013\f\u0013\u000e\u0013\u0194\u000b\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u0198\n\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005",
    "\u0014\u01a1\n\u0014\u0003\u0015\u0005\u0015\u01a4\n\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u01a8\n\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0007\u0015\u01ae\n\u0015\f\u0015\u000e\u0015\u01b1",
    "\u000b\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u01b5\n\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u01b9\n\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u01bf\n\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u01ce\n\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0007\u001a",
    "\u01d3\n\u001a\f\u001a\u000e\u001a\u01d6\u000b\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u01da\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u01e1\n\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u01e7\n\u001c\f\u001c\u000e",
    "\u001c\u01ea\u000b\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0007\u001d\u01f1\n\u001d\f\u001d\u000e\u001d\u01f4\u000b",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u01fb\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0007\u001e\u0201\n\u001e\f\u001e\u000e\u001e\u0204\u000b\u001e\u0003",
    "\u001e\u0003\u001e\u0005\u001e\u0208\n\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u020f\n\u001f\f\u001f",
    "\u000e\u001f\u0212\u000b\u001f\u0003 \u0003 \u0003 \u0005 \u0217\n ",
    "\u0003!\u0003!\u0003!\u0007!\u021c\n!\f!\u000e!\u021f\u000b!\u0003\"",
    "\u0003\"\u0005\"\u0223\n\"\u0003#\u0003#\u0003#\u0003#\u0007#\u0229",
    "\n#\f#\u000e#\u022c\u000b#\u0003#\u0005#\u022f\n#\u0005#\u0231\n#\u0003",
    "#\u0003#\u0003$\u0003$\u0003%\u0003%\u0007%\u0239\n%\f%\u000e%\u023c",
    "\u000b%\u0003%\u0003%\u0007%\u0240\n%\f%\u000e%\u0243\u000b%\u0005%",
    "\u0245\n%\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0005\'\u024c\n\'\u0003",
    "\'\u0003\'\u0003\'\u0005\'\u0251\n\'\u0007\'\u0253\n\'\f\'\u000e\'\u0256",
    "\u000b\'\u0003\'\u0003\'\u0005\'\u025a\n\'\u0003(\u0003(\u0003)\u0003",
    ")\u0003)\u0003)\u0007)\u0262\n)\f)\u000e)\u0265\u000b)\u0003)\u0003",
    ")\u0003*\u0003*\u0003*\u0003*\u0005*\u026d\n*\u0005*\u026f\n*\u0003",
    "+\u0003+\u0003+\u0007+\u0274\n+\f+\u000e+\u0277\u000b+\u0003,\u0003",
    ",\u0005,\u027b\n,\u0003,\u0003,\u0003-\u0003-\u0003-\u0007-\u0282\n",
    "-\f-\u000e-\u0285\u000b-\u0003-\u0003-\u0005-\u0289\n-\u0003-\u0005",
    "-\u028c\n-\u0003.\u0007.\u028f\n.\f.\u000e.\u0292\u000b.\u0003.\u0003",
    ".\u0003.\u0003/\u0007/\u0298\n/\f/\u000e/\u029b\u000b/\u0003/\u0003",
    "/\u0003/\u0003/\u00030\u00030\u00031\u00031\u00032\u00032\u00032\u0007",
    "2\u02a8\n2\f2\u000e2\u02ab\u000b2\u00033\u00033\u00034\u00034\u0003",
    "4\u00034\u00034\u00054\u02b4\n4\u00034\u00054\u02b7\n4\u00035\u0003",
    "5\u00036\u00036\u00036\u00076\u02be\n6\f6\u000e6\u02c1\u000b6\u0003",
    "7\u00037\u00037\u00037\u00038\u00038\u00038\u00058\u02ca\n8\u00039\u0003",
    "9\u00039\u00039\u00079\u02d0\n9\f9\u000e9\u02d3\u000b9\u00059\u02d5",
    "\n9\u00039\u00059\u02d8\n9\u00039\u00039\u0003:\u0003:\u0007:\u02de",
    "\n:\f:\u000e:\u02e1\u000b:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003",
    ";\u0005;\u02e9\n;\u0003<\u0003<\u0003=\u0003=\u0003=\u0003>\u0007>\u02f1",
    "\n>\f>\u000e>\u02f4\u000b>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0005?\u02ff\n?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0006?\u031a\n?\r?\u000e?\u031b\u0003?\u0005?\u031f\n?\u0003?\u0005",
    "?\u0322\n?\u0003?\u0003?\u0005?\u0326\n?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0005?\u032f\n?\u0003?\u0003?\u0003?\u0005?\u0334",
    "\n?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u033e",
    "\n?\u0003@\u0007@\u0341\n@\f@\u000e@\u0344\u000b@\u0003@\u0003@\u0005",
    "@\u0348\n@\u0003A\u0003A\u0003A\u0005A\u034d\nA\u0003B\u0003B\u0003",
    "B\u0005B\u0352\nB\u0003C\u0003C\u0003C\u0007C\u0357\nC\fC\u000eC\u035a",
    "\u000bC\u0003C\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0007",
    "D\u0364\nD\fD\u000eD\u0367\u000bD\u0003E\u0003E\u0003E\u0003F\u0003",
    "F\u0007F\u036e\nF\fF\u000eF\u0371\u000bF\u0003F\u0003F\u0003F\u0005",
    "F\u0376\nF\u0003G\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0007H\u037f",
    "\nH\fH\u000eH\u0382\u000bH\u0003H\u0003H\u0003H\u0005H\u0387\nH\u0003",
    "I\u0003I\u0005I\u038b\nI\u0003I\u0003I\u0005I\u038f\nI\u0003I\u0003",
    "I\u0005I\u0393\nI\u0005I\u0395\nI\u0003J\u0003J\u0005J\u0399\nJ\u0003",
    "K\u0007K\u039c\nK\fK\u000eK\u039f\u000bK\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003L\u0003L\u0003M\u0003M\u0003M\u0003M\u0003N\u0003N\u0003",
    "N\u0007N\u03af\nN\fN\u000eN\u03b2\u000bN\u0003O\u0003O\u0003P\u0003",
    "P\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u03ca",
    "\nS\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0005S\u03da\nS\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0005S\u0409\nS\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0007",
    "S\u0411\nS\fS\u000eS\u0414\u000bS\u0003T\u0003T\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0005T\u0429\nT\u0003T\u0003T\u0005T\u042d",
    "\nT\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005",
    "U\u0438\nU\u0005U\u043a\nU\u0003V\u0003V\u0005V\u043e\nV\u0003V\u0003",
    "V\u0003V\u0005V\u0443\nV\u0007V\u0445\nV\fV\u000eV\u0448\u000bV\u0003",
    "V\u0003V\u0003V\u0005V\u044d\nV\u0003W\u0003W\u0005W\u0451\nW\u0003",
    "W\u0003W\u0003X\u0003X\u0007X\u0457\nX\fX\u000eX\u045a\u000bX\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0007X\u0465",
    "\nX\fX\u000eX\u0468\u000bX\u0003X\u0007X\u046b\nX\fX\u000eX\u046e\u000b",
    "X\u0005X\u0470\nX\u0003Y\u0003Y\u0003Y\u0005Y\u0475\nY\u0003Y\u0003",
    "Y\u0003Y\u0005Y\u047a\nY\u0003Y\u0003Y\u0003Y\u0005Y\u047f\nY\u0003",
    "Y\u0003Y\u0003Y\u0005Y\u0484\nY\u0007Y\u0486\nY\fY\u000eY\u0489\u000b",
    "Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0005Z\u0490\nZ\u0003Z\u0003Z\u0003",
    "Z\u0005Z\u0495\nZ\u0007Z\u0497\nZ\fZ\u000eZ\u049a\u000bZ\u0003Z\u0003",
    "Z\u0003[\u0003[\u0005[\u04a0\n[\u0003\\\u0003\\\u0003\\\u0003]\u0003",
    "]\u0003]\u0003]\u0003^\u0003^\u0003^\u0005^\u04ac\n^\u0003_\u0003_\u0003",
    "_\u0005_\u04b1\n_\u0003`\u0003`\u0003`\u0003`\u0005`\u04b7\n`\u0005",
    "`\u04b9\n`\u0003a\u0003a\u0003a\u0003a\u0005a\u04bf\na\u0003b\u0003",
    "b\u0005b\u04c3\nb\u0003b\u0003b\u0003c\u0003c\u0003d\u0003d\u0003d\u0003",
    "d\u0003e\u0003e\u0003e\u0005e\u04d0\ne\u0003e\u0005e\u04d3\ne\u0003",
    "e\u0005e\u04d6\ne\u0003e\u0005e\u04d9\ne\u0003e\u0005e\u04dc\ne\u0003",
    "e\u0005e\u04df\ne\u0003e\u0005e\u04e2\ne\u0003f\u0003f\u0003f\u0003",
    "g\u0003g\u0003g\u0007g\u04ea\ng\fg\u000eg\u04ed\u000bg\u0003h\u0003",
    "h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0006h\u04f7\nh\rh\u000e",
    "h\u04f8\u0003h\u0003h\u0003h\u0003h\u0005h\u04ff\nh\u0003i\u0003i\u0003",
    "i\u0003i\u0003i\u0005i\u0506\ni\u0003j\u0003j\u0003k\u0003k\u0007k\u050c",
    "\nk\fk\u000ek\u050f\u000bk\u0003k\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0007k\u0517\nk\fk\u000ek\u051a\u000bk\u0003k\u0003k\u0005k\u051e",
    "\nk\u0003l\u0003l\u0003m\u0003m\u0003m\u0003m\u0007m\u0526\nm\fm\u000e",
    "m\u0529\u000bm\u0003n\u0003n\u0003n\u0003n\u0003o\u0003o\u0003o\u0005",
    "o\u0532\no\u0003p\u0003p\u0003p\u0003p\u0005p\u0538\np\u0003p\u0003",
    "p\u0005p\u053c\np\u0003q\u0003q\u0003q\u0003r\u0003r\u0003s\u0003s\u0003",
    "s\u0003s\u0003s\u0003t\u0003t\u0003u\u0003u\u0003u\u0003u\u0003u\u0005",
    "u\u054f\nu\u0003v\u0003v\u0003w\u0003w\u0003x\u0003x\u0003x\u0005x\u0558",
    "\nx\u0003y\u0003y\u0003y\u0003y\u0005y\u055e\ny\u0003y\u0002\u0003\u00a4",
    "z\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u0002\u0016\u0003\u0002",
    "bc\u0003\u0002Z^\t\u0002\u0003\u0004\b\b\u0017\u0017&(++8;__\n\u0002",
    "\t\t\u000b\u000b\r\r\u0013\u0013\u0019\u0019  \"\"**\u0004\u0002\u0016",
    "\u0016,,\u0003\u0002dh\u0003\u0002\u007f\u0080\u0004\u0002uu\u0081\u0082",
    "\u0004\u0002\u0083\u0084\u0088\u0088\u0003\u0002\u0081\u0082\u0004\u0002",
    "stz{\u0004\u0002yy||\u0004\u0002rr\u0089\u0093\u0004\u0002\u0005\u0006",
    "\u0095\u0095\u0003\u0002}~\u0005\u0002XXrtz|\u0003\u0002BC\u0003\u0002",
    "ST\u0003\u0002FG\u0003\u0002HI\u0002\u05c0\u0002\u00f2\u0003\u0002\u0002",
    "\u0002\u0004\u010c\u0003\u0002\u0002\u0002\u0006\u010e\u0003\u0002\u0002",
    "\u0002\b\u0117\u0003\u0002\u0002\u0002\n\u011f\u0003\u0002\u0002\u0002",
    "\f\u0124\u0003\u0002\u0002\u0002\u000e\u0128\u0003\u0002\u0002\u0002",
    "\u0010\u012c\u0003\u0002\u0002\u0002\u0012\u012e\u0003\u0002\u0002\u0002",
    "\u0014\u013a\u0003\u0002\u0002\u0002\u0016\u014c\u0003\u0002\u0002\u0002",
    "\u0018\u0157\u0003\u0002\u0002\u0002\u001a\u0161\u0003\u0002\u0002\u0002",
    "\u001c\u0168\u0003\u0002\u0002\u0002\u001e\u0170\u0003\u0002\u0002\u0002",
    " \u0178\u0003\u0002\u0002\u0002\"\u0181\u0003\u0002\u0002\u0002$\u0197",
    "\u0003\u0002\u0002\u0002&\u01a0\u0003\u0002\u0002\u0002(\u01a3\u0003",
    "\u0002\u0002\u0002*\u01ba\u0003\u0002\u0002\u0002,\u01c2\u0003\u0002",
    "\u0002\u0002.\u01c6\u0003\u0002\u0002\u00020\u01ca\u0003\u0002\u0002",
    "\u00022\u01d9\u0003\u0002\u0002\u00024\u01e0\u0003\u0002\u0002\u0002",
    "6\u01e2\u0003\u0002\u0002\u00028\u01ed\u0003\u0002\u0002\u0002:\u01fa",
    "\u0003\u0002\u0002\u0002<\u020b\u0003\u0002\u0002\u0002>\u0213\u0003",
    "\u0002\u0002\u0002@\u0218\u0003\u0002\u0002\u0002B\u0222\u0003\u0002",
    "\u0002\u0002D\u0224\u0003\u0002\u0002\u0002F\u0234\u0003\u0002\u0002",
    "\u0002H\u0244\u0003\u0002\u0002\u0002J\u0246\u0003\u0002\u0002\u0002",
    "L\u0259\u0003\u0002\u0002\u0002N\u025b\u0003\u0002\u0002\u0002P\u025d",
    "\u0003\u0002\u0002\u0002R\u026e\u0003\u0002\u0002\u0002T\u0270\u0003",
    "\u0002\u0002\u0002V\u0278\u0003\u0002\u0002\u0002X\u028b\u0003\u0002",
    "\u0002\u0002Z\u0290\u0003\u0002\u0002\u0002\\\u0299\u0003\u0002\u0002",
    "\u0002^\u02a0\u0003\u0002\u0002\u0002`\u02a2\u0003\u0002\u0002\u0002",
    "b\u02a4\u0003\u0002\u0002\u0002d\u02ac\u0003\u0002\u0002\u0002f\u02ae",
    "\u0003\u0002\u0002\u0002h\u02b8\u0003\u0002\u0002\u0002j\u02ba\u0003",
    "\u0002\u0002\u0002l\u02c2\u0003\u0002\u0002\u0002n\u02c9\u0003\u0002",
    "\u0002\u0002p\u02cb\u0003\u0002\u0002\u0002r\u02db\u0003\u0002\u0002",
    "\u0002t\u02e8\u0003\u0002\u0002\u0002v\u02ea\u0003\u0002\u0002\u0002",
    "x\u02ec\u0003\u0002\u0002\u0002z\u02f2\u0003\u0002\u0002\u0002|\u033d",
    "\u0003\u0002\u0002\u0002~\u0342\u0003\u0002\u0002\u0002\u0080\u0349",
    "\u0003\u0002\u0002\u0002\u0082\u034e\u0003\u0002\u0002\u0002\u0084\u0353",
    "\u0003\u0002\u0002\u0002\u0086\u0360\u0003\u0002\u0002\u0002\u0088\u0368",
    "\u0003\u0002\u0002\u0002\u008a\u036b\u0003\u0002\u0002\u0002\u008c\u0377",
    "\u0003\u0002\u0002\u0002\u008e\u0386\u0003\u0002\u0002\u0002\u0090\u0394",
    "\u0003\u0002\u0002\u0002\u0092\u0398\u0003\u0002\u0002\u0002\u0094\u039d",
    "\u0003\u0002\u0002\u0002\u0096\u03a5\u0003\u0002\u0002\u0002\u0098\u03a7",
    "\u0003\u0002\u0002\u0002\u009a\u03ab\u0003\u0002\u0002\u0002\u009c\u03b3",
    "\u0003\u0002\u0002\u0002\u009e\u03b5\u0003\u0002\u0002\u0002\u00a0\u03b7",
    "\u0003\u0002\u0002\u0002\u00a2\u03ba\u0003\u0002\u0002\u0002\u00a4\u03c9",
    "\u0003\u0002\u0002\u0002\u00a6\u042c\u0003\u0002\u0002\u0002\u00a8\u0439",
    "\u0003\u0002\u0002\u0002\u00aa\u044c\u0003\u0002\u0002\u0002\u00ac\u044e",
    "\u0003\u0002\u0002\u0002\u00ae\u046f\u0003\u0002\u0002\u0002\u00b0\u0471",
    "\u0003\u0002\u0002\u0002\u00b2\u048c\u0003\u0002\u0002\u0002\u00b4\u049d",
    "\u0003\u0002\u0002\u0002\u00b6\u04a1\u0003\u0002\u0002\u0002\u00b8\u04a4",
    "\u0003\u0002\u0002\u0002\u00ba\u04ab\u0003\u0002\u0002\u0002\u00bc\u04b0",
    "\u0003\u0002\u0002\u0002\u00be\u04b8\u0003\u0002\u0002\u0002\u00c0\u04be",
    "\u0003\u0002\u0002\u0002\u00c2\u04c0\u0003\u0002\u0002\u0002\u00c4\u04c6",
    "\u0003\u0002\u0002\u0002\u00c6\u04c8\u0003\u0002\u0002\u0002\u00c8\u04cc",
    "\u0003\u0002\u0002\u0002\u00ca\u04e3\u0003\u0002\u0002\u0002\u00cc\u04e6",
    "\u0003\u0002\u0002\u0002\u00ce\u04fe\u0003\u0002\u0002\u0002\u00d0\u0500",
    "\u0003\u0002\u0002\u0002\u00d2\u0507\u0003\u0002\u0002\u0002\u00d4\u051d",
    "\u0003\u0002\u0002\u0002\u00d6\u051f\u0003\u0002\u0002\u0002\u00d8\u0521",
    "\u0003\u0002\u0002\u0002\u00da\u052a\u0003\u0002\u0002\u0002\u00dc\u052e",
    "\u0003\u0002\u0002\u0002\u00de\u0533\u0003\u0002\u0002\u0002\u00e0\u053d",
    "\u0003\u0002\u0002\u0002\u00e2\u0540\u0003\u0002\u0002\u0002\u00e4\u0542",
    "\u0003\u0002\u0002\u0002\u00e6\u0547\u0003\u0002\u0002\u0002\u00e8\u0549",
    "\u0003\u0002\u0002\u0002\u00ea\u0550\u0003\u0002\u0002\u0002\u00ec\u0552",
    "\u0003\u0002\u0002\u0002\u00ee\u0554\u0003\u0002\u0002\u0002\u00f0\u0559",
    "\u0003\u0002\u0002\u0002\u00f2\u00f3\u0005\u0004\u0003\u0002\u00f3\u00f4",
    "\u0007\u0002\u0002\u0003\u00f4\u0003\u0003\u0002\u0002\u0002\u00f5\u00f7",
    "\u0005\u000e\b\u0002\u00f6\u00f5\u0003\u0002\u0002\u0002\u00f7\u00fa",
    "\u0003\u0002\u0002\u0002\u00f8\u00f6\u0003\u0002\u0002\u0002\u00f8\u00f9",
    "\u0003\u0002\u0002\u0002\u00f9\u00fb\u0003\u0002\u0002\u0002\u00fa\u00f8",
    "\u0003\u0002\u0002\u0002\u00fb\u010d\u0005\u0012\n\u0002\u00fc\u00fe",
    "\u0005\u000e\b\u0002\u00fd\u00fc\u0003\u0002\u0002\u0002\u00fe\u0101",
    "\u0003\u0002\u0002\u0002\u00ff\u00fd\u0003\u0002\u0002\u0002\u00ff\u0100",
    "\u0003\u0002\u0002\u0002\u0100\u0102\u0003\u0002\u0002\u0002\u0101\u00ff",
    "\u0003\u0002\u0002\u0002\u0102\u010d\u0005\u0014\u000b\u0002\u0103\u0105",
    "\u0005\u000e\b\u0002\u0104\u0103\u0003\u0002\u0002\u0002\u0105\u0108",
    "\u0003\u0002\u0002\u0002\u0106\u0104\u0003\u0002\u0002\u0002\u0106\u0107",
    "\u0003\u0002\u0002\u0002\u0107\u0109\u0003\u0002\u0002\u0002\u0108\u0106",
    "\u0003\u0002\u0002\u0002\u0109\u010d\u0005\u001c\u000f\u0002\u010a\u010d",
    "\u0005\u0006\u0004\u0002\u010b\u010d\u0007o\u0002\u0002\u010c\u00f8",
    "\u0003\u0002\u0002\u0002\u010c\u00ff\u0003\u0002\u0002\u0002\u010c\u0106",
    "\u0003\u0002\u0002\u0002\u010c\u010a\u0003\u0002\u0002\u0002\u010c\u010b",
    "\u0003\u0002\u0002\u0002\u010d\u0005\u0003\u0002\u0002\u0002\u010e\u010f",
    "\u0007`\u0002\u0002\u010f\u0110\u0007\u0095\u0002\u0002\u0110\u0111",
    "\u0007a\u0002\u0002\u0111\u0112\u0007\u0095\u0002\u0002\u0112\u0113",
    "\u0007i\u0002\u0002\u0113\u0114\u0005\b\u0005\u0002\u0114\u0115\u0007",
    "j\u0002\u0002\u0115\u0116\u0005r:\u0002\u0116\u0007\u0003\u0002\u0002",
    "\u0002\u0117\u011c\u0005\n\u0006\u0002\u0118\u0119\u0007p\u0002\u0002",
    "\u0119\u011b\u0005\n\u0006\u0002\u011a\u0118\u0003\u0002\u0002\u0002",
    "\u011b\u011e\u0003\u0002\u0002\u0002\u011c\u011a\u0003\u0002\u0002\u0002",
    "\u011c\u011d\u0003\u0002\u0002\u0002\u011d\t\u0003\u0002\u0002\u0002",
    "\u011e\u011c\u0003\u0002\u0002\u0002\u011f\u0120\t\u0002\u0002\u0002",
    "\u0120\u0121\t\u0003\u0002\u0002\u0121\u000b\u0003\u0002\u0002\u0002",
    "\u0122\u0125\u0005\u000e\b\u0002\u0123\u0125\u00071\u0002\u0002\u0124",
    "\u0122\u0003\u0002\u0002\u0002\u0124\u0123\u0003\u0002\u0002\u0002\u0125",
    "\r\u0003\u0002\u0002\u0002\u0126\u0129\u0005f4\u0002\u0127\u0129\t\u0004",
    "\u0002\u0002\u0128\u0126\u0003\u0002\u0002\u0002\u0128\u0127\u0003\u0002",
    "\u0002\u0002\u0129\u000f\u0003\u0002\u0002\u0002\u012a\u012d\u0007\u0017",
    "\u0002\u0002\u012b\u012d\u0005f4\u0002\u012c\u012a\u0003\u0002\u0002",
    "\u0002\u012c\u012b\u0003\u0002\u0002\u0002\u012d\u0011\u0003\u0002\u0002",
    "\u0002\u012e\u012f\u0007\u000e\u0002\u0002\u012f\u0132\u0007\u0095\u0002",
    "\u0002\u0130\u0131\u0007\u0016\u0002\u0002\u0131\u0133\u0005H%\u0002",
    "\u0132\u0130\u0003\u0002\u0002\u0002\u0132\u0133\u0003\u0002\u0002\u0002",
    "\u0133\u0136\u0003\u0002\u0002\u0002\u0134\u0135\u0007\u001d\u0002\u0002",
    "\u0135\u0137\u0005\u001e\u0010\u0002\u0136\u0134\u0003\u0002\u0002\u0002",
    "\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002",
    "\u0138\u0139\u0005 \u0011\u0002\u0139\u0013\u0003\u0002\u0002\u0002",
    "\u013a\u013b\u0007\u0015\u0002\u0002\u013b\u013e\u0007\u0095\u0002\u0002",
    "\u013c\u013d\u0007\u001d\u0002\u0002\u013d\u013f\u0005\u001e\u0010\u0002",
    "\u013e\u013c\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002\u0002\u0002",
    "\u013f\u0140\u0003\u0002\u0002\u0002\u0140\u0142\u0007k\u0002\u0002",
    "\u0141\u0143\u0005\u0016\f\u0002\u0142\u0141\u0003\u0002\u0002\u0002",
    "\u0142\u0143\u0003\u0002\u0002\u0002\u0143\u0145\u0003\u0002\u0002\u0002",
    "\u0144\u0146\u0007p\u0002\u0002\u0145\u0144\u0003\u0002\u0002\u0002",
    "\u0145\u0146\u0003\u0002\u0002\u0002\u0146\u0148\u0003\u0002\u0002\u0002",
    "\u0147\u0149\u0005\u001a\u000e\u0002\u0148\u0147\u0003\u0002\u0002\u0002",
    "\u0148\u0149\u0003\u0002\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002",
    "\u014a\u014b\u0007l\u0002\u0002\u014b\u0015\u0003\u0002\u0002\u0002",
    "\u014c\u0151\u0005\u0018\r\u0002\u014d\u014e\u0007p\u0002\u0002\u014e",
    "\u0150\u0005\u0018\r\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u0150",
    "\u0153\u0003\u0002\u0002\u0002\u0151\u014f\u0003\u0002\u0002\u0002\u0151",
    "\u0152\u0003\u0002\u0002\u0002\u0152\u0017\u0003\u0002\u0002\u0002\u0153",
    "\u0151\u0003\u0002\u0002\u0002\u0154\u0156\u0005f4\u0002\u0155\u0154",
    "\u0003\u0002\u0002\u0002\u0156\u0159\u0003\u0002\u0002\u0002\u0157\u0155",
    "\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002\u0158\u015a",
    "\u0003\u0002\u0002\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u015a\u015c",
    "\u0007\u0095\u0002\u0002\u015b\u015d\u0005\u00c2b\u0002\u015c\u015b",
    "\u0003\u0002\u0002\u0002\u015c\u015d\u0003\u0002\u0002\u0002\u015d\u015f",
    "\u0003\u0002\u0002\u0002\u015e\u0160\u0005 \u0011\u0002\u015f\u015e",
    "\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002\u0160\u0019",
    "\u0003\u0002\u0002\u0002\u0161\u0165\u0007o\u0002\u0002\u0162\u0164",
    "\u0005$\u0013\u0002\u0163\u0162\u0003\u0002\u0002\u0002\u0164\u0167",
    "\u0003\u0002\u0002\u0002\u0165\u0163\u0003\u0002\u0002\u0002\u0165\u0166",
    "\u0003\u0002\u0002\u0002\u0166\u001b\u0003\u0002\u0002\u0002\u0167\u0165",
    "\u0003\u0002\u0002\u0002\u0168\u0169\u0007!\u0002\u0002\u0169\u016c",
    "\u0007\u0095\u0002\u0002\u016a\u016b\u0007\u0016\u0002\u0002\u016b\u016d",
    "\u0005\u001e\u0010\u0002\u016c\u016a\u0003\u0002\u0002\u0002\u016c\u016d",
    "\u0003\u0002\u0002\u0002\u016d\u016e\u0003\u0002\u0002\u0002\u016e\u016f",
    "\u0005\"\u0012\u0002\u016f\u001d\u0003\u0002\u0002\u0002\u0170\u0175",
    "\u0005H%\u0002\u0171\u0172\u0007p\u0002\u0002\u0172\u0174\u0005H%\u0002",
    "\u0173\u0171\u0003\u0002\u0002\u0002\u0174\u0177\u0003\u0002\u0002\u0002",
    "\u0175\u0173\u0003\u0002\u0002\u0002\u0175\u0176\u0003\u0002\u0002\u0002",
    "\u0176\u001f\u0003\u0002\u0002\u0002\u0177\u0175\u0003\u0002\u0002\u0002",
    "\u0178\u017c\u0007k\u0002\u0002\u0179\u017b\u0005$\u0013\u0002\u017a",
    "\u0179\u0003\u0002\u0002\u0002\u017b\u017e\u0003\u0002\u0002\u0002\u017c",
    "\u017a\u0003\u0002\u0002\u0002\u017c\u017d\u0003\u0002\u0002\u0002\u017d",
    "\u017f\u0003\u0002\u0002\u0002\u017e\u017c\u0003\u0002\u0002\u0002\u017f",
    "\u0180\u0007l\u0002\u0002\u0180!\u0003\u0002\u0002\u0002\u0181\u0185",
    "\u0007k\u0002\u0002\u0182\u0184\u00052\u001a\u0002\u0183\u0182\u0003",
    "\u0002\u0002\u0002\u0184\u0187\u0003\u0002\u0002\u0002\u0185\u0183\u0003",
    "\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0188\u0003",
    "\u0002\u0002\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0188\u0189\u0007",
    "l\u0002\u0002\u0189#\u0003\u0002\u0002\u0002\u018a\u0198\u0007o\u0002",
    "\u0002\u018b\u018d\u0007+\u0002\u0002\u018c\u018b\u0003\u0002\u0002",
    "\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002",
    "\u0002\u018e\u0198\u0005r:\u0002\u018f\u0191\u0005\f\u0007\u0002\u0190",
    "\u018f\u0003\u0002\u0002\u0002\u0191\u0194\u0003\u0002\u0002\u0002\u0192",
    "\u0190\u0003\u0002\u0002\u0002\u0192\u0193\u0003\u0002\u0002\u0002\u0193",
    "\u0195\u0003\u0002\u0002\u0002\u0194\u0192\u0003\u0002\u0002\u0002\u0195",
    "\u0198\u0005&\u0014\u0002\u0196\u0198\u0007\u009d\u0002\u0002\u0197",
    "\u018a\u0003\u0002\u0002\u0002\u0197\u018c\u0003\u0002\u0002\u0002\u0197",
    "\u0192\u0003\u0002\u0002\u0002\u0197\u0196\u0003\u0002\u0002\u0002\u0198",
    "%\u0003\u0002\u0002\u0002\u0199\u01a1\u0005(\u0015\u0002\u019a\u01a1",
    "\u0005,\u0017\u0002\u019b\u01a1\u0005*\u0016\u0002\u019c\u01a1\u0005",
    "\u001c\u000f\u0002\u019d\u01a1\u0005\u0012\n\u0002\u019e\u01a1\u0005",
    "\u0014\u000b\u0002\u019f\u01a1\u0005.\u0018\u0002\u01a0\u0199\u0003",
    "\u0002\u0002\u0002\u01a0\u019a\u0003\u0002\u0002\u0002\u01a0\u019b\u0003",
    "\u0002\u0002\u0002\u01a0\u019c\u0003\u0002\u0002\u0002\u01a0\u019d\u0003",
    "\u0002\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a0\u019f\u0003",
    "\u0002\u0002\u0002\u01a1\'\u0003\u0002\u0002\u0002\u01a2\u01a4\u0007",
    "\u0003\u0002\u0002\u01a3\u01a2\u0003\u0002\u0002\u0002\u01a3\u01a4\u0003",
    "\u0002\u0002\u0002\u01a4\u01a7\u0003\u0002\u0002\u0002\u01a5\u01a8\u0005",
    "H%\u0002\u01a6\u01a8\u00073\u0002\u0002\u01a7\u01a5\u0003\u0002\u0002",
    "\u0002\u01a7\u01a6\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002",
    "\u0002\u01a9\u01aa\u0007\u0095\u0002\u0002\u01aa\u01af\u0005V,\u0002",
    "\u01ab\u01ac\u0007m\u0002\u0002\u01ac\u01ae\u0007n\u0002\u0002\u01ad",
    "\u01ab\u0003\u0002\u0002\u0002\u01ae\u01b1\u0003\u0002\u0002\u0002\u01af",
    "\u01ad\u0003\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0",
    "\u01b4\u0003\u0002\u0002\u0002\u01b1\u01af\u0003\u0002\u0002\u0002\u01b2",
    "\u01b3\u00070\u0002\u0002\u01b3\u01b5\u0005T+\u0002\u01b4\u01b2\u0003",
    "\u0002\u0002\u0002\u01b4\u01b5\u0003\u0002\u0002\u0002\u01b5\u01b8\u0003",
    "\u0002\u0002\u0002\u01b6\u01b9\u0005^0\u0002\u01b7\u01b9\u0007o\u0002",
    "\u0002\u01b8\u01b6\u0003\u0002\u0002\u0002\u01b8\u01b7\u0003\u0002\u0002",
    "\u0002\u01b9)\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007\u0095\u0002",
    "\u0002\u01bb\u01be\u0005V,\u0002\u01bc\u01bd\u00070\u0002\u0002\u01bd",
    "\u01bf\u0005T+\u0002\u01be\u01bc\u0003\u0002\u0002\u0002\u01be\u01bf",
    "\u0003\u0002\u0002\u0002\u01bf\u01c0\u0003\u0002\u0002\u0002\u01c0\u01c1",
    "\u0005`1\u0002\u01c1+\u0003\u0002\u0002\u0002\u01c2\u01c3\u0005H%\u0002",
    "\u01c3\u01c4\u0005<\u001f\u0002\u01c4\u01c5\u0007o\u0002\u0002\u01c5",
    "-\u0003\u0002\u0002\u0002\u01c6\u01c7\u0005H%\u0002\u01c7\u01c8\u0005",
    "@!\u0002\u01c8\u01c9\u00050\u0019\u0002\u01c9/\u0003\u0002\u0002\u0002",
    "\u01ca\u01cb\u0007k\u0002\u0002\u01cb\u01cd\u0005~@\u0002\u01cc\u01ce",
    "\u0005~@\u0002\u01cd\u01cc\u0003\u0002\u0002\u0002\u01cd\u01ce\u0003",
    "\u0002\u0002\u0002\u01ce\u01cf\u0003\u0002\u0002\u0002\u01cf\u01d0\u0007",
    "l\u0002\u0002\u01d01\u0003\u0002\u0002\u0002\u01d1\u01d3\u0005\f\u0007",
    "\u0002\u01d2\u01d1\u0003\u0002\u0002\u0002\u01d3\u01d6\u0003\u0002\u0002",
    "\u0002\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002",
    "\u0002\u01d5\u01d7\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002\u0002",
    "\u0002\u01d7\u01da\u00054\u001b\u0002\u01d8\u01da\u0007o\u0002\u0002",
    "\u01d9\u01d4\u0003\u0002\u0002\u0002\u01d9\u01d8\u0003\u0002\u0002\u0002",
    "\u01da3\u0003\u0002\u0002\u0002\u01db\u01e1\u00056\u001c\u0002\u01dc",
    "\u01e1\u0005:\u001e\u0002\u01dd\u01e1\u0005\u001c\u000f\u0002\u01de",
    "\u01e1\u0005\u0012\n\u0002\u01df\u01e1\u0005\u0014\u000b\u0002\u01e0",
    "\u01db\u0003\u0002\u0002\u0002\u01e0\u01dc\u0003\u0002\u0002\u0002\u01e0",
    "\u01dd\u0003\u0002\u0002\u0002\u01e0\u01de\u0003\u0002\u0002\u0002\u01e0",
    "\u01df\u0003\u0002\u0002\u0002\u01e15\u0003\u0002\u0002\u0002\u01e2",
    "\u01e3\u0005H%\u0002\u01e3\u01e8\u00058\u001d\u0002\u01e4\u01e5\u0007",
    "p\u0002\u0002\u01e5\u01e7\u00058\u001d\u0002\u01e6\u01e4\u0003\u0002",
    "\u0002\u0002\u01e7\u01ea\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002",
    "\u0002\u0002\u01e8\u01e9\u0003\u0002\u0002\u0002\u01e9\u01eb\u0003\u0002",
    "\u0002\u0002\u01ea\u01e8\u0003\u0002\u0002\u0002\u01eb\u01ec\u0007o",
    "\u0002\u0002\u01ec7\u0003\u0002\u0002\u0002\u01ed\u01f2\u0007\u0095",
    "\u0002\u0002\u01ee\u01ef\u0007m\u0002\u0002\u01ef\u01f1\u0007n\u0002",
    "\u0002\u01f0\u01ee\u0003\u0002\u0002\u0002\u01f1\u01f4\u0003\u0002\u0002",
    "\u0002\u01f2\u01f0\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002",
    "\u0002\u01f3\u01f5\u0003\u0002\u0002\u0002\u01f4\u01f2\u0003\u0002\u0002",
    "\u0002\u01f5\u01f6\u0007r\u0002\u0002\u01f6\u01f7\u0005B\"\u0002\u01f7",
    "9\u0003\u0002\u0002\u0002\u01f8\u01fb\u0005H%\u0002\u01f9\u01fb\u0007",
    "3\u0002\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fa\u01f9\u0003",
    "\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fd\u0007",
    "\u0095\u0002\u0002\u01fd\u0202\u0005V,\u0002\u01fe\u01ff\u0007m\u0002",
    "\u0002\u01ff\u0201\u0007n\u0002\u0002\u0200\u01fe\u0003\u0002\u0002",
    "\u0002\u0201\u0204\u0003\u0002\u0002\u0002\u0202\u0200\u0003\u0002\u0002",
    "\u0002\u0202\u0203\u0003\u0002\u0002\u0002\u0203\u0207\u0003\u0002\u0002",
    "\u0002\u0204\u0202\u0003\u0002\u0002\u0002\u0205\u0206\u00070\u0002",
    "\u0002\u0206\u0208\u0005T+\u0002\u0207\u0205\u0003\u0002\u0002\u0002",
    "\u0207\u0208\u0003\u0002\u0002\u0002\u0208\u0209\u0003\u0002\u0002\u0002",
    "\u0209\u020a\u0007o\u0002\u0002\u020a;\u0003\u0002\u0002\u0002\u020b",
    "\u0210\u0005> \u0002\u020c\u020d\u0007p\u0002\u0002\u020d\u020f\u0005",
    "> \u0002\u020e\u020c\u0003\u0002\u0002\u0002\u020f\u0212\u0003\u0002",
    "\u0002\u0002\u0210\u020e\u0003\u0002\u0002\u0002\u0210\u0211\u0003\u0002",
    "\u0002\u0002\u0211=\u0003\u0002\u0002\u0002\u0212\u0210\u0003\u0002",
    "\u0002\u0002\u0213\u0216\u0005@!\u0002\u0214\u0215\u0007r\u0002\u0002",
    "\u0215\u0217\u0005B\"\u0002\u0216\u0214\u0003\u0002\u0002\u0002\u0216",
    "\u0217\u0003\u0002\u0002\u0002\u0217?\u0003\u0002\u0002\u0002\u0218",
    "\u021d\u0007\u0095\u0002\u0002\u0219\u021a\u0007m\u0002\u0002\u021a",
    "\u021c\u0007n\u0002\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021c",
    "\u021f\u0003\u0002\u0002\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021d",
    "\u021e\u0003\u0002\u0002\u0002\u021eA\u0003\u0002\u0002\u0002\u021f",
    "\u021d\u0003\u0002\u0002\u0002\u0220\u0223\u0005D#\u0002\u0221\u0223",
    "\u0005\u00a4S\u0002\u0222\u0220\u0003\u0002\u0002\u0002\u0222\u0221",
    "\u0003\u0002\u0002\u0002\u0223C\u0003\u0002\u0002\u0002\u0224\u0230",
    "\u0007k\u0002\u0002\u0225\u022a\u0005B\"\u0002\u0226\u0227\u0007p\u0002",
    "\u0002\u0227\u0229\u0005B\"\u0002\u0228\u0226\u0003\u0002\u0002\u0002",
    "\u0229\u022c\u0003\u0002\u0002\u0002\u022a\u0228\u0003\u0002\u0002\u0002",
    "\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022e\u0003\u0002\u0002\u0002",
    "\u022c\u022a\u0003\u0002\u0002\u0002\u022d\u022f\u0007p\u0002\u0002",
    "\u022e\u022d\u0003\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002",
    "\u022f\u0231\u0003\u0002\u0002\u0002\u0230\u0225\u0003\u0002\u0002\u0002",
    "\u0230\u0231\u0003\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002",
    "\u0232\u0233\u0007l\u0002\u0002\u0233E\u0003\u0002\u0002\u0002\u0234",
    "\u0235\u0007\u0095\u0002\u0002\u0235G\u0003\u0002\u0002\u0002\u0236",
    "\u023a\u0005L\'\u0002\u0237\u0239\u0005J&\u0002\u0238\u0237\u0003\u0002",
    "\u0002\u0002\u0239\u023c\u0003\u0002\u0002\u0002\u023a\u0238\u0003\u0002",
    "\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002\u023b\u0245\u0003\u0002",
    "\u0002\u0002\u023c\u023a\u0003\u0002\u0002\u0002\u023d\u0241\u0005N",
    "(\u0002\u023e\u0240\u0005J&\u0002\u023f\u023e\u0003\u0002\u0002\u0002",
    "\u0240\u0243\u0003\u0002\u0002\u0002\u0241\u023f\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0245\u0003\u0002\u0002\u0002",
    "\u0243\u0241\u0003\u0002\u0002\u0002\u0244\u0236\u0003\u0002\u0002\u0002",
    "\u0244\u023d\u0003\u0002\u0002\u0002\u0245I\u0003\u0002\u0002\u0002",
    "\u0246\u0247\u0007m\u0002\u0002\u0247\u0248\u0007n\u0002\u0002\u0248",
    "K\u0003\u0002\u0002\u0002\u0249\u024b\u0007\u0095\u0002\u0002\u024a",
    "\u024c\u0005P)\u0002\u024b\u024a\u0003\u0002\u0002\u0002\u024b\u024c",
    "\u0003\u0002\u0002\u0002\u024c\u0254\u0003\u0002\u0002\u0002\u024d\u024e",
    "\u0007q\u0002\u0002\u024e\u0250\u0007\u0095\u0002\u0002\u024f\u0251",
    "\u0005P)\u0002\u0250\u024f\u0003\u0002\u0002\u0002\u0250\u0251\u0003",
    "\u0002\u0002\u0002\u0251\u0253\u0003\u0002\u0002\u0002\u0252\u024d\u0003",
    "\u0002\u0002\u0002\u0253\u0256\u0003\u0002\u0002\u0002\u0254\u0252\u0003",
    "\u0002\u0002\u0002\u0254\u0255\u0003\u0002\u0002\u0002\u0255\u025a\u0003",
    "\u0002\u0002\u0002\u0256\u0254\u0003\u0002\u0002\u0002\u0257\u0258\u0007",
    "\u0005\u0002\u0002\u0258\u025a\u0005P)\u0002\u0259\u0249\u0003\u0002",
    "\u0002\u0002\u0259\u0257\u0003\u0002\u0002\u0002\u025aM\u0003\u0002",
    "\u0002\u0002\u025b\u025c\t\u0005\u0002\u0002\u025cO\u0003\u0002\u0002",
    "\u0002\u025d\u025e\u0007t\u0002\u0002\u025e\u0263\u0005R*\u0002\u025f",
    "\u0260\u0007p\u0002\u0002\u0260\u0262\u0005R*\u0002\u0261\u025f\u0003",
    "\u0002\u0002\u0002\u0262\u0265\u0003\u0002\u0002\u0002\u0263\u0261\u0003",
    "\u0002\u0002\u0002\u0263\u0264\u0003\u0002\u0002\u0002\u0264\u0266\u0003",
    "\u0002\u0002\u0002\u0265\u0263\u0003\u0002\u0002\u0002\u0266\u0267\u0007",
    "s\u0002\u0002\u0267Q\u0003\u0002\u0002\u0002\u0268\u026f\u0005H%\u0002",
    "\u0269\u026c\u0007w\u0002\u0002\u026a\u026b\t\u0006\u0002\u0002\u026b",
    "\u026d\u0005H%\u0002\u026c\u026a\u0003\u0002\u0002\u0002\u026c\u026d",
    "\u0003\u0002\u0002\u0002\u026d\u026f\u0003\u0002\u0002\u0002\u026e\u0268",
    "\u0003\u0002\u0002\u0002\u026e\u0269\u0003\u0002\u0002\u0002\u026fS",
    "\u0003\u0002\u0002\u0002\u0270\u0275\u0005b2\u0002\u0271\u0272\u0007",
    "p\u0002\u0002\u0272\u0274\u0005b2\u0002\u0273\u0271\u0003\u0002\u0002",
    "\u0002\u0274\u0277\u0003\u0002\u0002\u0002\u0275\u0273\u0003\u0002\u0002",
    "\u0002\u0275\u0276\u0003\u0002\u0002\u0002\u0276U\u0003\u0002\u0002",
    "\u0002\u0277\u0275\u0003\u0002\u0002\u0002\u0278\u027a\u0007i\u0002",
    "\u0002\u0279\u027b\u0005X-\u0002\u027a\u0279\u0003\u0002\u0002\u0002",
    "\u027a\u027b\u0003\u0002\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002",
    "\u027c\u027d\u0007j\u0002\u0002\u027dW\u0003\u0002\u0002\u0002\u027e",
    "\u0283\u0005Z.\u0002\u027f\u0280\u0007p\u0002\u0002\u0280\u0282\u0005",
    "Z.\u0002\u0281\u027f\u0003\u0002\u0002\u0002\u0282\u0285\u0003\u0002",
    "\u0002\u0002\u0283\u0281\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002",
    "\u0002\u0002\u0284\u0288\u0003\u0002\u0002\u0002\u0285\u0283\u0003\u0002",
    "\u0002\u0002\u0286\u0287\u0007p\u0002\u0002\u0287\u0289\u0005\\/\u0002",
    "\u0288\u0286\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002",
    "\u0289\u028c\u0003\u0002\u0002\u0002\u028a\u028c\u0005\\/\u0002\u028b",
    "\u027e\u0003\u0002\u0002\u0002\u028b\u028a\u0003\u0002\u0002\u0002\u028c",
    "Y\u0003\u0002\u0002\u0002\u028d\u028f\u0005\u0010\t\u0002\u028e\u028d",
    "\u0003\u0002\u0002\u0002\u028f\u0292\u0003\u0002\u0002\u0002\u0290\u028e",
    "\u0003\u0002\u0002\u0002\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u0293",
    "\u0003\u0002\u0002\u0002\u0292\u0290\u0003\u0002\u0002\u0002\u0293\u0294",
    "\u0005H%\u0002\u0294\u0295\u0005@!\u0002\u0295[\u0003\u0002\u0002\u0002",
    "\u0296\u0298\u0005\u0010\t\u0002\u0297\u0296\u0003\u0002\u0002\u0002",
    "\u0298\u029b\u0003\u0002\u0002\u0002\u0299\u0297\u0003\u0002\u0002\u0002",
    "\u0299\u029a\u0003\u0002\u0002\u0002\u029a\u029c\u0003\u0002\u0002\u0002",
    "\u029b\u0299\u0003\u0002\u0002\u0002\u029c\u029d\u0005H%\u0002\u029d",
    "\u029e\u0007\u0097\u0002\u0002\u029e\u029f\u0005@!\u0002\u029f]\u0003",
    "\u0002\u0002\u0002\u02a0\u02a1\u0005r:\u0002\u02a1_\u0003\u0002\u0002",
    "\u0002\u02a2\u02a3\u0005r:\u0002\u02a3a\u0003\u0002\u0002\u0002\u02a4",
    "\u02a9\u0007\u0095\u0002\u0002\u02a5\u02a6\u0007q\u0002\u0002\u02a6",
    "\u02a8\u0007\u0095\u0002\u0002\u02a7\u02a5\u0003\u0002\u0002\u0002\u02a8",
    "\u02ab\u0003\u0002\u0002\u0002\u02a9\u02a7\u0003\u0002\u0002\u0002\u02a9",
    "\u02aa\u0003\u0002\u0002\u0002\u02aac\u0003\u0002\u0002\u0002\u02ab",
    "\u02a9\u0003\u0002\u0002\u0002\u02ac\u02ad\t\u0007\u0002\u0002\u02ad",
    "e\u0003\u0002\u0002\u0002\u02ae\u02af\u0007\u0096\u0002\u0002\u02af",
    "\u02b6\u0005h5\u0002\u02b0\u02b3\u0007i\u0002\u0002\u02b1\u02b4\u0005",
    "j6\u0002\u02b2\u02b4\u0005n8\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002",
    "\u02b3\u02b2\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002",
    "\u02b4\u02b5\u0003\u0002\u0002\u0002\u02b5\u02b7\u0007j\u0002\u0002",
    "\u02b6\u02b0\u0003\u0002\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002\u0002",
    "\u02b7g\u0003\u0002\u0002\u0002\u02b8\u02b9\u0005b2\u0002\u02b9i\u0003",
    "\u0002\u0002\u0002\u02ba\u02bf\u0005l7\u0002\u02bb\u02bc\u0007p\u0002",
    "\u0002\u02bc\u02be\u0005l7\u0002\u02bd\u02bb\u0003\u0002\u0002\u0002",
    "\u02be\u02c1\u0003\u0002\u0002\u0002\u02bf\u02bd\u0003\u0002\u0002\u0002",
    "\u02bf\u02c0\u0003\u0002\u0002\u0002\u02c0k\u0003\u0002\u0002\u0002",
    "\u02c1\u02bf\u0003\u0002\u0002\u0002\u02c2\u02c3\u0007\u0095\u0002\u0002",
    "\u02c3\u02c4\u0007r\u0002\u0002\u02c4\u02c5\u0005n8\u0002\u02c5m\u0003",
    "\u0002\u0002\u0002\u02c6\u02ca\u0005\u00a4S\u0002\u02c7\u02ca\u0005",
    "f4\u0002\u02c8\u02ca\u0005p9\u0002\u02c9\u02c6\u0003\u0002\u0002\u0002",
    "\u02c9\u02c7\u0003\u0002\u0002\u0002\u02c9\u02c8\u0003\u0002\u0002\u0002",
    "\u02cao\u0003\u0002\u0002\u0002\u02cb\u02d4\u0007k\u0002\u0002\u02cc",
    "\u02d1\u0005n8\u0002\u02cd\u02ce\u0007p\u0002\u0002\u02ce\u02d0\u0005",
    "n8\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002\u02d0\u02d3\u0003\u0002",
    "\u0002\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002",
    "\u0002\u0002\u02d2\u02d5\u0003\u0002\u0002\u0002\u02d3\u02d1\u0003\u0002",
    "\u0002\u0002\u02d4\u02cc\u0003\u0002\u0002\u0002\u02d4\u02d5\u0003\u0002",
    "\u0002\u0002\u02d5\u02d7\u0003\u0002\u0002\u0002\u02d6\u02d8\u0007p",
    "\u0002\u0002\u02d7\u02d6\u0003\u0002\u0002\u0002\u02d7\u02d8\u0003\u0002",
    "\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9\u02da\u0007l",
    "\u0002\u0002\u02daq\u0003\u0002\u0002\u0002\u02db\u02df\u0007k\u0002",
    "\u0002\u02dc\u02de\u0005t;\u0002\u02dd\u02dc\u0003\u0002\u0002\u0002",
    "\u02de\u02e1\u0003\u0002\u0002\u0002\u02df\u02dd\u0003\u0002\u0002\u0002",
    "\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e2\u0003\u0002\u0002\u0002",
    "\u02e1\u02df\u0003\u0002\u0002\u0002\u02e2\u02e3\u0007l\u0002\u0002",
    "\u02e3s\u0003\u0002\u0002\u0002\u02e4\u02e9\u0005x=\u0002\u02e5\u02e9",
    "\u0005|?\u0002\u02e6\u02e9\u0005\u0004\u0003\u0002\u02e7\u02e9\u0005",
    "v<\u0002\u02e8\u02e4\u0003\u0002\u0002\u0002\u02e8\u02e5\u0003\u0002",
    "\u0002\u0002\u02e8\u02e6\u0003\u0002\u0002\u0002\u02e8\u02e7\u0003\u0002",
    "\u0002\u0002\u02e9u\u0003\u0002\u0002\u0002\u02ea\u02eb\u0007\u009d",
    "\u0002\u0002\u02ebw\u0003\u0002\u0002\u0002\u02ec\u02ed\u0005z>\u0002",
    "\u02ed\u02ee\u0007o\u0002\u0002\u02eey\u0003\u0002\u0002\u0002\u02ef",
    "\u02f1\u0005\u0010\t\u0002\u02f0\u02ef\u0003\u0002\u0002\u0002\u02f1",
    "\u02f4\u0003\u0002\u0002\u0002\u02f2\u02f0\u0003\u0002\u0002\u0002\u02f2",
    "\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f5\u0003\u0002\u0002\u0002\u02f4",
    "\u02f2\u0003\u0002\u0002\u0002\u02f5\u02f6\u0005H%\u0002\u02f6\u02f7",
    "\u0005<\u001f\u0002\u02f7{\u0003\u0002\u0002\u0002\u02f8\u033e\u0005",
    "r:\u0002\u02f9\u02fa\u0007\u001b\u0002\u0002\u02fa\u02fb\u0005\u0098",
    "M\u0002\u02fb\u02fe\u0005|?\u0002\u02fc\u02fd\u0007\u0014\u0002\u0002",
    "\u02fd\u02ff\u0005|?\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe",
    "\u02ff\u0003\u0002\u0002\u0002\u02ff\u033e\u0003\u0002\u0002\u0002\u0300",
    "\u0301\u00076\u0002\u0002\u0301\u0302\u0007a\u0002\u0002\u0302\u0303",
    "\u0005\u00a4S\u0002\u0303\u0304\u0007k\u0002\u0002\u0304\u0305\u0005",
    "\u008aF\u0002\u0305\u0306\u0007l\u0002\u0002\u0306\u033e\u0003\u0002",
    "\u0002\u0002\u0307\u0308\u0007\u001a\u0002\u0002\u0308\u0309\u0007i",
    "\u0002\u0002\u0309\u030a\u0005\u0090I\u0002\u030a\u030b\u0007j\u0002",
    "\u0002\u030b\u030c\u0005|?\u0002\u030c\u033e\u0003\u0002\u0002\u0002",
    "\u030d\u030e\u00075\u0002\u0002\u030e\u030f\u0005\u0098M\u0002\u030f",
    "\u0310\u0005|?\u0002\u0310\u033e\u0003\u0002\u0002\u0002\u0311\u0312",
    "\u0007\u0012\u0002\u0002\u0312\u0313\u0005|?\u0002\u0313\u0314\u0007",
    "5\u0002\u0002\u0314\u0315\u0005\u0098M\u0002\u0315\u033e\u0003\u0002",
    "\u0002\u0002\u0316\u0317\u00072\u0002\u0002\u0317\u0321\u0005r:\u0002",
    "\u0318\u031a\u0005\u0084C\u0002\u0319\u0318\u0003\u0002\u0002\u0002",
    "\u031a\u031b\u0003\u0002\u0002\u0002\u031b\u0319\u0003\u0002\u0002\u0002",
    "\u031b\u031c\u0003\u0002\u0002\u0002\u031c\u031e\u0003\u0002\u0002\u0002",
    "\u031d\u031f\u0005\u0088E\u0002\u031e\u031d\u0003\u0002\u0002\u0002",
    "\u031e\u031f\u0003\u0002\u0002\u0002\u031f\u0322\u0003\u0002\u0002\u0002",
    "\u0320\u0322\u0005\u0088E\u0002\u0321\u0319\u0003\u0002\u0002\u0002",
    "\u0321\u0320\u0003\u0002\u0002\u0002\u0322\u033e\u0003\u0002\u0002\u0002",
    "\u0323\u0325\u0007)\u0002\u0002\u0324\u0326\u0005\u00a4S\u0002\u0325",
    "\u0324\u0003\u0002\u0002\u0002\u0325\u0326\u0003\u0002\u0002\u0002\u0326",
    "\u0327\u0003\u0002\u0002\u0002\u0327\u033e\u0007o\u0002\u0002\u0328",
    "\u0329\u0007/\u0002\u0002\u0329\u032a\u0005\u00a4S\u0002\u032a\u032b",
    "\u0007o\u0002\u0002\u032b\u033e\u0003\u0002\u0002\u0002\u032c\u032e",
    "\u0007\n\u0002\u0002\u032d\u032f\u0007\u0095\u0002\u0002\u032e\u032d",
    "\u0003\u0002\u0002\u0002\u032e\u032f\u0003\u0002\u0002\u0002\u032f\u0330",
    "\u0003\u0002\u0002\u0002\u0330\u033e\u0007o\u0002\u0002\u0331\u0333",
    "\u0007\u0010\u0002\u0002\u0332\u0334\u0007\u0095\u0002\u0002\u0333\u0332",
    "\u0003\u0002\u0002\u0002\u0333\u0334\u0003\u0002\u0002\u0002\u0334\u0335",
    "\u0003\u0002\u0002\u0002\u0335\u033e\u0007o\u0002\u0002\u0336\u033e",
    "\u0007o\u0002\u0002\u0337\u0338\u0005\u009cO\u0002\u0338\u0339\u0007",
    "o\u0002\u0002\u0339\u033e\u0003\u0002\u0002\u0002\u033a\u033b\u0005",
    "\u00a2R\u0002\u033b\u033c\u0007o\u0002\u0002\u033c\u033e\u0003\u0002",
    "\u0002\u0002\u033d\u02f8\u0003\u0002\u0002\u0002\u033d\u02f9\u0003\u0002",
    "\u0002\u0002\u033d\u0300\u0003\u0002\u0002\u0002\u033d\u0307\u0003\u0002",
    "\u0002\u0002\u033d\u030d\u0003\u0002\u0002\u0002\u033d\u0311\u0003\u0002",
    "\u0002\u0002\u033d\u0316\u0003\u0002\u0002\u0002\u033d\u0323\u0003\u0002",
    "\u0002\u0002\u033d\u0328\u0003\u0002\u0002\u0002\u033d\u032c\u0003\u0002",
    "\u0002\u0002\u033d\u0331\u0003\u0002\u0002\u0002\u033d\u0336\u0003\u0002",
    "\u0002\u0002\u033d\u0337\u0003\u0002\u0002\u0002\u033d\u033a\u0003\u0002",
    "\u0002\u0002\u033e}\u0003\u0002\u0002\u0002\u033f\u0341\u0005\f\u0007",
    "\u0002\u0340\u033f\u0003\u0002\u0002\u0002\u0341\u0344\u0003\u0002\u0002",
    "\u0002\u0342\u0340\u0003\u0002\u0002\u0002\u0342\u0343\u0003\u0002\u0002",
    "\u0002\u0343\u0347\u0003\u0002\u0002\u0002\u0344\u0342\u0003\u0002\u0002",
    "\u0002\u0345\u0348\u0005\u0080A\u0002\u0346\u0348\u0005\u0082B\u0002",
    "\u0347\u0345\u0003\u0002\u0002\u0002\u0347\u0346\u0003\u0002\u0002\u0002",
    "\u0348\u007f\u0003\u0002\u0002\u0002\u0349\u034c\u0007\u0006\u0002\u0002",
    "\u034a\u034d\u0007o\u0002\u0002\u034b\u034d\u0005^0\u0002\u034c\u034a",
    "\u0003\u0002\u0002\u0002\u034c\u034b\u0003\u0002\u0002\u0002\u034d\u0081",
    "\u0003\u0002\u0002\u0002\u034e\u0351\u0007\u0005\u0002\u0002\u034f\u0352",
    "\u0007o\u0002\u0002\u0350\u0352\u0005^0\u0002\u0351\u034f\u0003\u0002",
    "\u0002\u0002\u0351\u0350\u0003\u0002\u0002\u0002\u0352\u0083\u0003\u0002",
    "\u0002\u0002\u0353\u0354\u0007\f\u0002\u0002\u0354\u0358\u0007i\u0002",
    "\u0002\u0355\u0357\u0005\u0010\t\u0002\u0356\u0355\u0003\u0002\u0002",
    "\u0002\u0357\u035a\u0003\u0002\u0002\u0002\u0358\u0356\u0003\u0002\u0002",
    "\u0002\u0358\u0359\u0003\u0002\u0002\u0002\u0359\u035b\u0003\u0002\u0002",
    "\u0002\u035a\u0358\u0003\u0002\u0002\u0002\u035b\u035c\u0005\u0086D",
    "\u0002\u035c\u035d\u0007\u0095\u0002\u0002\u035d\u035e\u0007j\u0002",
    "\u0002\u035e\u035f\u0005r:\u0002\u035f\u0085\u0003\u0002\u0002\u0002",
    "\u0360\u0365\u0005b2\u0002\u0361\u0362\u0007\u0086\u0002\u0002\u0362",
    "\u0364\u0005b2\u0002\u0363\u0361\u0003\u0002\u0002\u0002\u0364\u0367",
    "\u0003\u0002\u0002\u0002\u0365\u0363\u0003\u0002\u0002\u0002\u0365\u0366",
    "\u0003\u0002\u0002\u0002\u0366\u0087\u0003\u0002\u0002\u0002\u0367\u0365",
    "\u0003\u0002\u0002\u0002\u0368\u0369\u0007\u0018\u0002\u0002\u0369\u036a",
    "\u0005r:\u0002\u036a\u0089\u0003\u0002\u0002\u0002\u036b\u036f\u0005",
    "\u008cG\u0002\u036c\u036e\u0005\u008cG\u0002\u036d\u036c\u0003\u0002",
    "\u0002\u0002\u036e\u0371\u0003\u0002\u0002\u0002\u036f\u036d\u0003\u0002",
    "\u0002\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0375\u0003\u0002",
    "\u0002\u0002\u0371\u036f\u0003\u0002\u0002\u0002\u0372\u0373\u00077",
    "\u0002\u0002\u0373\u0374\u0007\u0014\u0002\u0002\u0374\u0376\u0005r",
    ":\u0002\u0375\u0372\u0003\u0002\u0002\u0002\u0375\u0376\u0003\u0002",
    "\u0002\u0002\u0376\u008b\u0003\u0002\u0002\u0002\u0377\u0378\u00077",
    "\u0002\u0002\u0378\u0379\u0005\u008eH\u0002\u0379\u037a\u0005r:\u0002",
    "\u037a\u008d\u0003\u0002\u0002\u0002\u037b\u0380\u0005d3\u0002\u037c",
    "\u037d\u0007p\u0002\u0002\u037d\u037f\u0005d3\u0002\u037e\u037c\u0003",
    "\u0002\u0002\u0002\u037f\u0382\u0003\u0002\u0002\u0002\u0380\u037e\u0003",
    "\u0002\u0002\u0002\u0380\u0381\u0003\u0002\u0002\u0002\u0381\u0387\u0003",
    "\u0002\u0002\u0002\u0382\u0380\u0003\u0002\u0002\u0002\u0383\u0384\u0005",
    "H%\u0002\u0384\u0385\u0007\u0095\u0002\u0002\u0385\u0387\u0003\u0002",
    "\u0002\u0002\u0386\u037b\u0003\u0002\u0002\u0002\u0386\u0383\u0003\u0002",
    "\u0002\u0002\u0387\u008f\u0003\u0002\u0002\u0002\u0388\u0395\u0005\u0094",
    "K\u0002\u0389\u038b\u0005\u0092J\u0002\u038a\u0389\u0003\u0002\u0002",
    "\u0002\u038a\u038b\u0003\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002",
    "\u0002\u038c\u038e\u0007o\u0002\u0002\u038d\u038f\u0005\u00a4S\u0002",
    "\u038e\u038d\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002",
    "\u038f\u0390\u0003\u0002\u0002\u0002\u0390\u0392\u0007o\u0002\u0002",
    "\u0391\u0393\u0005\u0096L\u0002\u0392\u0391\u0003\u0002\u0002\u0002",
    "\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u0395\u0003\u0002\u0002\u0002",
    "\u0394\u0388\u0003\u0002\u0002\u0002\u0394\u038a\u0003\u0002\u0002\u0002",
    "\u0395\u0091\u0003\u0002\u0002\u0002\u0396\u0399\u0005z>\u0002\u0397",
    "\u0399\u0005\u009aN\u0002\u0398\u0396\u0003\u0002\u0002\u0002\u0398",
    "\u0397\u0003\u0002\u0002\u0002\u0399\u0093\u0003\u0002\u0002\u0002\u039a",
    "\u039c\u0005\u0010\t\u0002\u039b\u039a\u0003\u0002\u0002\u0002\u039c",
    "\u039f\u0003\u0002\u0002\u0002\u039d\u039b\u0003\u0002\u0002\u0002\u039d",
    "\u039e\u0003\u0002\u0002\u0002\u039e\u03a0\u0003\u0002\u0002\u0002\u039f",
    "\u039d\u0003\u0002\u0002\u0002\u03a0\u03a1\u0005H%\u0002\u03a1\u03a2",
    "\u0005@!\u0002\u03a2\u03a3\u0007x\u0002\u0002\u03a3\u03a4\u0005\u00a4",
    "S\u0002\u03a4\u0095\u0003\u0002\u0002\u0002\u03a5\u03a6\u0005\u009a",
    "N\u0002\u03a6\u0097\u0003\u0002\u0002\u0002\u03a7\u03a8\u0007i\u0002",
    "\u0002\u03a8\u03a9\u0005\u00a4S\u0002\u03a9\u03aa\u0007j\u0002\u0002",
    "\u03aa\u0099\u0003\u0002\u0002\u0002\u03ab\u03b0\u0005\u00a4S\u0002",
    "\u03ac\u03ad\u0007p\u0002\u0002\u03ad\u03af\u0005\u00a4S\u0002\u03ae",
    "\u03ac\u0003\u0002\u0002\u0002\u03af\u03b2\u0003\u0002\u0002\u0002\u03b0",
    "\u03ae\u0003\u0002\u0002\u0002\u03b0\u03b1\u0003\u0002\u0002\u0002\u03b1",
    "\u009b\u0003\u0002\u0002\u0002\u03b2\u03b0\u0003\u0002\u0002\u0002\u03b3",
    "\u03b4\u0005\u00a4S\u0002\u03b4\u009d\u0003\u0002\u0002\u0002\u03b5",
    "\u03b6\u0005\u00a4S\u0002\u03b6\u009f\u0003\u0002\u0002\u0002\u03b7",
    "\u03b8\t\u0003\u0002\u0002\u03b8\u03b9\u0005\u00a4S\u0002\u03b9\u00a1",
    "\u0003\u0002\u0002\u0002\u03ba\u03bb\u0005\u00a0Q\u0002\u03bb\u00a3",
    "\u0003\u0002\u0002\u0002\u03bc\u03bd\bS\u0001\u0002\u03bd\u03ca\u0005",
    "\u00a6T\u0002\u03be\u03bf\u0007$\u0002\u0002\u03bf\u03ca\u0005\u00a8",
    "U\u0002\u03c0\u03c1\u0007i\u0002\u0002\u03c1\u03c2\u0005H%\u0002\u03c2",
    "\u03c3\u0007j\u0002\u0002\u03c3\u03c4\u0005\u00a4S\u0013\u03c4\u03ca",
    "\u0003\u0002\u0002\u0002\u03c5\u03c6\t\b\u0002\u0002\u03c6\u03ca\u0005",
    "\u00a4S\u0011\u03c7\u03c8\t\t\u0002\u0002\u03c8\u03ca\u0005\u00a4S\u0010",
    "\u03c9\u03bc\u0003\u0002\u0002\u0002\u03c9\u03be\u0003\u0002\u0002\u0002",
    "\u03c9\u03c0\u0003\u0002\u0002\u0002\u03c9\u03c5\u0003\u0002\u0002\u0002",
    "\u03c9\u03c7\u0003\u0002\u0002\u0002\u03ca\u0412\u0003\u0002\u0002\u0002",
    "\u03cb\u03cc\f\u000f\u0002\u0002\u03cc\u03cd\t\n\u0002\u0002\u03cd\u0411",
    "\u0005\u00a4S\u0010\u03ce\u03cf\f\u000e\u0002\u0002\u03cf\u03d0\t\u000b",
    "\u0002\u0002\u03d0\u0411\u0005\u00a4S\u000f\u03d1\u03d9\f\r\u0002\u0002",
    "\u03d2\u03d3\u0007t\u0002\u0002\u03d3\u03da\u0007t\u0002\u0002\u03d4",
    "\u03d5\u0007s\u0002\u0002\u03d5\u03d6\u0007s\u0002\u0002\u03d6\u03da",
    "\u0007s\u0002\u0002\u03d7\u03d8\u0007s\u0002\u0002\u03d8\u03da\u0007",
    "s\u0002\u0002\u03d9\u03d2\u0003\u0002\u0002\u0002\u03d9\u03d4\u0003",
    "\u0002\u0002\u0002\u03d9\u03d7\u0003\u0002\u0002\u0002\u03da\u03db\u0003",
    "\u0002\u0002\u0002\u03db\u0411\u0005\u00a4S\u000e\u03dc\u03dd\f\f\u0002",
    "\u0002\u03dd\u03de\t\f\u0002\u0002\u03de\u0411\u0005\u00a4S\r\u03df",
    "\u03e0\f\n\u0002\u0002\u03e0\u03e1\t\r\u0002\u0002\u03e1\u0411\u0005",
    "\u00a4S\u000b\u03e2\u03e3\f\t\u0002\u0002\u03e3\u03e4\u0007\u0085\u0002",
    "\u0002\u03e4\u0411\u0005\u00a4S\n\u03e5\u03e6\f\b\u0002\u0002\u03e6",
    "\u03e7\u0007\u0087\u0002\u0002\u03e7\u0411\u0005\u00a4S\t\u03e8\u03e9",
    "\f\u0007\u0002\u0002\u03e9\u03ea\u0007\u0086\u0002\u0002\u03ea\u0411",
    "\u0005\u00a4S\b\u03eb\u03ec\f\u0006\u0002\u0002\u03ec\u03ed\u0007}\u0002",
    "\u0002\u03ed\u0411\u0005\u00a4S\u0007\u03ee\u03ef\f\u0005\u0002\u0002",
    "\u03ef\u03f0\u0007~\u0002\u0002\u03f0\u0411\u0005\u00a4S\u0006\u03f1",
    "\u03f2\f\u0004\u0002\u0002\u03f2\u03f3\u0007w\u0002\u0002\u03f3\u03f4",
    "\u0005\u00a4S\u0002\u03f4\u03f5\u0007x\u0002\u0002\u03f5\u03f6\u0005",
    "\u00a4S\u0005\u03f6\u0411\u0003\u0002\u0002\u0002\u03f7\u03f8\f\u0003",
    "\u0002\u0002\u03f8\u03f9\t\u000e\u0002\u0002\u03f9\u0411\u0005\u00a4",
    "S\u0003\u03fa\u03fb\f\u0018\u0002\u0002\u03fb\u03fc\u0007q\u0002\u0002",
    "\u03fc\u0411\u0005\u00c4c\u0002\u03fd\u03fe\f\u0017\u0002\u0002\u03fe",
    "\u03ff\u0007q\u0002\u0002\u03ff\u0411\u0005\u00b6\\\u0002\u0400\u0401",
    "\f\u0016\u0002\u0002\u0401\u0402\u0007m\u0002\u0002\u0402\u0403\u0005",
    "\u00a4S\u0002\u0403\u0404\u0007n\u0002\u0002\u0404\u0411\u0003\u0002",
    "\u0002\u0002\u0405\u0406\f\u0015\u0002\u0002\u0406\u0408\u0007i\u0002",
    "\u0002\u0407\u0409\u0005\u009aN\u0002\u0408\u0407\u0003\u0002\u0002",
    "\u0002\u0408\u0409\u0003\u0002\u0002\u0002\u0409\u040a\u0003\u0002\u0002",
    "\u0002\u040a\u0411\u0007j\u0002\u0002\u040b\u040c\f\u0012\u0002\u0002",
    "\u040c\u0411\t\b\u0002\u0002\u040d\u040e\f\u000b\u0002\u0002\u040e\u040f",
    "\u0007\u001f\u0002\u0002\u040f\u0411\u0005H%\u0002\u0410\u03cb\u0003",
    "\u0002\u0002\u0002\u0410\u03ce\u0003\u0002\u0002\u0002\u0410\u03d1\u0003",
    "\u0002\u0002\u0002\u0410\u03dc\u0003\u0002\u0002\u0002\u0410\u03df\u0003",
    "\u0002\u0002\u0002\u0410\u03e2\u0003\u0002\u0002\u0002\u0410\u03e5\u0003",
    "\u0002\u0002\u0002\u0410\u03e8\u0003\u0002\u0002\u0002\u0410\u03eb\u0003",
    "\u0002\u0002\u0002\u0410\u03ee\u0003\u0002\u0002\u0002\u0410\u03f1\u0003",
    "\u0002\u0002\u0002\u0410\u03f7\u0003\u0002\u0002\u0002\u0410\u03fa\u0003",
    "\u0002\u0002\u0002\u0410\u03fd\u0003\u0002\u0002\u0002\u0410\u0400\u0003",
    "\u0002\u0002\u0002\u0410\u0405\u0003\u0002\u0002\u0002\u0410\u040b\u0003",
    "\u0002\u0002\u0002\u0410\u040d\u0003\u0002\u0002\u0002\u0411\u0414\u0003",
    "\u0002\u0002\u0002\u0412\u0410\u0003\u0002\u0002\u0002\u0412\u0413\u0003",
    "\u0002\u0002\u0002\u0413\u00a5\u0003\u0002\u0002\u0002\u0414\u0412\u0003",
    "\u0002\u0002\u0002\u0415\u0416\u0007i\u0002\u0002\u0416\u0417\u0005",
    "\u00a4S\u0002\u0417\u0418\u0007j\u0002\u0002\u0418\u042d\u0003\u0002",
    "\u0002\u0002\u0419\u042d\u0007.\u0002\u0002\u041a\u042d\u0007,\u0002",
    "\u0002\u041b\u042d\u0005d3\u0002\u041c\u042d\u0007\u0095\u0002\u0002",
    "\u041d\u041e\u0005H%\u0002\u041e\u041f\u0007q\u0002\u0002\u041f\u0420",
    "\u0007\u000e\u0002\u0002\u0420\u042d\u0003\u0002\u0002\u0002\u0421\u0422",
    "\u00073\u0002\u0002\u0422\u0423\u0007q\u0002\u0002\u0423\u042d\u0007",
    "\u000e\u0002\u0002\u0424\u0428\u0005\u00b8]\u0002\u0425\u0429\u0005",
    "\u00c0a\u0002\u0426\u0427\u0007.\u0002\u0002\u0427\u0429\u0005\u00c2",
    "b\u0002\u0428\u0425\u0003\u0002\u0002\u0002\u0428\u0426\u0003\u0002",
    "\u0002\u0002\u0429\u042d\u0003\u0002\u0002\u0002\u042a\u042d\u0005\u00c6",
    "d\u0002\u042b\u042d\u0005N(\u0002\u042c\u0415\u0003\u0002\u0002\u0002",
    "\u042c\u0419\u0003\u0002\u0002\u0002\u042c\u041a\u0003\u0002\u0002\u0002",
    "\u042c\u041b\u0003\u0002\u0002\u0002\u042c\u041c\u0003\u0002\u0002\u0002",
    "\u042c\u041d\u0003\u0002\u0002\u0002\u042c\u0421\u0003\u0002\u0002\u0002",
    "\u042c\u0424\u0003\u0002\u0002\u0002\u042c\u042a\u0003\u0002\u0002\u0002",
    "\u042c\u042b\u0003\u0002\u0002\u0002\u042d\u00a7\u0003\u0002\u0002\u0002",
    "\u042e\u042f\u0005\u00b8]\u0002\u042f\u0430\u0005\u00aaV\u0002\u0430",
    "\u0431\u0005\u00b4[\u0002\u0431\u043a\u0003\u0002\u0002\u0002\u0432",
    "\u0437\u0005\u00aaV\u0002\u0433\u0438\u0005\u00aeX\u0002\u0434\u0438",
    "\u0005\u00b4[\u0002\u0435\u0438\u0005\u00b0Y\u0002\u0436\u0438\u0005",
    "\u00b2Z\u0002\u0437\u0433\u0003\u0002\u0002\u0002\u0437\u0434\u0003",
    "\u0002\u0002\u0002\u0437\u0435\u0003\u0002\u0002\u0002\u0437\u0436\u0003",
    "\u0002\u0002\u0002\u0438\u043a\u0003\u0002\u0002\u0002\u0439\u042e\u0003",
    "\u0002\u0002\u0002\u0439\u0432\u0003\u0002\u0002\u0002\u043a\u00a9\u0003",
    "\u0002\u0002\u0002\u043b\u043d\u0007\u0095\u0002\u0002\u043c\u043e\u0005",
    "\u00ba^\u0002\u043d\u043c\u0003\u0002\u0002\u0002\u043d\u043e\u0003",
    "\u0002\u0002\u0002\u043e\u0446\u0003\u0002\u0002\u0002\u043f\u0440\u0007",
    "q\u0002\u0002\u0440\u0442\u0007\u0095\u0002\u0002\u0441\u0443\u0005",
    "\u00ba^\u0002\u0442\u0441\u0003\u0002\u0002\u0002\u0442\u0443\u0003",
    "\u0002\u0002\u0002\u0443\u0445\u0003\u0002\u0002\u0002\u0444\u043f\u0003",
    "\u0002\u0002\u0002\u0445\u0448\u0003\u0002\u0002\u0002\u0446\u0444\u0003",
    "\u0002\u0002\u0002\u0446\u0447\u0003\u0002\u0002\u0002\u0447\u044d\u0003",
    "\u0002\u0002\u0002\u0448\u0446\u0003\u0002\u0002\u0002\u0449\u044d\u0005",
    "N(\u0002\u044a\u044b\u0007\u0005\u0002\u0002\u044b\u044d\u0005\u00ba",
    "^\u0002\u044c\u043b\u0003\u0002\u0002\u0002\u044c\u0449\u0003\u0002",
    "\u0002\u0002\u044c\u044a\u0003\u0002\u0002\u0002\u044d\u00ab\u0003\u0002",
    "\u0002\u0002\u044e\u0450\u0007\u0095\u0002\u0002\u044f\u0451\u0005\u00bc",
    "_\u0002\u0450\u044f\u0003\u0002\u0002\u0002\u0450\u0451\u0003\u0002",
    "\u0002\u0002\u0451\u0452\u0003\u0002\u0002\u0002\u0452\u0453\u0005\u00b4",
    "[\u0002\u0453\u00ad\u0003\u0002\u0002\u0002\u0454\u0458\u0005J&\u0002",
    "\u0455\u0457\u0005J&\u0002\u0456\u0455\u0003\u0002\u0002\u0002\u0457",
    "\u045a\u0003\u0002\u0002\u0002\u0458\u0456\u0003\u0002\u0002\u0002\u0458",
    "\u0459\u0003\u0002\u0002\u0002\u0459\u045b\u0003\u0002\u0002\u0002\u045a",
    "\u0458\u0003\u0002\u0002\u0002\u045b\u045c\u0005D#\u0002\u045c\u0470",
    "\u0003\u0002\u0002\u0002\u045d\u045e\u0007m\u0002\u0002\u045e\u045f",
    "\u0005\u00a4S\u0002\u045f\u0466\u0007n\u0002\u0002\u0460\u0461\u0007",
    "m\u0002\u0002\u0461\u0462\u0005\u00a4S\u0002\u0462\u0463\u0007n\u0002",
    "\u0002\u0463\u0465\u0003\u0002\u0002\u0002\u0464\u0460\u0003\u0002\u0002",
    "\u0002\u0465\u0468\u0003\u0002\u0002\u0002\u0466\u0464\u0003\u0002\u0002",
    "\u0002\u0466\u0467\u0003\u0002\u0002\u0002\u0467\u046c\u0003\u0002\u0002",
    "\u0002\u0468\u0466\u0003\u0002\u0002\u0002\u0469\u046b\u0005J&\u0002",
    "\u046a\u0469\u0003\u0002\u0002\u0002\u046b\u046e\u0003\u0002\u0002\u0002",
    "\u046c\u046a\u0003\u0002\u0002\u0002\u046c\u046d\u0003\u0002\u0002\u0002",
    "\u046d\u0470\u0003\u0002\u0002\u0002\u046e\u046c\u0003\u0002\u0002\u0002",
    "\u046f\u0454\u0003\u0002\u0002\u0002\u046f\u045d\u0003\u0002\u0002\u0002",
    "\u0470\u00af\u0003\u0002\u0002\u0002\u0471\u0474\u0007k\u0002\u0002",
    "\u0472\u0475\u0007\u0095\u0002\u0002\u0473\u0475\u0005\u00a4S\u0002",
    "\u0474\u0472\u0003\u0002\u0002\u0002\u0474\u0473\u0003\u0002\u0002\u0002",
    "\u0475\u0476\u0003\u0002\u0002\u0002\u0476\u0479\u0007\u0094\u0002\u0002",
    "\u0477\u047a\u0005d3\u0002\u0478\u047a\u0005\u00a4S\u0002\u0479\u0477",
    "\u0003\u0002\u0002\u0002\u0479\u0478\u0003\u0002\u0002\u0002\u047a\u0487",
    "\u0003\u0002\u0002\u0002\u047b\u047e\u0007p\u0002\u0002\u047c\u047f",
    "\u0007\u0095\u0002\u0002\u047d\u047f\u0005\u00a4S\u0002\u047e\u047c",
    "\u0003\u0002\u0002\u0002\u047e\u047d\u0003\u0002\u0002\u0002\u047f\u0480",
    "\u0003\u0002\u0002\u0002\u0480\u0483\u0007\u0094\u0002\u0002\u0481\u0484",
    "\u0005d3\u0002\u0482\u0484\u0005\u00a4S\u0002\u0483\u0481\u0003\u0002",
    "\u0002\u0002\u0483\u0482\u0003\u0002\u0002\u0002\u0484\u0486\u0003\u0002",
    "\u0002\u0002\u0485\u047b\u0003\u0002\u0002\u0002\u0486\u0489\u0003\u0002",
    "\u0002\u0002\u0487\u0485\u0003\u0002\u0002\u0002\u0487\u0488\u0003\u0002",
    "\u0002\u0002\u0488\u048a\u0003\u0002\u0002\u0002\u0489\u0487\u0003\u0002",
    "\u0002\u0002\u048a\u048b\u0007l\u0002\u0002\u048b\u00b1\u0003\u0002",
    "\u0002\u0002\u048c\u048f\u0007k\u0002\u0002\u048d\u0490\u0005d3\u0002",
    "\u048e\u0490\u0005\u00a4S\u0002\u048f\u048d\u0003\u0002\u0002\u0002",
    "\u048f\u048e\u0003\u0002\u0002\u0002\u0490\u0498\u0003\u0002\u0002\u0002",
    "\u0491\u0494\u0007p\u0002\u0002\u0492\u0495\u0005d3\u0002\u0493\u0495",
    "\u0005\u00a4S\u0002\u0494\u0492\u0003\u0002\u0002\u0002\u0494\u0493",
    "\u0003\u0002\u0002\u0002\u0495\u0497\u0003\u0002\u0002\u0002\u0496\u0491",
    "\u0003\u0002\u0002\u0002\u0497\u049a\u0003\u0002\u0002\u0002\u0498\u0496",
    "\u0003\u0002\u0002\u0002\u0498\u0499\u0003\u0002\u0002\u0002\u0499\u049b",
    "\u0003\u0002\u0002\u0002\u049a\u0498\u0003\u0002\u0002\u0002\u049b\u049c",
    "\u0007l\u0002\u0002\u049c\u00b3\u0003\u0002\u0002\u0002\u049d\u049f",
    "\u0005\u00c2b\u0002\u049e\u04a0\u0005 \u0011\u0002\u049f\u049e\u0003",
    "\u0002\u0002\u0002\u049f\u04a0\u0003\u0002\u0002\u0002\u04a0\u00b5\u0003",
    "\u0002\u0002\u0002\u04a1\u04a2\u0005\u00b8]\u0002\u04a2\u04a3\u0005",
    "\u00c0a\u0002\u04a3\u00b7\u0003\u0002\u0002\u0002\u04a4\u04a5\u0007",
    "t\u0002\u0002\u04a5\u04a6\u0005\u001e\u0010\u0002\u04a6\u04a7\u0007",
    "s\u0002\u0002\u04a7\u00b9\u0003\u0002\u0002\u0002\u04a8\u04a9\u0007",
    "t\u0002\u0002\u04a9\u04ac\u0007s\u0002\u0002\u04aa\u04ac\u0005P)\u0002",
    "\u04ab\u04a8\u0003\u0002\u0002\u0002\u04ab\u04aa\u0003\u0002\u0002\u0002",
    "\u04ac\u00bb\u0003\u0002\u0002\u0002\u04ad\u04ae\u0007t\u0002\u0002",
    "\u04ae\u04b1\u0007s\u0002\u0002\u04af\u04b1\u0005\u00b8]\u0002\u04b0",
    "\u04ad\u0003\u0002\u0002\u0002\u04b0\u04af\u0003\u0002\u0002\u0002\u04b1",
    "\u00bd\u0003\u0002\u0002\u0002\u04b2\u04b9\u0005\u00c2b\u0002\u04b3",
    "\u04b4\u0007q\u0002\u0002\u04b4\u04b6\u0007\u0095\u0002\u0002\u04b5",
    "\u04b7\u0005\u00c2b\u0002\u04b6\u04b5\u0003\u0002\u0002\u0002\u04b6",
    "\u04b7\u0003\u0002\u0002\u0002\u04b7\u04b9\u0003\u0002\u0002\u0002\u04b8",
    "\u04b2\u0003\u0002\u0002\u0002\u04b8\u04b3\u0003\u0002\u0002\u0002\u04b9",
    "\u00bf\u0003\u0002\u0002\u0002\u04ba\u04bb\u0007,\u0002\u0002\u04bb",
    "\u04bf\u0005\u00be`\u0002\u04bc\u04bd\u0007\u0095\u0002\u0002\u04bd",
    "\u04bf\u0005\u00c2b\u0002\u04be\u04ba\u0003\u0002\u0002\u0002\u04be",
    "\u04bc\u0003\u0002\u0002\u0002\u04bf\u00c1\u0003\u0002\u0002\u0002\u04c0",
    "\u04c2\u0007i\u0002\u0002\u04c1\u04c3\u0005\u009aN\u0002\u04c2\u04c1",
    "\u0003\u0002\u0002\u0002\u04c2\u04c3\u0003\u0002\u0002\u0002\u04c3\u04c4",
    "\u0003\u0002\u0002\u0002\u04c4\u04c5\u0007j\u0002\u0002\u04c5\u00c3",
    "\u0003\u0002\u0002\u0002\u04c6\u04c7\t\u000f\u0002\u0002\u04c7\u00c5",
    "\u0003\u0002\u0002\u0002\u04c8\u04c9\u0007m\u0002\u0002\u04c9\u04ca",
    "\u0005\u00c8e\u0002\u04ca\u04cb\u0007n\u0002\u0002\u04cb\u00c7\u0003",
    "\u0002\u0002\u0002\u04cc\u04cd\u0005\u00caf\u0002\u04cd\u04cf\u0005",
    "\u00d0i\u0002\u04ce\u04d0\u0005\u00d8m\u0002\u04cf\u04ce\u0003\u0002",
    "\u0002\u0002\u04cf\u04d0\u0003\u0002\u0002\u0002\u04d0\u04d2\u0003\u0002",
    "\u0002\u0002\u04d1\u04d3\u0005\u00e4s\u0002\u04d2\u04d1\u0003\u0002",
    "\u0002\u0002\u04d2\u04d3\u0003\u0002\u0002\u0002\u04d3\u04d5\u0003\u0002",
    "\u0002\u0002\u04d4\u04d6\u0005\u00e8u\u0002\u04d5\u04d4\u0003\u0002",
    "\u0002\u0002\u04d5\u04d6\u0003\u0002\u0002\u0002\u04d6\u04d8\u0003\u0002",
    "\u0002\u0002\u04d7\u04d9\u0005\u00dep\u0002\u04d8\u04d7\u0003\u0002",
    "\u0002\u0002\u04d8\u04d9\u0003\u0002\u0002\u0002\u04d9\u04db\u0003\u0002",
    "\u0002\u0002\u04da\u04dc\u0005\u00dco\u0002\u04db\u04da\u0003\u0002",
    "\u0002\u0002\u04db\u04dc\u0003\u0002\u0002\u0002\u04dc\u04de\u0003\u0002",
    "\u0002\u0002\u04dd\u04df\u0005\u00eex\u0002\u04de\u04dd\u0003\u0002",
    "\u0002\u0002\u04de\u04df\u0003\u0002\u0002\u0002\u04df\u04e1\u0003\u0002",
    "\u0002\u0002\u04e0\u04e2\u0005\u00f0y\u0002\u04e1\u04e0\u0003\u0002",
    "\u0002\u0002\u04e1\u04e2\u0003\u0002\u0002\u0002\u04e2\u00c9\u0003\u0002",
    "\u0002\u0002\u04e3\u04e4\u0007<\u0002\u0002\u04e4\u04e5\u0005\u00cc",
    "g\u0002\u04e5\u00cb\u0003\u0002\u0002\u0002\u04e6\u04eb\u0005\u00ce",
    "h\u0002\u04e7\u04e8\u0007p\u0002\u0002\u04e8\u04ea\u0005\u00ceh\u0002",
    "\u04e9\u04e7\u0003\u0002\u0002\u0002\u04ea\u04ed\u0003\u0002\u0002\u0002",
    "\u04eb\u04e9\u0003\u0002\u0002\u0002\u04eb\u04ec\u0003\u0002\u0002\u0002",
    "\u04ec\u00cd\u0003\u0002\u0002\u0002\u04ed\u04eb\u0003\u0002\u0002\u0002",
    "\u04ee\u04ff\u0005\u00d4k\u0002\u04ef\u04ff\u0005\u00d6l\u0002\u04f0",
    "\u04f1\u0007E\u0002\u0002\u04f1\u04f6\u0005\u00d4k\u0002\u04f2\u04f3",
    "\u00077\u0002\u0002\u04f3\u04f4\u0007\u0095\u0002\u0002\u04f4\u04f5",
    "\u0007Y\u0002\u0002\u04f5\u04f7\u0005\u00ccg\u0002\u04f6\u04f2\u0003",
    "\u0002\u0002\u0002\u04f7\u04f8\u0003\u0002\u0002\u0002\u04f8\u04f6\u0003",
    "\u0002\u0002\u0002\u04f8\u04f9\u0003\u0002\u0002\u0002\u04f9\u04fa\u0003",
    "\u0002\u0002\u0002\u04fa\u04fb\u0007\u0014\u0002\u0002\u04fb\u04fc\u0005",
    "\u00ccg\u0002\u04fc\u04fd\u0007L\u0002\u0002\u04fd\u04ff\u0003\u0002",
    "\u0002\u0002\u04fe\u04ee\u0003\u0002\u0002\u0002\u04fe\u04ef\u0003\u0002",
    "\u0002\u0002\u04fe\u04f0\u0003\u0002\u0002\u0002\u04ff\u00cf\u0003\u0002",
    "\u0002\u0002\u0500\u0501\u0007=\u0002\u0002\u0501\u0505\u0007\u0095",
    "\u0002\u0002\u0502\u0503\u0007M\u0002\u0002\u0503\u0504\u0007U\u0002",
    "\u0002\u0504\u0506\u0005\u00d2j\u0002\u0505\u0502\u0003\u0002\u0002",
    "\u0002\u0505\u0506\u0003\u0002\u0002\u0002\u0506\u00d1\u0003\u0002\u0002",
    "\u0002\u0507\u0508\u0003\u0002\u0002\u0002\u0508\u00d3\u0003\u0002\u0002",
    "\u0002\u0509\u050a\u0007\u0095\u0002\u0002\u050a\u050c\u0007q\u0002",
    "\u0002\u050b\u0509\u0003\u0002\u0002\u0002\u050c\u050f\u0003\u0002\u0002",
    "\u0002\u050d\u050b\u0003\u0002\u0002\u0002\u050d\u050e\u0003\u0002\u0002",
    "\u0002\u050e\u0510\u0003\u0002\u0002\u0002\u050f\u050d\u0003\u0002\u0002",
    "\u0002\u0510\u051e\u0007\u0095\u0002\u0002\u0511\u0512\u0007\u0095\u0002",
    "\u0002\u0512\u0513\u0007i\u0002\u0002\u0513\u0518\u0005\u00d4k\u0002",
    "\u0514\u0515\u0007p\u0002\u0002\u0515\u0517\u0005\u00d4k\u0002\u0516",
    "\u0514\u0003\u0002\u0002\u0002\u0517\u051a\u0003\u0002\u0002\u0002\u0518",
    "\u0516\u0003\u0002\u0002\u0002\u0518\u0519\u0003\u0002\u0002\u0002\u0519",
    "\u051b\u0003\u0002\u0002\u0002\u051a\u0518\u0003\u0002\u0002\u0002\u051b",
    "\u051c\u0007j\u0002\u0002\u051c\u051e\u0003\u0002\u0002\u0002\u051d",
    "\u050d\u0003\u0002\u0002\u0002\u051d\u0511\u0003\u0002\u0002\u0002\u051e",
    "\u00d5\u0003\u0002\u0002\u0002\u051f\u0520\u0005\u00c8e\u0002\u0520",
    "\u00d7\u0003\u0002\u0002\u0002\u0521\u0522\u0007>\u0002\u0002\u0522",
    "\u0527\u0005\u00dan\u0002\u0523\u0524\t\u0010\u0002\u0002\u0524\u0526",
    "\u0005\u00dan\u0002\u0525\u0523\u0003\u0002\u0002\u0002\u0526\u0529",
    "\u0003\u0002\u0002\u0002\u0527\u0525\u0003\u0002\u0002\u0002\u0527\u0528",
    "\u0003\u0002\u0002\u0002\u0528\u00d9\u0003\u0002\u0002\u0002\u0529\u0527",
    "\u0003\u0002\u0002\u0002\u052a\u052b\u0005\u00d4k\u0002\u052b\u052c",
    "\t\u0011\u0002\u0002\u052c\u052d\u0005\u00e2r\u0002\u052d\u00db\u0003",
    "\u0002\u0002\u0002\u052e\u0531\u0007?\u0002\u0002\u052f\u0532\u0007",
    "d\u0002\u0002\u0530\u0532\u0005\u00e0q\u0002\u0531\u052f\u0003\u0002",
    "\u0002\u0002\u0531\u0530\u0003\u0002\u0002\u0002\u0532\u00dd\u0003\u0002",
    "\u0002\u0002\u0533\u0534\u0007@\u0002\u0002\u0534\u0535\u0007A\u0002",
    "\u0002\u0535\u0537\u0005\u00d4k\u0002\u0536\u0538\t\u0012\u0002\u0002",
    "\u0537\u0536\u0003\u0002\u0002\u0002\u0537\u0538\u0003\u0002\u0002\u0002",
    "\u0538\u053b\u0003\u0002\u0002\u0002\u0539\u053a\u0007R\u0002\u0002",
    "\u053a\u053c\t\u0013\u0002\u0002\u053b\u0539\u0003\u0002\u0002\u0002",
    "\u053b\u053c\u0003\u0002\u0002\u0002\u053c\u00df\u0003\u0002\u0002\u0002",
    "\u053d\u053e\u0007x\u0002\u0002\u053e\u053f\u0005\u00a4S\u0002\u053f",
    "\u00e1\u0003\u0002\u0002\u0002\u0540\u0541\u0005d3\u0002\u0541\u00e3",
    "\u0003\u0002\u0002\u0002\u0542\u0543\u0007D\u0002\u0002\u0543\u0544",
    "\u0007N\u0002\u0002\u0544\u0545\u0007O\u0002\u0002\u0545\u0546\u0005",
    "\u00e6t\u0002\u0546\u00e5\u0003\u0002\u0002\u0002\u0547\u0548\u0003",
    "\u0002\u0002\u0002\u0548\u00e7\u0003\u0002\u0002\u0002\u0549\u054a\u0007",
    "P\u0002\u0002\u054a\u054b\u0007A\u0002\u0002\u054b\u054e\u0005\u00ea",
    "v\u0002\u054c\u054d\u0007Q\u0002\u0002\u054d\u054f\u0005\u00ecw\u0002",
    "\u054e\u054c\u0003\u0002\u0002\u0002\u054e\u054f\u0003\u0002\u0002\u0002",
    "\u054f\u00e9\u0003\u0002\u0002\u0002\u0550\u0551\u0003\u0002\u0002\u0002",
    "\u0551\u00eb\u0003\u0002\u0002\u0002\u0552\u0553\u0003\u0002\u0002\u0002",
    "\u0553\u00ed\u0003\u0002\u0002\u0002\u0554\u0557\u0007J\u0002\u0002",
    "\u0555\u0558\u0007d\u0002\u0002\u0556\u0558\u0005\u00e0q\u0002\u0557",
    "\u0555\u0003\u0002\u0002\u0002\u0557\u0556\u0003\u0002\u0002\u0002\u0558",
    "\u00ef\u0003\u0002\u0002\u0002\u0559\u055a\u0007\u001a\u0002\u0002\u055a",
    "\u055d\t\u0014\u0002\u0002\u055b\u055c\u0007\\\u0002\u0002\u055c\u055e",
    "\t\u0015\u0002\u0002\u055d\u055b\u0003\u0002\u0002\u0002\u055d\u055e",
    "\u0003\u0002\u0002\u0002\u055e\u00f1\u0003\u0002\u0002\u0002\u009e\u00f8",
    "\u00ff\u0106\u010c\u011c\u0124\u0128\u012c\u0132\u0136\u013e\u0142\u0145",
    "\u0148\u0151\u0157\u015c\u015f\u0165\u016c\u0175\u017c\u0185\u018c\u0192",
    "\u0197\u01a0\u01a3\u01a7\u01af\u01b4\u01b8\u01be\u01cd\u01d4\u01d9\u01e0",
    "\u01e8\u01f2\u01fa\u0202\u0207\u0210\u0216\u021d\u0222\u022a\u022e\u0230",
    "\u023a\u0241\u0244\u024b\u0250\u0254\u0259\u0263\u026c\u026e\u0275\u027a",
    "\u0283\u0288\u028b\u0290\u0299\u02a9\u02b3\u02b6\u02bf\u02c9\u02d1\u02d4",
    "\u02d7\u02df\u02e8\u02f2\u02fe\u031b\u031e\u0321\u0325\u032e\u0333\u033d",
    "\u0342\u0347\u034c\u0351\u0358\u0365\u036f\u0375\u0380\u0386\u038a\u038e",
    "\u0392\u0394\u0398\u039d\u03b0\u03c9\u03d9\u0408\u0410\u0412\u0428\u042c",
    "\u0437\u0439\u043d\u0442\u0446\u044c\u0450\u0458\u0466\u046c\u046f\u0474",
    "\u0479\u047e\u0483\u0487\u048f\u0494\u0498\u049f\u04ab\u04b0\u04b6\u04b8",
    "\u04be\u04c2\u04cf\u04d2\u04d5\u04d8\u04db\u04de\u04e1\u04eb\u04f8\u04fe",
    "\u0505\u050d\u0518\u051d\u0527\u0531\u0537\u053b\u054e\u0557\u055d"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", 
                     "'!'", "'~'", "'?'", "':'", "'=='", "'<='", "'>='", 
                     "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", 
                     "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", 
                     "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", 
                     "'>>='", "'>>>='", "'=>'", null, "'@'", "'...'", null, 
                     null, "'/**'", null, "'/*'", null, "'''" ];

var symbolicNames = [ null, "OVERRIDE", "VIRTUAL", "SET", "GET", "DATABASE", 
                      "ABSTRACT", "BOOLEAN", "BREAK", "BYTE", "CATCH", "CHAR", 
                      "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", 
                      "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", 
                      "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", 
                      "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
                      "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", 
                      "STATIC", "SUPER", "SYNCHRONIZED", "THIS", "THROW", 
                      "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "SWITCH", "WHEN", "GLOBAL", "WEBSERVICE", 
                      "APEX_WITH_SHARING", "APEX_WITHOUT_SHARING", "SELECT", 
                      "FROM", "WHERE", "LIMIT", "ORDER", "BY", "ASC", "DESC", 
                      "WITH", "TYPEOF", "REFERENCE", "VIEW", "VIEWSTAT", 
                      "TRACKING", "OFFSET", "IN", "END", "USING", "DATA", 
                      "CATEGORY", "GROUP", "HAVING", "NULLS", "FIRST", "LAST", 
                      "SCOPE", "ROLLUP", "CUBE", "LIKE", "THEN", "INSERT", 
                      "UPSERT", "UPDATE", "DELETE", "UNDELETE", "TESTMETHOD", 
                      "TRIGGER", "ON", "BEFORE", "AFTER", "IntegerLiteral", 
                      "FloatingPointLiteral", "BooleanLiteral", "StringLiteral", 
                      "NullLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                      "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", 
                      "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
                      "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", 
                      "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", 
                      "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                      "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "LAMBDA_LIKE", "Identifier", "AT", "ELLIPSIS", "WS", 
                      "APEXDOC_COMMENT", "APEXDOC_COMMENT_START", "COMMENT", 
                      "COMMENT_START", "LINE_COMMENT", "QUOTE" ];

var ruleNames =  [ "compilationUnit", "typeDeclaration", "triggerDeclaration", 
                   "triggerTimings", "triggerTiming", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "enumDeclaration", 
                   "enumConstants", "enumConstant", "enumBodyDeclarations", 
                   "interfaceDeclaration", "typeList", "classBody", "interfaceBody", 
                   "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
                   "constructorDeclaration", "fieldDeclaration", "propertyDeclaration", 
                   "propertyBodyDeclaration", "interfaceBodyDeclaration", 
                   "interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
                   "interfaceMethodDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "enumConstantName", "type", "typedArray", 
                   "classOrInterfaceType", "primitiveType", "typeArguments", 
                   "typeArgument", "qualifiedNameList", "formalParameters", 
                   "formalParameterList", "formalParameter", "lastFormalParameter", 
                   "methodBody", "constructorBody", "qualifiedName", "literal", 
                   "annotation", "annotationName", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "block", "blockStatement", "specialComment", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "statement", "propertyBlock", 
                   "getter", "setter", "catchClause", "catchType", "finallyBlock", 
                   "whenStatements", "whenStatement", "whenExpression", 
                   "forControl", "forInit", "enhancedForControl", "forUpdate", 
                   "parExpression", "expressionList", "statementExpression", 
                   "constantExpression", "apexDbExpressionShort", "apexDbExpression", 
                   "expression", "primary", "creator", "createdName", "innerCreator", 
                   "arrayCreatorRest", "mapCreatorRest", "setCreatorRest", 
                   "classCreatorRest", "explicitGenericInvocation", "nonWildcardTypeArguments", 
                   "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments", 
                   "accessor", "soqlLiteral", "query", "selectClause", "fieldList", 
                   "selectField", "fromClause", "filterScope", "soqlField", 
                   "subquery", "whereClause", "whereField", "limitClause", 
                   "orderClause", "bindVariable", "soqlValue", "withClause", 
                   "soqlFilteringExpression", "groupClause", "fieldGroupList", 
                   "havingConditionExpression", "offsetClause", "viewClause" ];

function apexParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

apexParser.prototype = Object.create(antlr4.Parser.prototype);
apexParser.prototype.constructor = apexParser;

Object.defineProperty(apexParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

apexParser.EOF = antlr4.Token.EOF;
apexParser.OVERRIDE = 1;
apexParser.VIRTUAL = 2;
apexParser.SET = 3;
apexParser.GET = 4;
apexParser.DATABASE = 5;
apexParser.ABSTRACT = 6;
apexParser.BOOLEAN = 7;
apexParser.BREAK = 8;
apexParser.BYTE = 9;
apexParser.CATCH = 10;
apexParser.CHAR = 11;
apexParser.CLASS = 12;
apexParser.CONST = 13;
apexParser.CONTINUE = 14;
apexParser.DEFAULT = 15;
apexParser.DO = 16;
apexParser.DOUBLE = 17;
apexParser.ELSE = 18;
apexParser.ENUM = 19;
apexParser.EXTENDS = 20;
apexParser.FINAL = 21;
apexParser.FINALLY = 22;
apexParser.FLOAT = 23;
apexParser.FOR = 24;
apexParser.IF = 25;
apexParser.GOTO = 26;
apexParser.IMPLEMENTS = 27;
apexParser.IMPORT = 28;
apexParser.INSTANCEOF = 29;
apexParser.INT = 30;
apexParser.INTERFACE = 31;
apexParser.LONG = 32;
apexParser.NATIVE = 33;
apexParser.NEW = 34;
apexParser.PACKAGE = 35;
apexParser.PRIVATE = 36;
apexParser.PROTECTED = 37;
apexParser.PUBLIC = 38;
apexParser.RETURN = 39;
apexParser.SHORT = 40;
apexParser.STATIC = 41;
apexParser.SUPER = 42;
apexParser.SYNCHRONIZED = 43;
apexParser.THIS = 44;
apexParser.THROW = 45;
apexParser.THROWS = 46;
apexParser.TRANSIENT = 47;
apexParser.TRY = 48;
apexParser.VOID = 49;
apexParser.VOLATILE = 50;
apexParser.WHILE = 51;
apexParser.SWITCH = 52;
apexParser.WHEN = 53;
apexParser.GLOBAL = 54;
apexParser.WEBSERVICE = 55;
apexParser.APEX_WITH_SHARING = 56;
apexParser.APEX_WITHOUT_SHARING = 57;
apexParser.SELECT = 58;
apexParser.FROM = 59;
apexParser.WHERE = 60;
apexParser.LIMIT = 61;
apexParser.ORDER = 62;
apexParser.BY = 63;
apexParser.ASC = 64;
apexParser.DESC = 65;
apexParser.WITH = 66;
apexParser.TYPEOF = 67;
apexParser.REFERENCE = 68;
apexParser.VIEW = 69;
apexParser.VIEWSTAT = 70;
apexParser.TRACKING = 71;
apexParser.OFFSET = 72;
apexParser.IN = 73;
apexParser.END = 74;
apexParser.USING = 75;
apexParser.DATA = 76;
apexParser.CATEGORY = 77;
apexParser.GROUP = 78;
apexParser.HAVING = 79;
apexParser.NULLS = 80;
apexParser.FIRST = 81;
apexParser.LAST = 82;
apexParser.SCOPE = 83;
apexParser.ROLLUP = 84;
apexParser.CUBE = 85;
apexParser.LIKE = 86;
apexParser.THEN = 87;
apexParser.INSERT = 88;
apexParser.UPSERT = 89;
apexParser.UPDATE = 90;
apexParser.DELETE = 91;
apexParser.UNDELETE = 92;
apexParser.TESTMETHOD = 93;
apexParser.TRIGGER = 94;
apexParser.ON = 95;
apexParser.BEFORE = 96;
apexParser.AFTER = 97;
apexParser.IntegerLiteral = 98;
apexParser.FloatingPointLiteral = 99;
apexParser.BooleanLiteral = 100;
apexParser.StringLiteral = 101;
apexParser.NullLiteral = 102;
apexParser.LPAREN = 103;
apexParser.RPAREN = 104;
apexParser.LBRACE = 105;
apexParser.RBRACE = 106;
apexParser.LBRACK = 107;
apexParser.RBRACK = 108;
apexParser.SEMI = 109;
apexParser.COMMA = 110;
apexParser.DOT = 111;
apexParser.ASSIGN = 112;
apexParser.GT = 113;
apexParser.LT = 114;
apexParser.BANG = 115;
apexParser.TILDE = 116;
apexParser.QUESTION = 117;
apexParser.COLON = 118;
apexParser.EQUAL = 119;
apexParser.LE = 120;
apexParser.GE = 121;
apexParser.NOTEQUAL = 122;
apexParser.AND = 123;
apexParser.OR = 124;
apexParser.INC = 125;
apexParser.DEC = 126;
apexParser.ADD = 127;
apexParser.SUB = 128;
apexParser.MUL = 129;
apexParser.DIV = 130;
apexParser.BITAND = 131;
apexParser.BITOR = 132;
apexParser.CARET = 133;
apexParser.MOD = 134;
apexParser.ADD_ASSIGN = 135;
apexParser.SUB_ASSIGN = 136;
apexParser.MUL_ASSIGN = 137;
apexParser.DIV_ASSIGN = 138;
apexParser.AND_ASSIGN = 139;
apexParser.OR_ASSIGN = 140;
apexParser.XOR_ASSIGN = 141;
apexParser.MOD_ASSIGN = 142;
apexParser.LSHIFT_ASSIGN = 143;
apexParser.RSHIFT_ASSIGN = 144;
apexParser.URSHIFT_ASSIGN = 145;
apexParser.LAMBDA_LIKE = 146;
apexParser.Identifier = 147;
apexParser.AT = 148;
apexParser.ELLIPSIS = 149;
apexParser.WS = 150;
apexParser.APEXDOC_COMMENT = 151;
apexParser.APEXDOC_COMMENT_START = 152;
apexParser.COMMENT = 153;
apexParser.COMMENT_START = 154;
apexParser.LINE_COMMENT = 155;
apexParser.QUOTE = 156;

apexParser.RULE_compilationUnit = 0;
apexParser.RULE_typeDeclaration = 1;
apexParser.RULE_triggerDeclaration = 2;
apexParser.RULE_triggerTimings = 3;
apexParser.RULE_triggerTiming = 4;
apexParser.RULE_modifier = 5;
apexParser.RULE_classOrInterfaceModifier = 6;
apexParser.RULE_variableModifier = 7;
apexParser.RULE_classDeclaration = 8;
apexParser.RULE_enumDeclaration = 9;
apexParser.RULE_enumConstants = 10;
apexParser.RULE_enumConstant = 11;
apexParser.RULE_enumBodyDeclarations = 12;
apexParser.RULE_interfaceDeclaration = 13;
apexParser.RULE_typeList = 14;
apexParser.RULE_classBody = 15;
apexParser.RULE_interfaceBody = 16;
apexParser.RULE_classBodyDeclaration = 17;
apexParser.RULE_memberDeclaration = 18;
apexParser.RULE_methodDeclaration = 19;
apexParser.RULE_constructorDeclaration = 20;
apexParser.RULE_fieldDeclaration = 21;
apexParser.RULE_propertyDeclaration = 22;
apexParser.RULE_propertyBodyDeclaration = 23;
apexParser.RULE_interfaceBodyDeclaration = 24;
apexParser.RULE_interfaceMemberDeclaration = 25;
apexParser.RULE_constDeclaration = 26;
apexParser.RULE_constantDeclarator = 27;
apexParser.RULE_interfaceMethodDeclaration = 28;
apexParser.RULE_variableDeclarators = 29;
apexParser.RULE_variableDeclarator = 30;
apexParser.RULE_variableDeclaratorId = 31;
apexParser.RULE_variableInitializer = 32;
apexParser.RULE_arrayInitializer = 33;
apexParser.RULE_enumConstantName = 34;
apexParser.RULE_type = 35;
apexParser.RULE_typedArray = 36;
apexParser.RULE_classOrInterfaceType = 37;
apexParser.RULE_primitiveType = 38;
apexParser.RULE_typeArguments = 39;
apexParser.RULE_typeArgument = 40;
apexParser.RULE_qualifiedNameList = 41;
apexParser.RULE_formalParameters = 42;
apexParser.RULE_formalParameterList = 43;
apexParser.RULE_formalParameter = 44;
apexParser.RULE_lastFormalParameter = 45;
apexParser.RULE_methodBody = 46;
apexParser.RULE_constructorBody = 47;
apexParser.RULE_qualifiedName = 48;
apexParser.RULE_literal = 49;
apexParser.RULE_annotation = 50;
apexParser.RULE_annotationName = 51;
apexParser.RULE_elementValuePairs = 52;
apexParser.RULE_elementValuePair = 53;
apexParser.RULE_elementValue = 54;
apexParser.RULE_elementValueArrayInitializer = 55;
apexParser.RULE_block = 56;
apexParser.RULE_blockStatement = 57;
apexParser.RULE_specialComment = 58;
apexParser.RULE_localVariableDeclarationStatement = 59;
apexParser.RULE_localVariableDeclaration = 60;
apexParser.RULE_statement = 61;
apexParser.RULE_propertyBlock = 62;
apexParser.RULE_getter = 63;
apexParser.RULE_setter = 64;
apexParser.RULE_catchClause = 65;
apexParser.RULE_catchType = 66;
apexParser.RULE_finallyBlock = 67;
apexParser.RULE_whenStatements = 68;
apexParser.RULE_whenStatement = 69;
apexParser.RULE_whenExpression = 70;
apexParser.RULE_forControl = 71;
apexParser.RULE_forInit = 72;
apexParser.RULE_enhancedForControl = 73;
apexParser.RULE_forUpdate = 74;
apexParser.RULE_parExpression = 75;
apexParser.RULE_expressionList = 76;
apexParser.RULE_statementExpression = 77;
apexParser.RULE_constantExpression = 78;
apexParser.RULE_apexDbExpressionShort = 79;
apexParser.RULE_apexDbExpression = 80;
apexParser.RULE_expression = 81;
apexParser.RULE_primary = 82;
apexParser.RULE_creator = 83;
apexParser.RULE_createdName = 84;
apexParser.RULE_innerCreator = 85;
apexParser.RULE_arrayCreatorRest = 86;
apexParser.RULE_mapCreatorRest = 87;
apexParser.RULE_setCreatorRest = 88;
apexParser.RULE_classCreatorRest = 89;
apexParser.RULE_explicitGenericInvocation = 90;
apexParser.RULE_nonWildcardTypeArguments = 91;
apexParser.RULE_typeArgumentsOrDiamond = 92;
apexParser.RULE_nonWildcardTypeArgumentsOrDiamond = 93;
apexParser.RULE_superSuffix = 94;
apexParser.RULE_explicitGenericInvocationSuffix = 95;
apexParser.RULE_arguments = 96;
apexParser.RULE_accessor = 97;
apexParser.RULE_soqlLiteral = 98;
apexParser.RULE_query = 99;
apexParser.RULE_selectClause = 100;
apexParser.RULE_fieldList = 101;
apexParser.RULE_selectField = 102;
apexParser.RULE_fromClause = 103;
apexParser.RULE_filterScope = 104;
apexParser.RULE_soqlField = 105;
apexParser.RULE_subquery = 106;
apexParser.RULE_whereClause = 107;
apexParser.RULE_whereField = 108;
apexParser.RULE_limitClause = 109;
apexParser.RULE_orderClause = 110;
apexParser.RULE_bindVariable = 111;
apexParser.RULE_soqlValue = 112;
apexParser.RULE_withClause = 113;
apexParser.RULE_soqlFilteringExpression = 114;
apexParser.RULE_groupClause = 115;
apexParser.RULE_fieldGroupList = 116;
apexParser.RULE_havingConditionExpression = 117;
apexParser.RULE_offsetClause = 118;
apexParser.RULE_viewClause = 119;

function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.typeDeclaration = function() {
    return this.getTypedRuleContext(TypeDeclarationContext,0);
};

CompilationUnitContext.prototype.EOF = function() {
    return this.getToken(apexParser.EOF, 0);
};

CompilationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCompilationUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CompilationUnitContext = CompilationUnitContext;

apexParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, apexParser.RULE_compilationUnit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 240;
        this.typeDeclaration();
        this.state = 241;
        this.match(apexParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeDeclaration;
    return this;
}

TypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclarationContext.prototype.constructor = TypeDeclarationContext;

TypeDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

TypeDeclarationContext.prototype.classOrInterfaceModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
    } else {
        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
    }
};

TypeDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

TypeDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

TypeDeclarationContext.prototype.triggerDeclaration = function() {
    return this.getTypedRuleContext(TriggerDeclarationContext,0);
};

TypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeDeclarationContext = TypeDeclarationContext;

apexParser.prototype.typeDeclaration = function() {

    var localctx = new TypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, apexParser.RULE_typeDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 266;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 246;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (apexParser.PRIVATE - 36)) | (1 << (apexParser.PROTECTED - 36)) | (1 << (apexParser.PUBLIC - 36)) | (1 << (apexParser.STATIC - 36)) | (1 << (apexParser.GLOBAL - 36)) | (1 << (apexParser.WEBSERVICE - 36)) | (1 << (apexParser.APEX_WITH_SHARING - 36)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 36)))) !== 0) || _la===apexParser.TESTMETHOD || _la===apexParser.AT) {
                this.state = 243;
                this.classOrInterfaceModifier();
                this.state = 248;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 249;
            this.classDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 253;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (apexParser.PRIVATE - 36)) | (1 << (apexParser.PROTECTED - 36)) | (1 << (apexParser.PUBLIC - 36)) | (1 << (apexParser.STATIC - 36)) | (1 << (apexParser.GLOBAL - 36)) | (1 << (apexParser.WEBSERVICE - 36)) | (1 << (apexParser.APEX_WITH_SHARING - 36)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 36)))) !== 0) || _la===apexParser.TESTMETHOD || _la===apexParser.AT) {
                this.state = 250;
                this.classOrInterfaceModifier();
                this.state = 255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 256;
            this.enumDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 260;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (apexParser.PRIVATE - 36)) | (1 << (apexParser.PROTECTED - 36)) | (1 << (apexParser.PUBLIC - 36)) | (1 << (apexParser.STATIC - 36)) | (1 << (apexParser.GLOBAL - 36)) | (1 << (apexParser.WEBSERVICE - 36)) | (1 << (apexParser.APEX_WITH_SHARING - 36)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 36)))) !== 0) || _la===apexParser.TESTMETHOD || _la===apexParser.AT) {
                this.state = 257;
                this.classOrInterfaceModifier();
                this.state = 262;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 263;
            this.interfaceDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 264;
            this.triggerDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 265;
            this.match(apexParser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_triggerDeclaration;
    return this;
}

TriggerDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerDeclarationContext.prototype.constructor = TriggerDeclarationContext;

TriggerDeclarationContext.prototype.TRIGGER = function() {
    return this.getToken(apexParser.TRIGGER, 0);
};

TriggerDeclarationContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


TriggerDeclarationContext.prototype.ON = function() {
    return this.getToken(apexParser.ON, 0);
};

TriggerDeclarationContext.prototype.triggerTimings = function() {
    return this.getTypedRuleContext(TriggerTimingsContext,0);
};

TriggerDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TriggerDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTriggerDeclaration(this);
	}
};

TriggerDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTriggerDeclaration(this);
	}
};

TriggerDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTriggerDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TriggerDeclarationContext = TriggerDeclarationContext;

apexParser.prototype.triggerDeclaration = function() {

    var localctx = new TriggerDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, apexParser.RULE_triggerDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 268;
        this.match(apexParser.TRIGGER);
        this.state = 269;
        this.match(apexParser.Identifier);
        this.state = 270;
        this.match(apexParser.ON);
        this.state = 271;
        this.match(apexParser.Identifier);
        this.state = 272;
        this.match(apexParser.LPAREN);
        this.state = 273;
        this.triggerTimings();
        this.state = 274;
        this.match(apexParser.RPAREN);
        this.state = 275;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerTimingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_triggerTimings;
    return this;
}

TriggerTimingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerTimingsContext.prototype.constructor = TriggerTimingsContext;

TriggerTimingsContext.prototype.triggerTiming = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TriggerTimingContext);
    } else {
        return this.getTypedRuleContext(TriggerTimingContext,i);
    }
};

TriggerTimingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTriggerTimings(this);
	}
};

TriggerTimingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTriggerTimings(this);
	}
};

TriggerTimingsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTriggerTimings(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TriggerTimingsContext = TriggerTimingsContext;

apexParser.prototype.triggerTimings = function() {

    var localctx = new TriggerTimingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, apexParser.RULE_triggerTimings);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 277;
        this.triggerTiming();
        this.state = 282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 278;
            this.match(apexParser.COMMA);
            this.state = 279;
            this.triggerTiming();
            this.state = 284;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerTimingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_triggerTiming;
    this.timing = null; // Token
    this.dml = null; // Token
    return this;
}

TriggerTimingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerTimingContext.prototype.constructor = TriggerTimingContext;

TriggerTimingContext.prototype.BEFORE = function() {
    return this.getToken(apexParser.BEFORE, 0);
};

TriggerTimingContext.prototype.AFTER = function() {
    return this.getToken(apexParser.AFTER, 0);
};

TriggerTimingContext.prototype.INSERT = function() {
    return this.getToken(apexParser.INSERT, 0);
};

TriggerTimingContext.prototype.UPDATE = function() {
    return this.getToken(apexParser.UPDATE, 0);
};

TriggerTimingContext.prototype.UPSERT = function() {
    return this.getToken(apexParser.UPSERT, 0);
};

TriggerTimingContext.prototype.DELETE = function() {
    return this.getToken(apexParser.DELETE, 0);
};

TriggerTimingContext.prototype.UNDELETE = function() {
    return this.getToken(apexParser.UNDELETE, 0);
};

TriggerTimingContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTriggerTiming(this);
	}
};

TriggerTimingContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTriggerTiming(this);
	}
};

TriggerTimingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTriggerTiming(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TriggerTimingContext = TriggerTimingContext;

apexParser.prototype.triggerTiming = function() {

    var localctx = new TriggerTimingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, apexParser.RULE_triggerTiming);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 285;
        localctx.timing = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===apexParser.BEFORE || _la===apexParser.AFTER)) {
            localctx.timing = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 286;
        localctx.dml = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (apexParser.INSERT - 88)) | (1 << (apexParser.UPSERT - 88)) | (1 << (apexParser.UPDATE - 88)) | (1 << (apexParser.DELETE - 88)) | (1 << (apexParser.UNDELETE - 88)))) !== 0))) {
            localctx.dml = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_modifier;
    return this;
}

ModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierContext.prototype.constructor = ModifierContext;

ModifierContext.prototype.classOrInterfaceModifier = function() {
    return this.getTypedRuleContext(ClassOrInterfaceModifierContext,0);
};

ModifierContext.prototype.TRANSIENT = function() {
    return this.getToken(apexParser.TRANSIENT, 0);
};

ModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterModifier(this);
	}
};

ModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitModifier(this);
	}
};

ModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ModifierContext = ModifierContext;

apexParser.prototype.modifier = function() {

    var localctx = new ModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, apexParser.RULE_modifier);
    try {
        this.state = 290;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.OVERRIDE:
        case apexParser.VIRTUAL:
        case apexParser.ABSTRACT:
        case apexParser.FINAL:
        case apexParser.PRIVATE:
        case apexParser.PROTECTED:
        case apexParser.PUBLIC:
        case apexParser.STATIC:
        case apexParser.GLOBAL:
        case apexParser.WEBSERVICE:
        case apexParser.APEX_WITH_SHARING:
        case apexParser.APEX_WITHOUT_SHARING:
        case apexParser.TESTMETHOD:
        case apexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 288;
            this.classOrInterfaceModifier();
            break;
        case apexParser.TRANSIENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 289;
            this.match(apexParser.TRANSIENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classOrInterfaceModifier;
    return this;
}

ClassOrInterfaceModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceModifierContext.prototype.constructor = ClassOrInterfaceModifierContext;

ClassOrInterfaceModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ClassOrInterfaceModifierContext.prototype.PUBLIC = function() {
    return this.getToken(apexParser.PUBLIC, 0);
};

ClassOrInterfaceModifierContext.prototype.PROTECTED = function() {
    return this.getToken(apexParser.PROTECTED, 0);
};

ClassOrInterfaceModifierContext.prototype.PRIVATE = function() {
    return this.getToken(apexParser.PRIVATE, 0);
};

ClassOrInterfaceModifierContext.prototype.STATIC = function() {
    return this.getToken(apexParser.STATIC, 0);
};

ClassOrInterfaceModifierContext.prototype.ABSTRACT = function() {
    return this.getToken(apexParser.ABSTRACT, 0);
};

ClassOrInterfaceModifierContext.prototype.FINAL = function() {
    return this.getToken(apexParser.FINAL, 0);
};

ClassOrInterfaceModifierContext.prototype.GLOBAL = function() {
    return this.getToken(apexParser.GLOBAL, 0);
};

ClassOrInterfaceModifierContext.prototype.WEBSERVICE = function() {
    return this.getToken(apexParser.WEBSERVICE, 0);
};

ClassOrInterfaceModifierContext.prototype.OVERRIDE = function() {
    return this.getToken(apexParser.OVERRIDE, 0);
};

ClassOrInterfaceModifierContext.prototype.VIRTUAL = function() {
    return this.getToken(apexParser.VIRTUAL, 0);
};

ClassOrInterfaceModifierContext.prototype.TESTMETHOD = function() {
    return this.getToken(apexParser.TESTMETHOD, 0);
};

ClassOrInterfaceModifierContext.prototype.APEX_WITH_SHARING = function() {
    return this.getToken(apexParser.APEX_WITH_SHARING, 0);
};

ClassOrInterfaceModifierContext.prototype.APEX_WITHOUT_SHARING = function() {
    return this.getToken(apexParser.APEX_WITHOUT_SHARING, 0);
};

ClassOrInterfaceModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassOrInterfaceModifier(this);
	}
};

ClassOrInterfaceModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassOrInterfaceModifier(this);
	}
};

ClassOrInterfaceModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassOrInterfaceModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext;

apexParser.prototype.classOrInterfaceModifier = function() {

    var localctx = new ClassOrInterfaceModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, apexParser.RULE_classOrInterfaceModifier);
    var _la = 0; // Token type
    try {
        this.state = 294;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 292;
            this.annotation();
            break;
        case apexParser.OVERRIDE:
        case apexParser.VIRTUAL:
        case apexParser.ABSTRACT:
        case apexParser.FINAL:
        case apexParser.PRIVATE:
        case apexParser.PROTECTED:
        case apexParser.PUBLIC:
        case apexParser.STATIC:
        case apexParser.GLOBAL:
        case apexParser.WEBSERVICE:
        case apexParser.APEX_WITH_SHARING:
        case apexParser.APEX_WITHOUT_SHARING:
        case apexParser.TESTMETHOD:
            this.enterOuterAlt(localctx, 2);
            this.state = 293;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (apexParser.PRIVATE - 36)) | (1 << (apexParser.PROTECTED - 36)) | (1 << (apexParser.PUBLIC - 36)) | (1 << (apexParser.STATIC - 36)) | (1 << (apexParser.GLOBAL - 36)) | (1 << (apexParser.WEBSERVICE - 36)) | (1 << (apexParser.APEX_WITH_SHARING - 36)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 36)))) !== 0) || _la===apexParser.TESTMETHOD)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableModifier;
    return this;
}

VariableModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableModifierContext.prototype.constructor = VariableModifierContext;

VariableModifierContext.prototype.FINAL = function() {
    return this.getToken(apexParser.FINAL, 0);
};

VariableModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

VariableModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableModifier(this);
	}
};

VariableModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableModifier(this);
	}
};

VariableModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableModifierContext = VariableModifierContext;

apexParser.prototype.variableModifier = function() {

    var localctx = new VariableModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, apexParser.RULE_variableModifier);
    try {
        this.state = 298;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.FINAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 296;
            this.match(apexParser.FINAL);
            break;
        case apexParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 297;
            this.annotation();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.CLASS = function() {
    return this.getToken(apexParser.CLASS, 0);
};

ClassDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ClassDeclarationContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassDeclarationContext.prototype.EXTENDS = function() {
    return this.getToken(apexParser.EXTENDS, 0);
};

ClassDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ClassDeclarationContext.prototype.IMPLEMENTS = function() {
    return this.getToken(apexParser.IMPLEMENTS, 0);
};

ClassDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassDeclarationContext = ClassDeclarationContext;

apexParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, apexParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 300;
        this.match(apexParser.CLASS);
        this.state = 301;
        this.match(apexParser.Identifier);
        this.state = 304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.EXTENDS) {
            this.state = 302;
            this.match(apexParser.EXTENDS);
            this.state = 303;
            this.type();
        }

        this.state = 308;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.IMPLEMENTS) {
            this.state = 306;
            this.match(apexParser.IMPLEMENTS);
            this.state = 307;
            this.typeList();
        }

        this.state = 310;
        this.classBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumDeclaration;
    return this;
}

EnumDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.ENUM = function() {
    return this.getToken(apexParser.ENUM, 0);
};

EnumDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

EnumDeclarationContext.prototype.IMPLEMENTS = function() {
    return this.getToken(apexParser.IMPLEMENTS, 0);
};

EnumDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

EnumDeclarationContext.prototype.enumConstants = function() {
    return this.getTypedRuleContext(EnumConstantsContext,0);
};

EnumDeclarationContext.prototype.enumBodyDeclarations = function() {
    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
};

EnumDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumDeclarationContext = EnumDeclarationContext;

apexParser.prototype.enumDeclaration = function() {

    var localctx = new EnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, apexParser.RULE_enumDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 312;
        this.match(apexParser.ENUM);
        this.state = 313;
        this.match(apexParser.Identifier);
        this.state = 316;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.IMPLEMENTS) {
            this.state = 314;
            this.match(apexParser.IMPLEMENTS);
            this.state = 315;
            this.typeList();
        }

        this.state = 318;
        this.match(apexParser.LBRACE);
        this.state = 320;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 319;
            this.enumConstants();
        }

        this.state = 323;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.COMMA) {
            this.state = 322;
            this.match(apexParser.COMMA);
        }

        this.state = 326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.SEMI) {
            this.state = 325;
            this.enumBodyDeclarations();
        }

        this.state = 328;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumConstants;
    return this;
}

EnumConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantsContext.prototype.constructor = EnumConstantsContext;

EnumConstantsContext.prototype.enumConstant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumConstantContext);
    } else {
        return this.getTypedRuleContext(EnumConstantContext,i);
    }
};

EnumConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumConstants(this);
	}
};

EnumConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumConstants(this);
	}
};

EnumConstantsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumConstants(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumConstantsContext = EnumConstantsContext;

apexParser.prototype.enumConstants = function() {

    var localctx = new EnumConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, apexParser.RULE_enumConstants);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 330;
        this.enumConstant();
        this.state = 335;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 331;
                this.match(apexParser.COMMA);
                this.state = 332;
                this.enumConstant(); 
            }
            this.state = 337;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumConstant;
    return this;
}

EnumConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantContext.prototype.constructor = EnumConstantContext;

EnumConstantContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

EnumConstantContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

EnumConstantContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

EnumConstantContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

EnumConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumConstant(this);
	}
};

EnumConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumConstant(this);
	}
};

EnumConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumConstantContext = EnumConstantContext;

apexParser.prototype.enumConstant = function() {

    var localctx = new EnumConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, apexParser.RULE_enumConstant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.AT) {
            this.state = 338;
            this.annotation();
            this.state = 343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 344;
        this.match(apexParser.Identifier);
        this.state = 346;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LPAREN) {
            this.state = 345;
            this.arguments();
        }

        this.state = 349;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LBRACE) {
            this.state = 348;
            this.classBody();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumBodyDeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumBodyDeclarations;
    return this;
}

EnumBodyDeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumBodyDeclarationsContext.prototype.constructor = EnumBodyDeclarationsContext;

EnumBodyDeclarationsContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

EnumBodyDeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumBodyDeclarations(this);
	}
};

EnumBodyDeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumBodyDeclarations(this);
	}
};

EnumBodyDeclarationsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumBodyDeclarations(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext;

apexParser.prototype.enumBodyDeclarations = function() {

    var localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, apexParser.RULE_enumBodyDeclarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this.match(apexParser.SEMI);
        this.state = 355;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.TRANSIENT - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (apexParser.TESTMETHOD - 93)) | (1 << (apexParser.LBRACE - 93)) | (1 << (apexParser.SEMI - 93)))) !== 0) || ((((_la - 147)) & ~0x1f) == 0 && ((1 << (_la - 147)) & ((1 << (apexParser.Identifier - 147)) | (1 << (apexParser.AT - 147)) | (1 << (apexParser.LINE_COMMENT - 147)))) !== 0)) {
            this.state = 352;
            this.classBodyDeclaration();
            this.state = 357;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceDeclaration;
    return this;
}

InterfaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDeclarationContext.prototype.constructor = InterfaceDeclarationContext;

InterfaceDeclarationContext.prototype.INTERFACE = function() {
    return this.getToken(apexParser.INTERFACE, 0);
};

InterfaceDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

InterfaceDeclarationContext.prototype.interfaceBody = function() {
    return this.getTypedRuleContext(InterfaceBodyContext,0);
};

InterfaceDeclarationContext.prototype.EXTENDS = function() {
    return this.getToken(apexParser.EXTENDS, 0);
};

InterfaceDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

InterfaceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceDeclaration(this);
	}
};

InterfaceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceDeclaration(this);
	}
};

InterfaceDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceDeclarationContext = InterfaceDeclarationContext;

apexParser.prototype.interfaceDeclaration = function() {

    var localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, apexParser.RULE_interfaceDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.match(apexParser.INTERFACE);
        this.state = 359;
        this.match(apexParser.Identifier);
        this.state = 362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.EXTENDS) {
            this.state = 360;
            this.match(apexParser.EXTENDS);
            this.state = 361;
            this.typeList();
        }

        this.state = 364;
        this.interfaceBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeList;
    return this;
}

TypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeListContext.prototype.constructor = TypeListContext;

TypeListContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeList(this);
	}
};

TypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeList(this);
	}
};

TypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeListContext = TypeListContext;

apexParser.prototype.typeList = function() {

    var localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, apexParser.RULE_typeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this.type();
        this.state = 371;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 367;
            this.match(apexParser.COMMA);
            this.state = 368;
            this.type();
            this.state = 373;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassBody(this);
	}
};

ClassBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassBodyContext = ClassBodyContext;

apexParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, apexParser.RULE_classBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 374;
        this.match(apexParser.LBRACE);
        this.state = 378;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.TRANSIENT - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (apexParser.TESTMETHOD - 93)) | (1 << (apexParser.LBRACE - 93)) | (1 << (apexParser.SEMI - 93)))) !== 0) || ((((_la - 147)) & ~0x1f) == 0 && ((1 << (_la - 147)) & ((1 << (apexParser.Identifier - 147)) | (1 << (apexParser.AT - 147)) | (1 << (apexParser.LINE_COMMENT - 147)))) !== 0)) {
            this.state = 375;
            this.classBodyDeclaration();
            this.state = 380;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 381;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceBody;
    return this;
}

InterfaceBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyContext.prototype.constructor = InterfaceBodyContext;

InterfaceBodyContext.prototype.interfaceBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(InterfaceBodyDeclarationContext,i);
    }
};

InterfaceBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceBody(this);
	}
};

InterfaceBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceBody(this);
	}
};

InterfaceBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceBodyContext = InterfaceBodyContext;

apexParser.prototype.interfaceBody = function() {

    var localctx = new InterfaceBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, apexParser.RULE_interfaceBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 383;
        this.match(apexParser.LBRACE);
        this.state = 387;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.TRANSIENT - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)))) !== 0) || _la===apexParser.TESTMETHOD || _la===apexParser.SEMI || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 384;
            this.interfaceBodyDeclaration();
            this.state = 389;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 390;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classBodyDeclaration;
    return this;
}

ClassBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyDeclarationContext.prototype.constructor = ClassBodyDeclarationContext;

ClassBodyDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ClassBodyDeclarationContext.prototype.STATIC = function() {
    return this.getToken(apexParser.STATIC, 0);
};

ClassBodyDeclarationContext.prototype.memberDeclaration = function() {
    return this.getTypedRuleContext(MemberDeclarationContext,0);
};

ClassBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

ClassBodyDeclarationContext.prototype.LINE_COMMENT = function() {
    return this.getToken(apexParser.LINE_COMMENT, 0);
};

ClassBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassBodyDeclaration(this);
	}
};

ClassBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassBodyDeclaration(this);
	}
};

ClassBodyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassBodyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext;

apexParser.prototype.classBodyDeclaration = function() {

    var localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, apexParser.RULE_classBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 405;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 392;
            this.match(apexParser.SEMI);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 394;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.STATIC) {
                this.state = 393;
                this.match(apexParser.STATIC);
            }

            this.state = 396;
            this.block();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 400;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 397;
                    this.modifier(); 
                }
                this.state = 402;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
            }

            this.state = 403;
            this.memberDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 404;
            this.match(apexParser.LINE_COMMENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_memberDeclaration;
    return this;
}

MemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberDeclarationContext.prototype.constructor = MemberDeclarationContext;

MemberDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

MemberDeclarationContext.prototype.fieldDeclaration = function() {
    return this.getTypedRuleContext(FieldDeclarationContext,0);
};

MemberDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

MemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

MemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

MemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

MemberDeclarationContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

MemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMemberDeclaration(this);
	}
};

MemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMemberDeclaration(this);
	}
};

MemberDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMemberDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MemberDeclarationContext = MemberDeclarationContext;

apexParser.prototype.memberDeclaration = function() {

    var localctx = new MemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, apexParser.RULE_memberDeclaration);
    try {
        this.state = 414;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 407;
            this.methodDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 408;
            this.fieldDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 409;
            this.constructorDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 410;
            this.interfaceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 411;
            this.classDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 412;
            this.enumDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 413;
            this.propertyDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

MethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

MethodDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

MethodDeclarationContext.prototype.VOID = function() {
    return this.getToken(apexParser.VOID, 0);
};

MethodDeclarationContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

MethodDeclarationContext.prototype.OVERRIDE = function() {
    return this.getToken(apexParser.OVERRIDE, 0);
};

MethodDeclarationContext.prototype.THROWS = function() {
    return this.getToken(apexParser.THROWS, 0);
};

MethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MethodDeclarationContext = MethodDeclarationContext;

apexParser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, apexParser.RULE_methodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.OVERRIDE) {
            this.state = 416;
            this.match(apexParser.OVERRIDE);
        }

        this.state = 421;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.state = 419;
            this.type();
            break;
        case apexParser.VOID:
            this.state = 420;
            this.match(apexParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 423;
        this.match(apexParser.Identifier);
        this.state = 424;
        this.formalParameters();
        this.state = 429;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 425;
            this.match(apexParser.LBRACK);
            this.state = 426;
            this.match(apexParser.RBRACK);
            this.state = 431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 434;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.THROWS) {
            this.state = 432;
            this.match(apexParser.THROWS);
            this.state = 433;
            this.qualifiedNameList();
        }

        this.state = 438;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LBRACE:
            this.state = 436;
            this.methodBody();
            break;
        case apexParser.SEMI:
            this.state = 437;
            this.match(apexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constructorDeclaration;
    return this;
}

ConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDeclarationContext.prototype.constructor = ConstructorDeclarationContext;

ConstructorDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ConstructorDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

ConstructorDeclarationContext.prototype.constructorBody = function() {
    return this.getTypedRuleContext(ConstructorBodyContext,0);
};

ConstructorDeclarationContext.prototype.THROWS = function() {
    return this.getToken(apexParser.THROWS, 0);
};

ConstructorDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

ConstructorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstructorDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstructorDeclarationContext = ConstructorDeclarationContext;

apexParser.prototype.constructorDeclaration = function() {

    var localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, apexParser.RULE_constructorDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.match(apexParser.Identifier);
        this.state = 441;
        this.formalParameters();
        this.state = 444;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.THROWS) {
            this.state = 442;
            this.match(apexParser.THROWS);
            this.state = 443;
            this.qualifiedNameList();
        }

        this.state = 446;
        this.constructorBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_fieldDeclaration;
    return this;
}

FieldDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclarationContext.prototype.constructor = FieldDeclarationContext;

FieldDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FieldDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

FieldDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFieldDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FieldDeclarationContext = FieldDeclarationContext;

apexParser.prototype.fieldDeclaration = function() {

    var localctx = new FieldDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, apexParser.RULE_fieldDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 448;
        this.type();
        this.state = 449;
        this.variableDeclarators();
        this.state = 450;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_propertyDeclaration;
    return this;
}

PropertyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeclarationContext.prototype.constructor = PropertyDeclarationContext;

PropertyDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PropertyDeclarationContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

PropertyDeclarationContext.prototype.propertyBodyDeclaration = function() {
    return this.getTypedRuleContext(PropertyBodyDeclarationContext,0);
};

PropertyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPropertyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PropertyDeclarationContext = PropertyDeclarationContext;

apexParser.prototype.propertyDeclaration = function() {

    var localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, apexParser.RULE_propertyDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 452;
        this.type();
        this.state = 453;
        this.variableDeclaratorId();
        this.state = 454;
        this.propertyBodyDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_propertyBodyDeclaration;
    return this;
}

PropertyBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBodyDeclarationContext.prototype.constructor = PropertyBodyDeclarationContext;

PropertyBodyDeclarationContext.prototype.propertyBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyBlockContext);
    } else {
        return this.getTypedRuleContext(PropertyBlockContext,i);
    }
};

PropertyBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPropertyBodyDeclaration(this);
	}
};

PropertyBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPropertyBodyDeclaration(this);
	}
};

PropertyBodyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPropertyBodyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PropertyBodyDeclarationContext = PropertyBodyDeclarationContext;

apexParser.prototype.propertyBodyDeclaration = function() {

    var localctx = new PropertyBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, apexParser.RULE_propertyBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 456;
        this.match(apexParser.LBRACE);
        this.state = 457;
        this.propertyBlock();
        this.state = 459;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.GET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (apexParser.PRIVATE - 36)) | (1 << (apexParser.PROTECTED - 36)) | (1 << (apexParser.PUBLIC - 36)) | (1 << (apexParser.STATIC - 36)) | (1 << (apexParser.TRANSIENT - 36)) | (1 << (apexParser.GLOBAL - 36)) | (1 << (apexParser.WEBSERVICE - 36)) | (1 << (apexParser.APEX_WITH_SHARING - 36)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 36)))) !== 0) || _la===apexParser.TESTMETHOD || _la===apexParser.AT) {
            this.state = 458;
            this.propertyBlock();
        }

        this.state = 461;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceBodyDeclaration;
    return this;
}

InterfaceBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyDeclarationContext.prototype.constructor = InterfaceBodyDeclarationContext;

InterfaceBodyDeclarationContext.prototype.interfaceMemberDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMemberDeclarationContext,0);
};

InterfaceBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

InterfaceBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceBodyDeclaration(this);
	}
};

InterfaceBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceBodyDeclaration(this);
	}
};

InterfaceBodyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceBodyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceBodyDeclarationContext = InterfaceBodyDeclarationContext;

apexParser.prototype.interfaceBodyDeclaration = function() {

    var localctx = new InterfaceBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, apexParser.RULE_interfaceBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 471;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.OVERRIDE:
        case apexParser.VIRTUAL:
        case apexParser.SET:
        case apexParser.ABSTRACT:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.CLASS:
        case apexParser.DOUBLE:
        case apexParser.ENUM:
        case apexParser.FINAL:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.INTERFACE:
        case apexParser.LONG:
        case apexParser.PRIVATE:
        case apexParser.PROTECTED:
        case apexParser.PUBLIC:
        case apexParser.SHORT:
        case apexParser.STATIC:
        case apexParser.TRANSIENT:
        case apexParser.VOID:
        case apexParser.GLOBAL:
        case apexParser.WEBSERVICE:
        case apexParser.APEX_WITH_SHARING:
        case apexParser.APEX_WITHOUT_SHARING:
        case apexParser.TESTMETHOD:
        case apexParser.Identifier:
        case apexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (apexParser.PRIVATE - 36)) | (1 << (apexParser.PROTECTED - 36)) | (1 << (apexParser.PUBLIC - 36)) | (1 << (apexParser.STATIC - 36)) | (1 << (apexParser.TRANSIENT - 36)) | (1 << (apexParser.GLOBAL - 36)) | (1 << (apexParser.WEBSERVICE - 36)) | (1 << (apexParser.APEX_WITH_SHARING - 36)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 36)))) !== 0) || _la===apexParser.TESTMETHOD || _la===apexParser.AT) {
                this.state = 463;
                this.modifier();
                this.state = 468;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 469;
            this.interfaceMemberDeclaration();
            break;
        case apexParser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 470;
            this.match(apexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceMemberDeclaration;
    return this;
}

InterfaceMemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMemberDeclarationContext.prototype.constructor = InterfaceMemberDeclarationContext;

InterfaceMemberDeclarationContext.prototype.constDeclaration = function() {
    return this.getTypedRuleContext(ConstDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceMemberDeclaration(this);
	}
};

InterfaceMemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceMemberDeclaration(this);
	}
};

InterfaceMemberDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceMemberDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext;

apexParser.prototype.interfaceMemberDeclaration = function() {

    var localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, apexParser.RULE_interfaceMemberDeclaration);
    try {
        this.state = 478;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 473;
            this.constDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 474;
            this.interfaceMethodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 475;
            this.interfaceDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 476;
            this.classDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 477;
            this.enumDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constDeclaration;
    return this;
}

ConstDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstDeclarationContext.prototype.constructor = ConstDeclarationContext;

ConstDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ConstDeclarationContext.prototype.constantDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantDeclaratorContext);
    } else {
        return this.getTypedRuleContext(ConstantDeclaratorContext,i);
    }
};

ConstDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstDeclaration(this);
	}
};

ConstDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstDeclaration(this);
	}
};

ConstDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstDeclarationContext = ConstDeclarationContext;

apexParser.prototype.constDeclaration = function() {

    var localctx = new ConstDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, apexParser.RULE_constDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480;
        this.type();
        this.state = 481;
        this.constantDeclarator();
        this.state = 486;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 482;
            this.match(apexParser.COMMA);
            this.state = 483;
            this.constantDeclarator();
            this.state = 488;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 489;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constantDeclarator;
    return this;
}

ConstantDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDeclaratorContext.prototype.constructor = ConstantDeclaratorContext;

ConstantDeclaratorContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ConstantDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

ConstantDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstantDeclarator(this);
	}
};

ConstantDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstantDeclarator(this);
	}
};

ConstantDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstantDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstantDeclaratorContext = ConstantDeclaratorContext;

apexParser.prototype.constantDeclarator = function() {

    var localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, apexParser.RULE_constantDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 491;
        this.match(apexParser.Identifier);
        this.state = 496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 492;
            this.match(apexParser.LBRACK);
            this.state = 493;
            this.match(apexParser.RBRACK);
            this.state = 498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 499;
        this.match(apexParser.ASSIGN);
        this.state = 500;
        this.variableInitializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_interfaceMethodDeclaration;
    return this;
}

InterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodDeclarationContext.prototype.constructor = InterfaceMethodDeclarationContext;

InterfaceMethodDeclarationContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

InterfaceMethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

InterfaceMethodDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

InterfaceMethodDeclarationContext.prototype.VOID = function() {
    return this.getToken(apexParser.VOID, 0);
};

InterfaceMethodDeclarationContext.prototype.THROWS = function() {
    return this.getToken(apexParser.THROWS, 0);
};

InterfaceMethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

InterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInterfaceMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;

apexParser.prototype.interfaceMethodDeclaration = function() {

    var localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, apexParser.RULE_interfaceMethodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 504;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.state = 502;
            this.type();
            break;
        case apexParser.VOID:
            this.state = 503;
            this.match(apexParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 506;
        this.match(apexParser.Identifier);
        this.state = 507;
        this.formalParameters();
        this.state = 512;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 508;
            this.match(apexParser.LBRACK);
            this.state = 509;
            this.match(apexParser.RBRACK);
            this.state = 514;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 517;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.THROWS) {
            this.state = 515;
            this.match(apexParser.THROWS);
            this.state = 516;
            this.qualifiedNameList();
        }

        this.state = 519;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableDeclarators;
    return this;
}

VariableDeclaratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorsContext.prototype.constructor = VariableDeclaratorsContext;

VariableDeclaratorsContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableDeclarators(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableDeclaratorsContext = VariableDeclaratorsContext;

apexParser.prototype.variableDeclarators = function() {

    var localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, apexParser.RULE_variableDeclarators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 521;
        this.variableDeclarator();
        this.state = 526;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 522;
            this.match(apexParser.COMMA);
            this.state = 523;
            this.variableDeclarator();
            this.state = 528;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

VariableDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

VariableDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableDeclaratorContext = VariableDeclaratorContext;

apexParser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, apexParser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 529;
        this.variableDeclaratorId();
        this.state = 532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.ASSIGN) {
            this.state = 530;
            this.match(apexParser.ASSIGN);
            this.state = 531;
            this.variableInitializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableDeclaratorId;
    return this;
}

VariableDeclaratorIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorIdContext.prototype.constructor = VariableDeclaratorIdContext;

VariableDeclaratorIdContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

VariableDeclaratorIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableDeclaratorId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext;

apexParser.prototype.variableDeclaratorId = function() {

    var localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, apexParser.RULE_variableDeclaratorId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 534;
        this.match(apexParser.Identifier);
        this.state = 539;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.LBRACK) {
            this.state = 535;
            this.match(apexParser.LBRACK);
            this.state = 536;
            this.match(apexParser.RBRACK);
            this.state = 541;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_variableInitializer;
    return this;
}

VariableInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerContext.prototype.constructor = VariableInitializerContext;

VariableInitializerContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

VariableInitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitVariableInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.VariableInitializerContext = VariableInitializerContext;

apexParser.prototype.variableInitializer = function() {

    var localctx = new VariableInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, apexParser.RULE_variableInitializer);
    try {
        this.state = 544;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 542;
            this.arrayInitializer();
            break;
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.NEW:
        case apexParser.SHORT:
        case apexParser.SUPER:
        case apexParser.THIS:
        case apexParser.VOID:
        case apexParser.IntegerLiteral:
        case apexParser.FloatingPointLiteral:
        case apexParser.BooleanLiteral:
        case apexParser.StringLiteral:
        case apexParser.NullLiteral:
        case apexParser.LPAREN:
        case apexParser.LBRACK:
        case apexParser.LT:
        case apexParser.BANG:
        case apexParser.INC:
        case apexParser.DEC:
        case apexParser.ADD:
        case apexParser.SUB:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 543;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.variableInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
        return this.getTypedRuleContext(VariableInitializerContext,i);
    }
};

ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ArrayInitializerContext = ArrayInitializerContext;

apexParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, apexParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        this.match(apexParser.LBRACE);
        this.state = 558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (apexParser.IntegerLiteral - 98)) | (1 << (apexParser.FloatingPointLiteral - 98)) | (1 << (apexParser.BooleanLiteral - 98)) | (1 << (apexParser.StringLiteral - 98)) | (1 << (apexParser.NullLiteral - 98)) | (1 << (apexParser.LPAREN - 98)) | (1 << (apexParser.LBRACE - 98)) | (1 << (apexParser.LBRACK - 98)) | (1 << (apexParser.LT - 98)) | (1 << (apexParser.BANG - 98)) | (1 << (apexParser.INC - 98)) | (1 << (apexParser.DEC - 98)) | (1 << (apexParser.ADD - 98)) | (1 << (apexParser.SUB - 98)))) !== 0) || _la===apexParser.Identifier) {
            this.state = 547;
            this.variableInitializer();
            this.state = 552;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 548;
                    this.match(apexParser.COMMA);
                    this.state = 549;
                    this.variableInitializer(); 
                }
                this.state = 554;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
            }

            this.state = 556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.COMMA) {
                this.state = 555;
                this.match(apexParser.COMMA);
            }

        }

        this.state = 560;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enumConstantName;
    return this;
}

EnumConstantNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantNameContext.prototype.constructor = EnumConstantNameContext;

EnumConstantNameContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

EnumConstantNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnumConstantName(this);
	}
};

EnumConstantNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnumConstantName(this);
	}
};

EnumConstantNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnumConstantName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnumConstantNameContext = EnumConstantNameContext;

apexParser.prototype.enumConstantName = function() {

    var localctx = new EnumConstantNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, apexParser.RULE_enumConstantName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this.match(apexParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

TypeContext.prototype.typedArray = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypedArrayContext);
    } else {
        return this.getTypedRuleContext(TypedArrayContext,i);
    }
};

TypeContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitType(this);
	}
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeContext = TypeContext;

apexParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, apexParser.RULE_type);
    try {
        this.state = 578;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 564;
            this.classOrInterfaceType();
            this.state = 568;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 565;
                    this.typedArray(); 
                }
                this.state = 570;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
            }

            break;
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 571;
            this.primitiveType();
            this.state = 575;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 572;
                    this.typedArray(); 
                }
                this.state = 577;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typedArray;
    return this;
}

TypedArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedArrayContext.prototype.constructor = TypedArrayContext;


TypedArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypedArray(this);
	}
};

TypedArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypedArray(this);
	}
};

TypedArrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypedArray(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypedArrayContext = TypedArrayContext;

apexParser.prototype.typedArray = function() {

    var localctx = new TypedArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, apexParser.RULE_typedArray);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this.match(apexParser.LBRACK);
        this.state = 581;
        this.match(apexParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classOrInterfaceType;
    return this;
}

ClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceTypeContext.prototype.constructor = ClassOrInterfaceTypeContext;

ClassOrInterfaceTypeContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


ClassOrInterfaceTypeContext.prototype.typeArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsContext,i);
    }
};

ClassOrInterfaceTypeContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

ClassOrInterfaceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassOrInterfaceType(this);
	}
};

ClassOrInterfaceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassOrInterfaceType(this);
	}
};

ClassOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext;

apexParser.prototype.classOrInterfaceType = function() {

    var localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, apexParser.RULE_classOrInterfaceType);
    try {
        this.state = 599;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 583;
            this.match(apexParser.Identifier);
            this.state = 585;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
            if(la_===1) {
                this.state = 584;
                this.typeArguments();

            }
            this.state = 594;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 587;
                    this.match(apexParser.DOT);
                    this.state = 588;
                    this.match(apexParser.Identifier);
                    this.state = 590;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
                    if(la_===1) {
                        this.state = 589;
                        this.typeArguments();

                    } 
                }
                this.state = 596;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
            }

            break;
        case apexParser.SET:
            this.enterOuterAlt(localctx, 2);
            this.state = 597;
            this.match(apexParser.SET);
            this.state = 598;
            this.typeArguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimitiveTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_primitiveType;
    return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;

PrimitiveTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(apexParser.BOOLEAN, 0);
};

PrimitiveTypeContext.prototype.CHAR = function() {
    return this.getToken(apexParser.CHAR, 0);
};

PrimitiveTypeContext.prototype.BYTE = function() {
    return this.getToken(apexParser.BYTE, 0);
};

PrimitiveTypeContext.prototype.SHORT = function() {
    return this.getToken(apexParser.SHORT, 0);
};

PrimitiveTypeContext.prototype.INT = function() {
    return this.getToken(apexParser.INT, 0);
};

PrimitiveTypeContext.prototype.LONG = function() {
    return this.getToken(apexParser.LONG, 0);
};

PrimitiveTypeContext.prototype.FLOAT = function() {
    return this.getToken(apexParser.FLOAT, 0);
};

PrimitiveTypeContext.prototype.DOUBLE = function() {
    return this.getToken(apexParser.DOUBLE, 0);
};

PrimitiveTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPrimitiveType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PrimitiveTypeContext = PrimitiveTypeContext;

apexParser.prototype.primitiveType = function() {

    var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, apexParser.RULE_primitiveType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 601;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || _la===apexParser.LONG || _la===apexParser.SHORT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.typeArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentContext,i);
    }
};

TypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeArgumentsContext = TypeArgumentsContext;

apexParser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, apexParser.RULE_typeArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 603;
        this.match(apexParser.LT);
        this.state = 604;
        this.typeArgument();
        this.state = 609;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 605;
            this.match(apexParser.COMMA);
            this.state = 606;
            this.typeArgument();
            this.state = 611;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 612;
        this.match(apexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeArgument;
    return this;
}

TypeArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentContext.prototype.constructor = TypeArgumentContext;

TypeArgumentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeArgumentContext.prototype.EXTENDS = function() {
    return this.getToken(apexParser.EXTENDS, 0);
};

TypeArgumentContext.prototype.SUPER = function() {
    return this.getToken(apexParser.SUPER, 0);
};

TypeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeArgument(this);
	}
};

TypeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeArgument(this);
	}
};

TypeArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeArgumentContext = TypeArgumentContext;

apexParser.prototype.typeArgument = function() {

    var localctx = new TypeArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, apexParser.RULE_typeArgument);
    var _la = 0; // Token type
    try {
        this.state = 620;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 614;
            this.type();
            break;
        case apexParser.QUESTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 615;
            this.match(apexParser.QUESTION);
            this.state = 618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.EXTENDS || _la===apexParser.SUPER) {
                this.state = 616;
                _la = this._input.LA(1);
                if(!(_la===apexParser.EXTENDS || _la===apexParser.SUPER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 617;
                this.type();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_qualifiedNameList;
    return this;
}

QualifiedNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameListContext.prototype.constructor = QualifiedNameListContext;

QualifiedNameListContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

QualifiedNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterQualifiedNameList(this);
	}
};

QualifiedNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitQualifiedNameList(this);
	}
};

QualifiedNameListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitQualifiedNameList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.QualifiedNameListContext = QualifiedNameListContext;

apexParser.prototype.qualifiedNameList = function() {

    var localctx = new QualifiedNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, apexParser.RULE_qualifiedNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 622;
        this.qualifiedName();
        this.state = 627;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 623;
            this.match(apexParser.COMMA);
            this.state = 624;
            this.qualifiedName();
            this.state = 629;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFormalParameters(this);
	}
};

FormalParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFormalParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FormalParametersContext = FormalParametersContext;

apexParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, apexParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this.match(apexParser.LPAREN);
        this.state = 632;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || _la===apexParser.LONG || _la===apexParser.SHORT || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 631;
            this.formalParameterList();
        }

        this.state = 634;
        this.match(apexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.lastFormalParameter = function() {
    return this.getTypedRuleContext(LastFormalParameterContext,0);
};

FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFormalParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FormalParameterListContext = FormalParameterListContext;

apexParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, apexParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.state = 649;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 636;
            this.formalParameter();
            this.state = 641;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 637;
                    this.match(apexParser.COMMA);
                    this.state = 638;
                    this.formalParameter(); 
                }
                this.state = 643;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
            }

            this.state = 646;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.COMMA) {
                this.state = 644;
                this.match(apexParser.COMMA);
                this.state = 645;
                this.lastFormalParameter();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 648;
            this.lastFormalParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

FormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFormalParameter(this);
	}
};

FormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FormalParameterContext = FormalParameterContext;

apexParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, apexParser.RULE_formalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 654;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 651;
            this.variableModifier();
            this.state = 656;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 657;
        this.type();
        this.state = 658;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LastFormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_lastFormalParameter;
    return this;
}

LastFormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterContext.prototype.constructor = LastFormalParameterContext;

LastFormalParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LastFormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

LastFormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LastFormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLastFormalParameter(this);
	}
};

LastFormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLastFormalParameter(this);
	}
};

LastFormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLastFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LastFormalParameterContext = LastFormalParameterContext;

apexParser.prototype.lastFormalParameter = function() {

    var localctx = new LastFormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, apexParser.RULE_lastFormalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 663;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 660;
            this.variableModifier();
            this.state = 665;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 666;
        this.type();
        this.state = 667;
        this.match(apexParser.ELLIPSIS);
        this.state = 668;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_methodBody;
    return this;
}

MethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodBodyContext.prototype.constructor = MethodBodyContext;

MethodBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

MethodBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMethodBody(this);
	}
};

MethodBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMethodBody(this);
	}
};

MethodBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMethodBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MethodBodyContext = MethodBodyContext;

apexParser.prototype.methodBody = function() {

    var localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, apexParser.RULE_methodBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constructorBody;
    return this;
}

ConstructorBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorBodyContext.prototype.constructor = ConstructorBodyContext;

ConstructorBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ConstructorBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstructorBody(this);
	}
};

ConstructorBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstructorBody(this);
	}
};

ConstructorBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstructorBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstructorBodyContext = ConstructorBodyContext;

apexParser.prototype.constructorBody = function() {

    var localctx = new ConstructorBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, apexParser.RULE_constructorBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 672;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitQualifiedName(this);
	}
};

QualifiedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitQualifiedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.QualifiedNameContext = QualifiedNameContext;

apexParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, apexParser.RULE_qualifiedName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 674;
        this.match(apexParser.Identifier);
        this.state = 679;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.DOT) {
            this.state = 675;
            this.match(apexParser.DOT);
            this.state = 676;
            this.match(apexParser.Identifier);
            this.state = 681;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.IntegerLiteral = function() {
    return this.getToken(apexParser.IntegerLiteral, 0);
};

LiteralContext.prototype.FloatingPointLiteral = function() {
    return this.getToken(apexParser.FloatingPointLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(apexParser.StringLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(apexParser.BooleanLiteral, 0);
};

LiteralContext.prototype.NullLiteral = function() {
    return this.getToken(apexParser.NullLiteral, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LiteralContext = LiteralContext;

apexParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, apexParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 682;
        _la = this._input.LA(1);
        if(!(((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (apexParser.IntegerLiteral - 98)) | (1 << (apexParser.FloatingPointLiteral - 98)) | (1 << (apexParser.BooleanLiteral - 98)) | (1 << (apexParser.StringLiteral - 98)) | (1 << (apexParser.NullLiteral - 98)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.annotationName = function() {
    return this.getTypedRuleContext(AnnotationNameContext,0);
};

AnnotationContext.prototype.elementValuePairs = function() {
    return this.getTypedRuleContext(ElementValuePairsContext,0);
};

AnnotationContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotation(this);
	}
};

AnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationContext = AnnotationContext;

apexParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, apexParser.RULE_annotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;
        this.match(apexParser.AT);
        this.state = 685;
        this.annotationName();
        this.state = 692;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LPAREN) {
            this.state = 686;
            this.match(apexParser.LPAREN);
            this.state = 689;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
            if(la_===1) {
                this.state = 687;
                this.elementValuePairs();

            } else if(la_===2) {
                this.state = 688;
                this.elementValue();

            }
            this.state = 691;
            this.match(apexParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_annotationName;
    return this;
}

AnnotationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationNameContext.prototype.constructor = AnnotationNameContext;

AnnotationNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AnnotationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAnnotationName(this);
	}
};

AnnotationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAnnotationName(this);
	}
};

AnnotationNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAnnotationName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AnnotationNameContext = AnnotationNameContext;

apexParser.prototype.annotationName = function() {

    var localctx = new AnnotationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, apexParser.RULE_annotationName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 694;
        this.qualifiedName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValuePairs;
    return this;
}

ElementValuePairsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairsContext.prototype.constructor = ElementValuePairsContext;

ElementValuePairsContext.prototype.elementValuePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValuePairContext);
    } else {
        return this.getTypedRuleContext(ElementValuePairContext,i);
    }
};

ElementValuePairsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValuePairs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValuePairsContext = ElementValuePairsContext;

apexParser.prototype.elementValuePairs = function() {

    var localctx = new ElementValuePairsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, apexParser.RULE_elementValuePairs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 696;
        this.elementValuePair();
        this.state = 701;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 697;
            this.match(apexParser.COMMA);
            this.state = 698;
            this.elementValuePair();
            this.state = 703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValuePair;
    return this;
}

ElementValuePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairContext.prototype.constructor = ElementValuePairContext;

ElementValuePairContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ElementValuePairContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

ElementValuePairContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValuePair(this);
	}
};

ElementValuePairContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValuePair(this);
	}
};

ElementValuePairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValuePair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValuePairContext = ElementValuePairContext;

apexParser.prototype.elementValuePair = function() {

    var localctx = new ElementValuePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, apexParser.RULE_elementValuePair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.match(apexParser.Identifier);
        this.state = 705;
        this.match(apexParser.ASSIGN);
        this.state = 706;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValue;
    return this;
}

ElementValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueContext.prototype.constructor = ElementValueContext;

ElementValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementValueContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ElementValueContext.prototype.elementValueArrayInitializer = function() {
    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
};

ElementValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValue(this);
	}
};

ElementValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValue(this);
	}
};

ElementValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValueContext = ElementValueContext;

apexParser.prototype.elementValue = function() {

    var localctx = new ElementValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, apexParser.RULE_elementValue);
    try {
        this.state = 711;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.NEW:
        case apexParser.SHORT:
        case apexParser.SUPER:
        case apexParser.THIS:
        case apexParser.VOID:
        case apexParser.IntegerLiteral:
        case apexParser.FloatingPointLiteral:
        case apexParser.BooleanLiteral:
        case apexParser.StringLiteral:
        case apexParser.NullLiteral:
        case apexParser.LPAREN:
        case apexParser.LBRACK:
        case apexParser.LT:
        case apexParser.BANG:
        case apexParser.INC:
        case apexParser.DEC:
        case apexParser.ADD:
        case apexParser.SUB:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 708;
            this.expression(0);
            break;
        case apexParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 709;
            this.annotation();
            break;
        case apexParser.LBRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 710;
            this.elementValueArrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_elementValueArrayInitializer;
    return this;
}

ElementValueArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueArrayInitializerContext.prototype.constructor = ElementValueArrayInitializerContext;

ElementValueArrayInitializerContext.prototype.elementValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValueContext);
    } else {
        return this.getTypedRuleContext(ElementValueContext,i);
    }
};

ElementValueArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitElementValueArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;

apexParser.prototype.elementValueArrayInitializer = function() {

    var localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, apexParser.RULE_elementValueArrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.match(apexParser.LBRACE);
        this.state = 722;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (apexParser.IntegerLiteral - 98)) | (1 << (apexParser.FloatingPointLiteral - 98)) | (1 << (apexParser.BooleanLiteral - 98)) | (1 << (apexParser.StringLiteral - 98)) | (1 << (apexParser.NullLiteral - 98)) | (1 << (apexParser.LPAREN - 98)) | (1 << (apexParser.LBRACE - 98)) | (1 << (apexParser.LBRACK - 98)) | (1 << (apexParser.LT - 98)) | (1 << (apexParser.BANG - 98)) | (1 << (apexParser.INC - 98)) | (1 << (apexParser.DEC - 98)) | (1 << (apexParser.ADD - 98)) | (1 << (apexParser.SUB - 98)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
            this.state = 714;
            this.elementValue();
            this.state = 719;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 715;
                    this.match(apexParser.COMMA);
                    this.state = 716;
                    this.elementValue(); 
                }
                this.state = 721;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
            }

        }

        this.state = 725;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.COMMA) {
            this.state = 724;
            this.match(apexParser.COMMA);
        }

        this.state = 727;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.BlockContext = BlockContext;

apexParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, apexParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 729;
        this.match(apexParser.LBRACE);
        this.state = 733;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.SET) | (1 << apexParser.ABSTRACT) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BREAK) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.CLASS) | (1 << apexParser.CONTINUE) | (1 << apexParser.DO) | (1 << apexParser.DOUBLE) | (1 << apexParser.ENUM) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.FOR) | (1 << apexParser.IF) | (1 << apexParser.INT) | (1 << apexParser.INTERFACE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.PRIVATE - 32)) | (1 << (apexParser.PROTECTED - 32)) | (1 << (apexParser.PUBLIC - 32)) | (1 << (apexParser.RETURN - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.STATIC - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.THROW - 32)) | (1 << (apexParser.TRY - 32)) | (1 << (apexParser.VOID - 32)) | (1 << (apexParser.WHILE - 32)) | (1 << (apexParser.SWITCH - 32)) | (1 << (apexParser.GLOBAL - 32)) | (1 << (apexParser.WEBSERVICE - 32)) | (1 << (apexParser.APEX_WITH_SHARING - 32)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 32)))) !== 0) || ((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (apexParser.INSERT - 88)) | (1 << (apexParser.UPSERT - 88)) | (1 << (apexParser.UPDATE - 88)) | (1 << (apexParser.DELETE - 88)) | (1 << (apexParser.UNDELETE - 88)) | (1 << (apexParser.TESTMETHOD - 88)) | (1 << (apexParser.TRIGGER - 88)) | (1 << (apexParser.IntegerLiteral - 88)) | (1 << (apexParser.FloatingPointLiteral - 88)) | (1 << (apexParser.BooleanLiteral - 88)) | (1 << (apexParser.StringLiteral - 88)) | (1 << (apexParser.NullLiteral - 88)) | (1 << (apexParser.LPAREN - 88)) | (1 << (apexParser.LBRACE - 88)) | (1 << (apexParser.LBRACK - 88)) | (1 << (apexParser.SEMI - 88)) | (1 << (apexParser.LT - 88)) | (1 << (apexParser.BANG - 88)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (apexParser.INC - 125)) | (1 << (apexParser.DEC - 125)) | (1 << (apexParser.ADD - 125)) | (1 << (apexParser.SUB - 125)) | (1 << (apexParser.Identifier - 125)) | (1 << (apexParser.AT - 125)) | (1 << (apexParser.LINE_COMMENT - 125)))) !== 0)) {
            this.state = 730;
            this.blockStatement();
            this.state = 735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 736;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.localVariableDeclarationStatement = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
};

BlockStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BlockStatementContext.prototype.typeDeclaration = function() {
    return this.getTypedRuleContext(TypeDeclarationContext,0);
};

BlockStatementContext.prototype.specialComment = function() {
    return this.getTypedRuleContext(SpecialCommentContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitBlockStatement(this);
	}
};

BlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.BlockStatementContext = BlockStatementContext;

apexParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, apexParser.RULE_blockStatement);
    try {
        this.state = 742;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 738;
            this.localVariableDeclarationStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 739;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 740;
            this.typeDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 741;
            this.specialComment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecialCommentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_specialComment;
    return this;
}

SpecialCommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecialCommentContext.prototype.constructor = SpecialCommentContext;

SpecialCommentContext.prototype.LINE_COMMENT = function() {
    return this.getToken(apexParser.LINE_COMMENT, 0);
};

SpecialCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSpecialComment(this);
	}
};

SpecialCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSpecialComment(this);
	}
};

SpecialCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSpecialComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SpecialCommentContext = SpecialCommentContext;

apexParser.prototype.specialComment = function() {

    var localctx = new SpecialCommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, apexParser.RULE_specialComment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 744;
        this.match(apexParser.LINE_COMMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_localVariableDeclarationStatement;
    return this;
}

LocalVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationStatementContext.prototype.constructor = LocalVariableDeclarationStatementContext;

LocalVariableDeclarationStatementContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

LocalVariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLocalVariableDeclarationStatement(this);
	}
};

LocalVariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLocalVariableDeclarationStatement(this);
	}
};

LocalVariableDeclarationStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLocalVariableDeclarationStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;

apexParser.prototype.localVariableDeclarationStatement = function() {

    var localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, apexParser.RULE_localVariableDeclarationStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 746;
        this.localVariableDeclaration();
        this.state = 747;
        this.match(apexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_localVariableDeclaration;
    return this;
}

LocalVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationContext.prototype.constructor = LocalVariableDeclarationContext;

LocalVariableDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LocalVariableDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

LocalVariableDeclarationContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LocalVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLocalVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;

apexParser.prototype.localVariableDeclaration = function() {

    var localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, apexParser.RULE_localVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 752;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 749;
            this.variableModifier();
            this.state = 754;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 755;
        this.type();
        this.state = 756;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.IF = function() {
    return this.getToken(apexParser.IF, 0);
};

StatementContext.prototype.parExpression = function() {
    return this.getTypedRuleContext(ParExpressionContext,0);
};

StatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementContext.prototype.ELSE = function() {
    return this.getToken(apexParser.ELSE, 0);
};

StatementContext.prototype.SWITCH = function() {
    return this.getToken(apexParser.SWITCH, 0);
};

StatementContext.prototype.ON = function() {
    return this.getToken(apexParser.ON, 0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.whenStatements = function() {
    return this.getTypedRuleContext(WhenStatementsContext,0);
};

StatementContext.prototype.FOR = function() {
    return this.getToken(apexParser.FOR, 0);
};

StatementContext.prototype.forControl = function() {
    return this.getTypedRuleContext(ForControlContext,0);
};

StatementContext.prototype.WHILE = function() {
    return this.getToken(apexParser.WHILE, 0);
};

StatementContext.prototype.DO = function() {
    return this.getToken(apexParser.DO, 0);
};

StatementContext.prototype.TRY = function() {
    return this.getToken(apexParser.TRY, 0);
};

StatementContext.prototype.finallyBlock = function() {
    return this.getTypedRuleContext(FinallyBlockContext,0);
};

StatementContext.prototype.catchClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext,i);
    }
};

StatementContext.prototype.RETURN = function() {
    return this.getToken(apexParser.RETURN, 0);
};

StatementContext.prototype.THROW = function() {
    return this.getToken(apexParser.THROW, 0);
};

StatementContext.prototype.BREAK = function() {
    return this.getToken(apexParser.BREAK, 0);
};

StatementContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

StatementContext.prototype.CONTINUE = function() {
    return this.getToken(apexParser.CONTINUE, 0);
};

StatementContext.prototype.statementExpression = function() {
    return this.getTypedRuleContext(StatementExpressionContext,0);
};

StatementContext.prototype.apexDbExpression = function() {
    return this.getTypedRuleContext(ApexDbExpressionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.StatementContext = StatementContext;

apexParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, apexParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 827;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 758;
            this.block();
            break;
        case apexParser.IF:
            this.enterOuterAlt(localctx, 2);
            this.state = 759;
            this.match(apexParser.IF);
            this.state = 760;
            this.parExpression();
            this.state = 761;
            this.statement();
            this.state = 764;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
            if(la_===1) {
                this.state = 762;
                this.match(apexParser.ELSE);
                this.state = 763;
                this.statement();

            }
            break;
        case apexParser.SWITCH:
            this.enterOuterAlt(localctx, 3);
            this.state = 766;
            this.match(apexParser.SWITCH);
            this.state = 767;
            this.match(apexParser.ON);
            this.state = 768;
            this.expression(0);
            this.state = 769;
            this.match(apexParser.LBRACE);
            this.state = 770;
            this.whenStatements();
            this.state = 771;
            this.match(apexParser.RBRACE);
            break;
        case apexParser.FOR:
            this.enterOuterAlt(localctx, 4);
            this.state = 773;
            this.match(apexParser.FOR);
            this.state = 774;
            this.match(apexParser.LPAREN);
            this.state = 775;
            this.forControl();
            this.state = 776;
            this.match(apexParser.RPAREN);
            this.state = 777;
            this.statement();
            break;
        case apexParser.WHILE:
            this.enterOuterAlt(localctx, 5);
            this.state = 779;
            this.match(apexParser.WHILE);
            this.state = 780;
            this.parExpression();
            this.state = 781;
            this.statement();
            break;
        case apexParser.DO:
            this.enterOuterAlt(localctx, 6);
            this.state = 783;
            this.match(apexParser.DO);
            this.state = 784;
            this.statement();
            this.state = 785;
            this.match(apexParser.WHILE);
            this.state = 786;
            this.parExpression();
            break;
        case apexParser.TRY:
            this.enterOuterAlt(localctx, 7);
            this.state = 788;
            this.match(apexParser.TRY);
            this.state = 789;
            this.block();
            this.state = 799;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case apexParser.CATCH:
                this.state = 791; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 790;
                    this.catchClause();
                    this.state = 793; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===apexParser.CATCH);
                this.state = 796;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===apexParser.FINALLY) {
                    this.state = 795;
                    this.finallyBlock();
                }

                break;
            case apexParser.FINALLY:
                this.state = 798;
                this.finallyBlock();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case apexParser.RETURN:
            this.enterOuterAlt(localctx, 8);
            this.state = 801;
            this.match(apexParser.RETURN);
            this.state = 803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (apexParser.IntegerLiteral - 98)) | (1 << (apexParser.FloatingPointLiteral - 98)) | (1 << (apexParser.BooleanLiteral - 98)) | (1 << (apexParser.StringLiteral - 98)) | (1 << (apexParser.NullLiteral - 98)) | (1 << (apexParser.LPAREN - 98)) | (1 << (apexParser.LBRACK - 98)) | (1 << (apexParser.LT - 98)) | (1 << (apexParser.BANG - 98)) | (1 << (apexParser.INC - 98)) | (1 << (apexParser.DEC - 98)) | (1 << (apexParser.ADD - 98)) | (1 << (apexParser.SUB - 98)))) !== 0) || _la===apexParser.Identifier) {
                this.state = 802;
                this.expression(0);
            }

            this.state = 805;
            this.match(apexParser.SEMI);
            break;
        case apexParser.THROW:
            this.enterOuterAlt(localctx, 9);
            this.state = 806;
            this.match(apexParser.THROW);
            this.state = 807;
            this.expression(0);
            this.state = 808;
            this.match(apexParser.SEMI);
            break;
        case apexParser.BREAK:
            this.enterOuterAlt(localctx, 10);
            this.state = 810;
            this.match(apexParser.BREAK);
            this.state = 812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.Identifier) {
                this.state = 811;
                this.match(apexParser.Identifier);
            }

            this.state = 814;
            this.match(apexParser.SEMI);
            break;
        case apexParser.CONTINUE:
            this.enterOuterAlt(localctx, 11);
            this.state = 815;
            this.match(apexParser.CONTINUE);
            this.state = 817;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.Identifier) {
                this.state = 816;
                this.match(apexParser.Identifier);
            }

            this.state = 819;
            this.match(apexParser.SEMI);
            break;
        case apexParser.SEMI:
            this.enterOuterAlt(localctx, 12);
            this.state = 820;
            this.match(apexParser.SEMI);
            break;
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.NEW:
        case apexParser.SHORT:
        case apexParser.SUPER:
        case apexParser.THIS:
        case apexParser.VOID:
        case apexParser.IntegerLiteral:
        case apexParser.FloatingPointLiteral:
        case apexParser.BooleanLiteral:
        case apexParser.StringLiteral:
        case apexParser.NullLiteral:
        case apexParser.LPAREN:
        case apexParser.LBRACK:
        case apexParser.LT:
        case apexParser.BANG:
        case apexParser.INC:
        case apexParser.DEC:
        case apexParser.ADD:
        case apexParser.SUB:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 13);
            this.state = 821;
            this.statementExpression();
            this.state = 822;
            this.match(apexParser.SEMI);
            break;
        case apexParser.INSERT:
        case apexParser.UPSERT:
        case apexParser.UPDATE:
        case apexParser.DELETE:
        case apexParser.UNDELETE:
            this.enterOuterAlt(localctx, 14);
            this.state = 824;
            this.apexDbExpression();
            this.state = 825;
            this.match(apexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_propertyBlock;
    return this;
}

PropertyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBlockContext.prototype.constructor = PropertyBlockContext;

PropertyBlockContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

PropertyBlockContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

PropertyBlockContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

PropertyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPropertyBlock(this);
	}
};

PropertyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPropertyBlock(this);
	}
};

PropertyBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPropertyBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PropertyBlockContext = PropertyBlockContext;

apexParser.prototype.propertyBlock = function() {

    var localctx = new PropertyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, apexParser.RULE_propertyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.OVERRIDE) | (1 << apexParser.VIRTUAL) | (1 << apexParser.ABSTRACT) | (1 << apexParser.FINAL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (apexParser.PRIVATE - 36)) | (1 << (apexParser.PROTECTED - 36)) | (1 << (apexParser.PUBLIC - 36)) | (1 << (apexParser.STATIC - 36)) | (1 << (apexParser.TRANSIENT - 36)) | (1 << (apexParser.GLOBAL - 36)) | (1 << (apexParser.WEBSERVICE - 36)) | (1 << (apexParser.APEX_WITH_SHARING - 36)) | (1 << (apexParser.APEX_WITHOUT_SHARING - 36)))) !== 0) || _la===apexParser.TESTMETHOD || _la===apexParser.AT) {
            this.state = 829;
            this.modifier();
            this.state = 834;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 837;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.GET:
            this.state = 835;
            this.getter();
            break;
        case apexParser.SET:
            this.state = 836;
            this.setter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_getter;
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.GET = function() {
    return this.getToken(apexParser.GET, 0);
};

GetterContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

GetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterGetter(this);
	}
};

GetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitGetter(this);
	}
};

GetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitGetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.GetterContext = GetterContext;

apexParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, apexParser.RULE_getter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 839;
        this.match(apexParser.GET);
        this.state = 842;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SEMI:
            this.state = 840;
            this.match(apexParser.SEMI);
            break;
        case apexParser.LBRACE:
            this.state = 841;
            this.methodBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_setter;
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

SetterContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

SetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSetter(this);
	}
};

SetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSetter(this);
	}
};

SetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SetterContext = SetterContext;

apexParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, apexParser.RULE_setter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 844;
        this.match(apexParser.SET);
        this.state = 847;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SEMI:
            this.state = 845;
            this.match(apexParser.SEMI);
            break;
        case apexParser.LBRACE:
            this.state = 846;
            this.methodBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_catchClause;
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.CATCH = function() {
    return this.getToken(apexParser.CATCH, 0);
};

CatchClauseContext.prototype.catchType = function() {
    return this.getTypedRuleContext(CatchTypeContext,0);
};

CatchClauseContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

CatchClauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchClauseContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

CatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCatchClause(this);
	}
};

CatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCatchClause(this);
	}
};

CatchClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCatchClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CatchClauseContext = CatchClauseContext;

apexParser.prototype.catchClause = function() {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, apexParser.RULE_catchClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 849;
        this.match(apexParser.CATCH);
        this.state = 850;
        this.match(apexParser.LPAREN);
        this.state = 854;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 851;
            this.variableModifier();
            this.state = 856;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 857;
        this.catchType();
        this.state = 858;
        this.match(apexParser.Identifier);
        this.state = 859;
        this.match(apexParser.RPAREN);
        this.state = 860;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_catchType;
    return this;
}

CatchTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchTypeContext.prototype.constructor = CatchTypeContext;

CatchTypeContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

CatchTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCatchType(this);
	}
};

CatchTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCatchType(this);
	}
};

CatchTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCatchType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CatchTypeContext = CatchTypeContext;

apexParser.prototype.catchType = function() {

    var localctx = new CatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, apexParser.RULE_catchType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 862;
        this.qualifiedName();
        this.state = 867;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.BITOR) {
            this.state = 863;
            this.match(apexParser.BITOR);
            this.state = 864;
            this.qualifiedName();
            this.state = 869;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_finallyBlock;
    return this;
}

FinallyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyBlockContext.prototype.constructor = FinallyBlockContext;

FinallyBlockContext.prototype.FINALLY = function() {
    return this.getToken(apexParser.FINALLY, 0);
};

FinallyBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFinallyBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FinallyBlockContext = FinallyBlockContext;

apexParser.prototype.finallyBlock = function() {

    var localctx = new FinallyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, apexParser.RULE_finallyBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.match(apexParser.FINALLY);
        this.state = 871;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhenStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_whenStatements;
    return this;
}

WhenStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenStatementsContext.prototype.constructor = WhenStatementsContext;

WhenStatementsContext.prototype.whenStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenStatementContext);
    } else {
        return this.getTypedRuleContext(WhenStatementContext,i);
    }
};

WhenStatementsContext.prototype.WHEN = function() {
    return this.getToken(apexParser.WHEN, 0);
};

WhenStatementsContext.prototype.ELSE = function() {
    return this.getToken(apexParser.ELSE, 0);
};

WhenStatementsContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

WhenStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterWhenStatements(this);
	}
};

WhenStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitWhenStatements(this);
	}
};

WhenStatementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitWhenStatements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.WhenStatementsContext = WhenStatementsContext;

apexParser.prototype.whenStatements = function() {

    var localctx = new WhenStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, apexParser.RULE_whenStatements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 873;
        this.whenStatement();
        this.state = 877;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 874;
                this.whenStatement(); 
            }
            this.state = 879;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
        }

        this.state = 883;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.WHEN) {
            this.state = 880;
            this.match(apexParser.WHEN);
            this.state = 881;
            this.match(apexParser.ELSE);
            this.state = 882;
            this.block();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhenStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_whenStatement;
    return this;
}

WhenStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenStatementContext.prototype.constructor = WhenStatementContext;

WhenStatementContext.prototype.WHEN = function() {
    return this.getToken(apexParser.WHEN, 0);
};

WhenStatementContext.prototype.whenExpression = function() {
    return this.getTypedRuleContext(WhenExpressionContext,0);
};

WhenStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

WhenStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterWhenStatement(this);
	}
};

WhenStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitWhenStatement(this);
	}
};

WhenStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitWhenStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.WhenStatementContext = WhenStatementContext;

apexParser.prototype.whenStatement = function() {

    var localctx = new WhenStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, apexParser.RULE_whenStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 885;
        this.match(apexParser.WHEN);
        this.state = 886;
        this.whenExpression();
        this.state = 887;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhenExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_whenExpression;
    return this;
}

WhenExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenExpressionContext.prototype.constructor = WhenExpressionContext;

WhenExpressionContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

WhenExpressionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

WhenExpressionContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

WhenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterWhenExpression(this);
	}
};

WhenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitWhenExpression(this);
	}
};

WhenExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitWhenExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.WhenExpressionContext = WhenExpressionContext;

apexParser.prototype.whenExpression = function() {

    var localctx = new WhenExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, apexParser.RULE_whenExpression);
    var _la = 0; // Token type
    try {
        this.state = 900;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.IntegerLiteral:
        case apexParser.FloatingPointLiteral:
        case apexParser.BooleanLiteral:
        case apexParser.StringLiteral:
        case apexParser.NullLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 889;
            this.literal();
            this.state = 894;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===apexParser.COMMA) {
                this.state = 890;
                this.match(apexParser.COMMA);
                this.state = 891;
                this.literal();
                this.state = 896;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 897;
            this.type();
            this.state = 898;
            this.match(apexParser.Identifier);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_forControl;
    return this;
}

ForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForControlContext.prototype.constructor = ForControlContext;

ForControlContext.prototype.enhancedForControl = function() {
    return this.getTypedRuleContext(EnhancedForControlContext,0);
};

ForControlContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

ForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForControlContext.prototype.forUpdate = function() {
    return this.getTypedRuleContext(ForUpdateContext,0);
};

ForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterForControl(this);
	}
};

ForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitForControl(this);
	}
};

ForControlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitForControl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ForControlContext = ForControlContext;

apexParser.prototype.forControl = function() {

    var localctx = new ForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, apexParser.RULE_forControl);
    var _la = 0; // Token type
    try {
        this.state = 914;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 902;
            this.enhancedForControl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 904;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FINAL) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (apexParser.IntegerLiteral - 98)) | (1 << (apexParser.FloatingPointLiteral - 98)) | (1 << (apexParser.BooleanLiteral - 98)) | (1 << (apexParser.StringLiteral - 98)) | (1 << (apexParser.NullLiteral - 98)) | (1 << (apexParser.LPAREN - 98)) | (1 << (apexParser.LBRACK - 98)) | (1 << (apexParser.LT - 98)) | (1 << (apexParser.BANG - 98)) | (1 << (apexParser.INC - 98)) | (1 << (apexParser.DEC - 98)) | (1 << (apexParser.ADD - 98)) | (1 << (apexParser.SUB - 98)))) !== 0) || _la===apexParser.Identifier || _la===apexParser.AT) {
                this.state = 903;
                this.forInit();
            }

            this.state = 906;
            this.match(apexParser.SEMI);
            this.state = 908;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (apexParser.IntegerLiteral - 98)) | (1 << (apexParser.FloatingPointLiteral - 98)) | (1 << (apexParser.BooleanLiteral - 98)) | (1 << (apexParser.StringLiteral - 98)) | (1 << (apexParser.NullLiteral - 98)) | (1 << (apexParser.LPAREN - 98)) | (1 << (apexParser.LBRACK - 98)) | (1 << (apexParser.LT - 98)) | (1 << (apexParser.BANG - 98)) | (1 << (apexParser.INC - 98)) | (1 << (apexParser.DEC - 98)) | (1 << (apexParser.ADD - 98)) | (1 << (apexParser.SUB - 98)))) !== 0) || _la===apexParser.Identifier) {
                this.state = 907;
                this.expression(0);
            }

            this.state = 910;
            this.match(apexParser.SEMI);
            this.state = 912;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (apexParser.IntegerLiteral - 98)) | (1 << (apexParser.FloatingPointLiteral - 98)) | (1 << (apexParser.BooleanLiteral - 98)) | (1 << (apexParser.StringLiteral - 98)) | (1 << (apexParser.NullLiteral - 98)) | (1 << (apexParser.LPAREN - 98)) | (1 << (apexParser.LBRACK - 98)) | (1 << (apexParser.LT - 98)) | (1 << (apexParser.BANG - 98)) | (1 << (apexParser.INC - 98)) | (1 << (apexParser.DEC - 98)) | (1 << (apexParser.ADD - 98)) | (1 << (apexParser.SUB - 98)))) !== 0) || _la===apexParser.Identifier) {
                this.state = 911;
                this.forUpdate();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_forInit;
    return this;
}

ForInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitContext.prototype.constructor = ForInitContext;

ForInitContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

ForInitContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterForInit(this);
	}
};

ForInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitForInit(this);
	}
};

ForInitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitForInit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ForInitContext = ForInitContext;

apexParser.prototype.forInit = function() {

    var localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, apexParser.RULE_forInit);
    try {
        this.state = 918;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 916;
            this.localVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 917;
            this.expressionList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnhancedForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_enhancedForControl;
    return this;
}

EnhancedForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForControlContext.prototype.constructor = EnhancedForControlContext;

EnhancedForControlContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

EnhancedForControlContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

EnhancedForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnhancedForControlContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

EnhancedForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitEnhancedForControl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.EnhancedForControlContext = EnhancedForControlContext;

apexParser.prototype.enhancedForControl = function() {

    var localctx = new EnhancedForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, apexParser.RULE_enhancedForControl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.FINAL || _la===apexParser.AT) {
            this.state = 920;
            this.variableModifier();
            this.state = 925;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 926;
        this.type();
        this.state = 927;
        this.variableDeclaratorId();
        this.state = 928;
        this.match(apexParser.COLON);
        this.state = 929;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_forUpdate;
    return this;
}

ForUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForUpdateContext.prototype.constructor = ForUpdateContext;

ForUpdateContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterForUpdate(this);
	}
};

ForUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitForUpdate(this);
	}
};

ForUpdateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitForUpdate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ForUpdateContext = ForUpdateContext;

apexParser.prototype.forUpdate = function() {

    var localctx = new ForUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, apexParser.RULE_forUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_parExpression;
    return this;
}

ParExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParExpressionContext.prototype.constructor = ParExpressionContext;

ParExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterParExpression(this);
	}
};

ParExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitParExpression(this);
	}
};

ParExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitParExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ParExpressionContext = ParExpressionContext;

apexParser.prototype.parExpression = function() {

    var localctx = new ParExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, apexParser.RULE_parExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 933;
        this.match(apexParser.LPAREN);
        this.state = 934;
        this.expression(0);
        this.state = 935;
        this.match(apexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitExpressionList(this);
	}
};

ExpressionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitExpressionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ExpressionListContext = ExpressionListContext;

apexParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, apexParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 937;
        this.expression(0);
        this.state = 942;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 938;
            this.match(apexParser.COMMA);
            this.state = 939;
            this.expression(0);
            this.state = 944;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_statementExpression;
    return this;
}

StatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementExpressionContext.prototype.constructor = StatementExpressionContext;

StatementExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterStatementExpression(this);
	}
};

StatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitStatementExpression(this);
	}
};

StatementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitStatementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.StatementExpressionContext = StatementExpressionContext;

apexParser.prototype.statementExpression = function() {

    var localctx = new StatementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, apexParser.RULE_statementExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 945;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_constantExpression;
    return this;
}

ConstantExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantExpressionContext.prototype.constructor = ConstantExpressionContext;

ConstantExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstantExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterConstantExpression(this);
	}
};

ConstantExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitConstantExpression(this);
	}
};

ConstantExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitConstantExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ConstantExpressionContext = ConstantExpressionContext;

apexParser.prototype.constantExpression = function() {

    var localctx = new ConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, apexParser.RULE_constantExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 947;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ApexDbExpressionShortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_apexDbExpressionShort;
    this.dml = null; // Token
    return this;
}

ApexDbExpressionShortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApexDbExpressionShortContext.prototype.constructor = ApexDbExpressionShortContext;

ApexDbExpressionShortContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ApexDbExpressionShortContext.prototype.INSERT = function() {
    return this.getToken(apexParser.INSERT, 0);
};

ApexDbExpressionShortContext.prototype.UPSERT = function() {
    return this.getToken(apexParser.UPSERT, 0);
};

ApexDbExpressionShortContext.prototype.UPDATE = function() {
    return this.getToken(apexParser.UPDATE, 0);
};

ApexDbExpressionShortContext.prototype.DELETE = function() {
    return this.getToken(apexParser.DELETE, 0);
};

ApexDbExpressionShortContext.prototype.UNDELETE = function() {
    return this.getToken(apexParser.UNDELETE, 0);
};

ApexDbExpressionShortContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterApexDbExpressionShort(this);
	}
};

ApexDbExpressionShortContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitApexDbExpressionShort(this);
	}
};

ApexDbExpressionShortContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitApexDbExpressionShort(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ApexDbExpressionShortContext = ApexDbExpressionShortContext;

apexParser.prototype.apexDbExpressionShort = function() {

    var localctx = new ApexDbExpressionShortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, apexParser.RULE_apexDbExpressionShort);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 949;
        localctx.dml = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (apexParser.INSERT - 88)) | (1 << (apexParser.UPSERT - 88)) | (1 << (apexParser.UPDATE - 88)) | (1 << (apexParser.DELETE - 88)) | (1 << (apexParser.UNDELETE - 88)))) !== 0))) {
            localctx.dml = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 950;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ApexDbExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_apexDbExpression;
    return this;
}

ApexDbExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApexDbExpressionContext.prototype.constructor = ApexDbExpressionContext;

ApexDbExpressionContext.prototype.apexDbExpressionShort = function() {
    return this.getTypedRuleContext(ApexDbExpressionShortContext,0);
};

ApexDbExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterApexDbExpression(this);
	}
};

ApexDbExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitApexDbExpression(this);
	}
};

ApexDbExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitApexDbExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ApexDbExpressionContext = ApexDbExpressionContext;

apexParser.prototype.apexDbExpression = function() {

    var localctx = new ApexDbExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, apexParser.RULE_apexDbExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 952;
        this.apexDbExpressionShort();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TernalyExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernalyExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TernalyExpressionContext.prototype.constructor = TernalyExpressionContext;

apexParser.TernalyExpressionContext = TernalyExpressionContext;

TernalyExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
TernalyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTernalyExpression(this);
	}
};

TernalyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTernalyExpression(this);
	}
};

TernalyExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTernalyExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreUnaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreUnaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PreUnaryExpressionContext.prototype.constructor = PreUnaryExpressionContext;

apexParser.PreUnaryExpressionContext = PreUnaryExpressionContext;

PreUnaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PreUnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPreUnaryExpression(this);
	}
};

PreUnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPreUnaryExpression(this);
	}
};

PreUnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPreUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArrayAccessContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayAccessContext.prototype = Object.create(ExpressionContext.prototype);
ArrayAccessContext.prototype.constructor = ArrayAccessContext;

apexParser.ArrayAccessContext = ArrayAccessContext;

ArrayAccessContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ArrayAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArrayAccess(this);
	}
};

ArrayAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArrayAccess(this);
	}
};

ArrayAccessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArrayAccess(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PostUnaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostUnaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PostUnaryExpressionContext.prototype.constructor = PostUnaryExpressionContext;

apexParser.PostUnaryExpressionContext = PostUnaryExpressionContext;

PostUnaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PostUnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPostUnaryExpression(this);
	}
};

PostUnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPostUnaryExpression(this);
	}
};

PostUnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPostUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PrimaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

apexParser.PrimaryExpressionContext = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};
PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPrimaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function OpExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OpExpressionContext.prototype = Object.create(ExpressionContext.prototype);
OpExpressionContext.prototype.constructor = OpExpressionContext;

apexParser.OpExpressionContext = OpExpressionContext;

OpExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

OpExpressionContext.prototype.explicitGenericInvocation = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationContext,0);
};

OpExpressionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

OpExpressionContext.prototype.INSTANCEOF = function() {
    return this.getToken(apexParser.INSTANCEOF, 0);
};
OpExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterOpExpression(this);
	}
};

OpExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitOpExpression(this);
	}
};

OpExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitOpExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NewExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

apexParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.NEW = function() {
    return this.getToken(apexParser.NEW, 0);
};

NewExpressionContext.prototype.creator = function() {
    return this.getTypedRuleContext(CreatorContext,0);
};
NewExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterNewExpression(this);
	}
};

NewExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitNewExpression(this);
	}
};

NewExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitNewExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

apexParser.UnaryExpressionContext = UnaryExpressionContext;

UnaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MethodInvocationContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MethodInvocationContext.prototype = Object.create(ExpressionContext.prototype);
MethodInvocationContext.prototype.constructor = MethodInvocationContext;

apexParser.MethodInvocationContext = MethodInvocationContext;

MethodInvocationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MethodInvocationContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
MethodInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMethodInvocation(this);
	}
};

MethodInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMethodInvocation(this);
	}
};

MethodInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMethodInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CastExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

apexParser.CastExpressionContext = CastExpressionContext;

CastExpressionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

CastExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCastExpression(this);
	}
};

CastExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCastExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShiftExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ShiftExpressionContext.prototype.constructor = ShiftExpressionContext;

apexParser.ShiftExpressionContext = ShiftExpressionContext;

ShiftExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ShiftExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterShiftExpression(this);
	}
};

ShiftExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitShiftExpression(this);
	}
};

ShiftExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitShiftExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldAccessContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldAccessContext.prototype = Object.create(ExpressionContext.prototype);
FieldAccessContext.prototype.constructor = FieldAccessContext;

apexParser.FieldAccessContext = FieldAccessContext;

FieldAccessContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FieldAccessContext.prototype.accessor = function() {
    return this.getTypedRuleContext(AccessorContext,0);
};
FieldAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFieldAccess(this);
	}
};

FieldAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFieldAccess(this);
	}
};

FieldAccessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFieldAccess(this);
    } else {
        return visitor.visitChildren(this);
    }
};



apexParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 162;
    this.enterRecursionRule(localctx, 162, apexParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PrimaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 955;
            this.primary();
            break;

        case 2:
            localctx = new NewExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 956;
            this.match(apexParser.NEW);
            this.state = 957;
            this.creator();
            break;

        case 3:
            localctx = new CastExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 958;
            this.match(apexParser.LPAREN);
            this.state = 959;
            this.type();
            this.state = 960;
            this.match(apexParser.RPAREN);
            this.state = 961;
            this.expression(17);
            break;

        case 4:
            localctx = new PreUnaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 963;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===apexParser.INC || _la===apexParser.DEC)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 964;
            this.expression(15);
            break;

        case 5:
            localctx = new UnaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 965;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (apexParser.BANG - 115)) | (1 << (apexParser.ADD - 115)) | (1 << (apexParser.SUB - 115)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 966;
            this.expression(14);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1040;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1038;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 969;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 970;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (apexParser.MUL - 129)) | (1 << (apexParser.DIV - 129)) | (1 << (apexParser.MOD - 129)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 971;
                    this.expression(14);
                    break;

                case 2:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 972;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 973;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===apexParser.ADD || _la===apexParser.SUB)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 974;
                    this.expression(13);
                    break;

                case 3:
                    localctx = new ShiftExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 975;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 983;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 976;
                        this.match(apexParser.LT);
                        this.state = 977;
                        this.match(apexParser.LT);
                        break;

                    case 2:
                        this.state = 978;
                        this.match(apexParser.GT);
                        this.state = 979;
                        this.match(apexParser.GT);
                        this.state = 980;
                        this.match(apexParser.GT);
                        break;

                    case 3:
                        this.state = 981;
                        this.match(apexParser.GT);
                        this.state = 982;
                        this.match(apexParser.GT);
                        break;

                    }
                    this.state = 985;
                    this.expression(12);
                    break;

                case 4:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 986;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 987;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (apexParser.GT - 113)) | (1 << (apexParser.LT - 113)) | (1 << (apexParser.LE - 113)) | (1 << (apexParser.GE - 113)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 988;
                    this.expression(11);
                    break;

                case 5:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 989;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 990;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===apexParser.EQUAL || _la===apexParser.NOTEQUAL)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 991;
                    this.expression(9);
                    break;

                case 6:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 992;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 993;
                    localctx.op = this.match(apexParser.BITAND);
                    this.state = 994;
                    this.expression(8);
                    break;

                case 7:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 995;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 996;
                    localctx.op = this.match(apexParser.CARET);
                    this.state = 997;
                    this.expression(7);
                    break;

                case 8:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 998;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 999;
                    localctx.op = this.match(apexParser.BITOR);
                    this.state = 1000;
                    this.expression(6);
                    break;

                case 9:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1001;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1002;
                    localctx.op = this.match(apexParser.AND);
                    this.state = 1003;
                    this.expression(5);
                    break;

                case 10:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1004;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1005;
                    localctx.op = this.match(apexParser.OR);
                    this.state = 1006;
                    this.expression(4);
                    break;

                case 11:
                    localctx = new TernalyExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1007;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1008;
                    localctx.op = this.match(apexParser.QUESTION);
                    this.state = 1009;
                    this.expression(0);
                    this.state = 1010;
                    this.match(apexParser.COLON);
                    this.state = 1011;
                    this.expression(3);
                    break;

                case 12:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1013;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1014;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (apexParser.ASSIGN - 112)) | (1 << (apexParser.ADD_ASSIGN - 112)) | (1 << (apexParser.SUB_ASSIGN - 112)) | (1 << (apexParser.MUL_ASSIGN - 112)) | (1 << (apexParser.DIV_ASSIGN - 112)) | (1 << (apexParser.AND_ASSIGN - 112)) | (1 << (apexParser.OR_ASSIGN - 112)) | (1 << (apexParser.XOR_ASSIGN - 112)) | (1 << (apexParser.MOD_ASSIGN - 112)) | (1 << (apexParser.LSHIFT_ASSIGN - 112)))) !== 0) || _la===apexParser.RSHIFT_ASSIGN || _la===apexParser.URSHIFT_ASSIGN)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1015;
                    this.expression(1);
                    break;

                case 13:
                    localctx = new FieldAccessContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1016;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 1017;
                    this.match(apexParser.DOT);
                    this.state = 1018;
                    this.accessor();
                    break;

                case 14:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1019;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 1020;
                    this.match(apexParser.DOT);
                    this.state = 1021;
                    this.explicitGenericInvocation();
                    break;

                case 15:
                    localctx = new ArrayAccessContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1022;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1023;
                    this.match(apexParser.LBRACK);
                    this.state = 1024;
                    this.expression(0);
                    this.state = 1025;
                    this.match(apexParser.RBRACK);
                    break;

                case 16:
                    localctx = new MethodInvocationContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1027;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1028;
                    this.match(apexParser.LPAREN);
                    this.state = 1030;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (apexParser.IntegerLiteral - 98)) | (1 << (apexParser.FloatingPointLiteral - 98)) | (1 << (apexParser.BooleanLiteral - 98)) | (1 << (apexParser.StringLiteral - 98)) | (1 << (apexParser.NullLiteral - 98)) | (1 << (apexParser.LPAREN - 98)) | (1 << (apexParser.LBRACK - 98)) | (1 << (apexParser.LT - 98)) | (1 << (apexParser.BANG - 98)) | (1 << (apexParser.INC - 98)) | (1 << (apexParser.DEC - 98)) | (1 << (apexParser.ADD - 98)) | (1 << (apexParser.SUB - 98)))) !== 0) || _la===apexParser.Identifier) {
                        this.state = 1029;
                        this.expressionList();
                    }

                    this.state = 1032;
                    this.match(apexParser.RPAREN);
                    break;

                case 17:
                    localctx = new PostUnaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1033;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1034;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===apexParser.INC || _la===apexParser.DEC)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 18:
                    localctx = new OpExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, apexParser.RULE_expression);
                    this.state = 1035;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1036;
                    localctx.op = this.match(apexParser.INSTANCEOF);
                    this.state = 1037;
                    this.type();
                    break;

                } 
            }
            this.state = 1042;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryContext.prototype.THIS = function() {
    return this.getToken(apexParser.THIS, 0);
};

PrimaryContext.prototype.SUPER = function() {
    return this.getToken(apexParser.SUPER, 0);
};

PrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

PrimaryContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PrimaryContext.prototype.CLASS = function() {
    return this.getToken(apexParser.CLASS, 0);
};

PrimaryContext.prototype.VOID = function() {
    return this.getToken(apexParser.VOID, 0);
};

PrimaryContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

PrimaryContext.prototype.explicitGenericInvocationSuffix = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
};

PrimaryContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

PrimaryContext.prototype.soqlLiteral = function() {
    return this.getTypedRuleContext(SoqlLiteralContext,0);
};

PrimaryContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitPrimary(this);
	}
};

PrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitPrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.PrimaryContext = PrimaryContext;

apexParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, apexParser.RULE_primary);
    try {
        this.state = 1066;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1043;
            this.match(apexParser.LPAREN);
            this.state = 1044;
            this.expression(0);
            this.state = 1045;
            this.match(apexParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1047;
            this.match(apexParser.THIS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1048;
            this.match(apexParser.SUPER);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1049;
            this.literal();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1050;
            this.match(apexParser.Identifier);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1051;
            this.type();
            this.state = 1052;
            this.match(apexParser.DOT);
            this.state = 1053;
            this.match(apexParser.CLASS);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1055;
            this.match(apexParser.VOID);
            this.state = 1056;
            this.match(apexParser.DOT);
            this.state = 1057;
            this.match(apexParser.CLASS);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1058;
            this.nonWildcardTypeArguments();
            this.state = 1062;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case apexParser.SUPER:
            case apexParser.Identifier:
                this.state = 1059;
                this.explicitGenericInvocationSuffix();
                break;
            case apexParser.THIS:
                this.state = 1060;
                this.match(apexParser.THIS);
                this.state = 1061;
                this.arguments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1064;
            this.soqlLiteral();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1065;
            this.primitiveType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_creator;
    return this;
}

CreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatorContext.prototype.constructor = CreatorContext;

CreatorContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

CreatorContext.prototype.createdName = function() {
    return this.getTypedRuleContext(CreatedNameContext,0);
};

CreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

CreatorContext.prototype.arrayCreatorRest = function() {
    return this.getTypedRuleContext(ArrayCreatorRestContext,0);
};

CreatorContext.prototype.mapCreatorRest = function() {
    return this.getTypedRuleContext(MapCreatorRestContext,0);
};

CreatorContext.prototype.setCreatorRest = function() {
    return this.getTypedRuleContext(SetCreatorRestContext,0);
};

CreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCreator(this);
	}
};

CreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCreator(this);
	}
};

CreatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCreator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CreatorContext = CreatorContext;

apexParser.prototype.creator = function() {

    var localctx = new CreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, apexParser.RULE_creator);
    try {
        this.state = 1079;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1068;
            this.nonWildcardTypeArguments();
            this.state = 1069;
            this.createdName();
            this.state = 1070;
            this.classCreatorRest();
            break;
        case apexParser.SET:
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1072;
            this.createdName();
            this.state = 1077;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1073;
                this.arrayCreatorRest();
                break;

            case 2:
                this.state = 1074;
                this.classCreatorRest();
                break;

            case 3:
                this.state = 1075;
                this.mapCreatorRest();
                break;

            case 4:
                this.state = 1076;
                this.setCreatorRest();
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreatedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_createdName;
    return this;
}

CreatedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatedNameContext.prototype.constructor = CreatedNameContext;

CreatedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


CreatedNameContext.prototype.typeArgumentsOrDiamond = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsOrDiamondContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,i);
    }
};

CreatedNameContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

CreatedNameContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

CreatedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterCreatedName(this);
	}
};

CreatedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitCreatedName(this);
	}
};

CreatedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitCreatedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.CreatedNameContext = CreatedNameContext;

apexParser.prototype.createdName = function() {

    var localctx = new CreatedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, apexParser.RULE_createdName);
    var _la = 0; // Token type
    try {
        this.state = 1098;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1081;
            this.match(apexParser.Identifier);
            this.state = 1083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===apexParser.LT) {
                this.state = 1082;
                this.typeArgumentsOrDiamond();
            }

            this.state = 1092;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===apexParser.DOT) {
                this.state = 1085;
                this.match(apexParser.DOT);
                this.state = 1086;
                this.match(apexParser.Identifier);
                this.state = 1088;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===apexParser.LT) {
                    this.state = 1087;
                    this.typeArgumentsOrDiamond();
                }

                this.state = 1094;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case apexParser.BOOLEAN:
        case apexParser.BYTE:
        case apexParser.CHAR:
        case apexParser.DOUBLE:
        case apexParser.FLOAT:
        case apexParser.INT:
        case apexParser.LONG:
        case apexParser.SHORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1095;
            this.primitiveType();
            break;
        case apexParser.SET:
            this.enterOuterAlt(localctx, 3);
            this.state = 1096;
            this.match(apexParser.SET);
            this.state = 1097;
            this.typeArgumentsOrDiamond();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InnerCreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_innerCreator;
    return this;
}

InnerCreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerCreatorContext.prototype.constructor = InnerCreatorContext;

InnerCreatorContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

InnerCreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

InnerCreatorContext.prototype.nonWildcardTypeArgumentsOrDiamond = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsOrDiamondContext,0);
};

InnerCreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterInnerCreator(this);
	}
};

InnerCreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitInnerCreator(this);
	}
};

InnerCreatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitInnerCreator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.InnerCreatorContext = InnerCreatorContext;

apexParser.prototype.innerCreator = function() {

    var localctx = new InnerCreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, apexParser.RULE_innerCreator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1100;
        this.match(apexParser.Identifier);
        this.state = 1102;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LT) {
            this.state = 1101;
            this.nonWildcardTypeArgumentsOrDiamond();
        }

        this.state = 1104;
        this.classCreatorRest();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_arrayCreatorRest;
    return this;
}

ArrayCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayCreatorRestContext.prototype.constructor = ArrayCreatorRestContext;

ArrayCreatorRestContext.prototype.typedArray = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypedArrayContext);
    } else {
        return this.getTypedRuleContext(TypedArrayContext,i);
    }
};

ArrayCreatorRestContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

ArrayCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArrayCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ArrayCreatorRestContext = ArrayCreatorRestContext;

apexParser.prototype.arrayCreatorRest = function() {

    var localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, apexParser.RULE_arrayCreatorRest);
    var _la = 0; // Token type
    try {
        this.state = 1133;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1106;
            this.typedArray();
            this.state = 1110;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===apexParser.LBRACK) {
                this.state = 1107;
                this.typedArray();
                this.state = 1112;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1113;
            this.arrayInitializer();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1115;
            this.match(apexParser.LBRACK);
            this.state = 1116;
            this.expression(0);
            this.state = 1117;
            this.match(apexParser.RBRACK);
            this.state = 1124;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1118;
                    this.match(apexParser.LBRACK);
                    this.state = 1119;
                    this.expression(0);
                    this.state = 1120;
                    this.match(apexParser.RBRACK); 
                }
                this.state = 1126;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
            }

            this.state = 1130;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,118,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1127;
                    this.typedArray(); 
                }
                this.state = 1132;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,118,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_mapCreatorRest;
    return this;
}

MapCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapCreatorRestContext.prototype.constructor = MapCreatorRestContext;

MapCreatorRestContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


MapCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MapCreatorRestContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

MapCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterMapCreatorRest(this);
	}
};

MapCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitMapCreatorRest(this);
	}
};

MapCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitMapCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.MapCreatorRestContext = MapCreatorRestContext;

apexParser.prototype.mapCreatorRest = function() {

    var localctx = new MapCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, apexParser.RULE_mapCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1135;
        this.match(apexParser.LBRACE);
        this.state = 1138;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1136;
            this.match(apexParser.Identifier);
            break;

        case 2:
            this.state = 1137;
            this.expression(0);
            break;

        }
        this.state = 1140;
        this.match(apexParser.LAMBDA_LIKE);
        this.state = 1143;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1141;
            this.literal();
            break;

        case 2:
            this.state = 1142;
            this.expression(0);
            break;

        }
        this.state = 1157;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 1145;
            this.match(apexParser.COMMA);
            this.state = 1148;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1146;
                this.match(apexParser.Identifier);
                break;

            case 2:
                this.state = 1147;
                this.expression(0);
                break;

            }
            this.state = 1150;
            this.match(apexParser.LAMBDA_LIKE);
            this.state = 1153;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1151;
                this.literal();
                break;

            case 2:
                this.state = 1152;
                this.expression(0);
                break;

            }
            this.state = 1159;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1160;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_setCreatorRest;
    return this;
}

SetCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetCreatorRestContext.prototype.constructor = SetCreatorRestContext;

SetCreatorRestContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

SetCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSetCreatorRest(this);
	}
};

SetCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSetCreatorRest(this);
	}
};

SetCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSetCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SetCreatorRestContext = SetCreatorRestContext;

apexParser.prototype.setCreatorRest = function() {

    var localctx = new SetCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, apexParser.RULE_setCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1162;
        this.match(apexParser.LBRACE);
        this.state = 1165;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1163;
            this.literal();
            break;

        case 2:
            this.state = 1164;
            this.expression(0);
            break;

        }
        this.state = 1174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 1167;
            this.match(apexParser.COMMA);
            this.state = 1170;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1168;
                this.literal();
                break;

            case 2:
                this.state = 1169;
                this.expression(0);
                break;

            }
            this.state = 1176;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1177;
        this.match(apexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_classCreatorRest;
    return this;
}

ClassCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassCreatorRestContext.prototype.constructor = ClassCreatorRestContext;

ClassCreatorRestContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ClassCreatorRestContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterClassCreatorRest(this);
	}
};

ClassCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitClassCreatorRest(this);
	}
};

ClassCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitClassCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ClassCreatorRestContext = ClassCreatorRestContext;

apexParser.prototype.classCreatorRest = function() {

    var localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, apexParser.RULE_classCreatorRest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1179;
        this.arguments();
        this.state = 1181;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        if(la_===1) {
            this.state = 1180;
            this.classBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitGenericInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_explicitGenericInvocation;
    return this;
}

ExplicitGenericInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitGenericInvocationContext.prototype.constructor = ExplicitGenericInvocationContext;

ExplicitGenericInvocationContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

ExplicitGenericInvocationContext.prototype.explicitGenericInvocationSuffix = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
};

ExplicitGenericInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterExplicitGenericInvocation(this);
	}
};

ExplicitGenericInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitExplicitGenericInvocation(this);
	}
};

ExplicitGenericInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitExplicitGenericInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ExplicitGenericInvocationContext = ExplicitGenericInvocationContext;

apexParser.prototype.explicitGenericInvocation = function() {

    var localctx = new ExplicitGenericInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, apexParser.RULE_explicitGenericInvocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1183;
        this.nonWildcardTypeArguments();
        this.state = 1184;
        this.explicitGenericInvocationSuffix();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonWildcardTypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_nonWildcardTypeArguments;
    return this;
}

NonWildcardTypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonWildcardTypeArgumentsContext.prototype.constructor = NonWildcardTypeArgumentsContext;

NonWildcardTypeArgumentsContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

NonWildcardTypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterNonWildcardTypeArguments(this);
	}
};

NonWildcardTypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitNonWildcardTypeArguments(this);
	}
};

NonWildcardTypeArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitNonWildcardTypeArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.NonWildcardTypeArgumentsContext = NonWildcardTypeArgumentsContext;

apexParser.prototype.nonWildcardTypeArguments = function() {

    var localctx = new NonWildcardTypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, apexParser.RULE_nonWildcardTypeArguments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1186;
        this.match(apexParser.LT);
        this.state = 1187;
        this.typeList();
        this.state = 1188;
        this.match(apexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_typeArgumentsOrDiamond;
    return this;
}

TypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsOrDiamondContext.prototype.constructor = TypeArgumentsOrDiamondContext;

TypeArgumentsOrDiamondContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

TypeArgumentsOrDiamondContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterTypeArgumentsOrDiamond(this);
	}
};

TypeArgumentsOrDiamondContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitTypeArgumentsOrDiamond(this);
	}
};

TypeArgumentsOrDiamondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitTypeArgumentsOrDiamond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext;

apexParser.prototype.typeArgumentsOrDiamond = function() {

    var localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, apexParser.RULE_typeArgumentsOrDiamond);
    try {
        this.state = 1193;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1190;
            this.match(apexParser.LT);
            this.state = 1191;
            this.match(apexParser.GT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1192;
            this.typeArguments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonWildcardTypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_nonWildcardTypeArgumentsOrDiamond;
    return this;
}

NonWildcardTypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonWildcardTypeArgumentsOrDiamondContext.prototype.constructor = NonWildcardTypeArgumentsOrDiamondContext;

NonWildcardTypeArgumentsOrDiamondContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterNonWildcardTypeArgumentsOrDiamond(this);
	}
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitNonWildcardTypeArgumentsOrDiamond(this);
	}
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitNonWildcardTypeArgumentsOrDiamond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.NonWildcardTypeArgumentsOrDiamondContext = NonWildcardTypeArgumentsOrDiamondContext;

apexParser.prototype.nonWildcardTypeArgumentsOrDiamond = function() {

    var localctx = new NonWildcardTypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, apexParser.RULE_nonWildcardTypeArgumentsOrDiamond);
    try {
        this.state = 1198;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1195;
            this.match(apexParser.LT);
            this.state = 1196;
            this.match(apexParser.GT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1197;
            this.nonWildcardTypeArguments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuperSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_superSuffix;
    return this;
}

SuperSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperSuffixContext.prototype.constructor = SuperSuffixContext;

SuperSuffixContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

SuperSuffixContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

SuperSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSuperSuffix(this);
	}
};

SuperSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSuperSuffix(this);
	}
};

SuperSuffixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSuperSuffix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SuperSuffixContext = SuperSuffixContext;

apexParser.prototype.superSuffix = function() {

    var localctx = new SuperSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, apexParser.RULE_superSuffix);
    try {
        this.state = 1206;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1200;
            this.arguments();
            break;
        case apexParser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1201;
            this.match(apexParser.DOT);
            this.state = 1202;
            this.match(apexParser.Identifier);
            this.state = 1204;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
            if(la_===1) {
                this.state = 1203;
                this.arguments();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitGenericInvocationSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_explicitGenericInvocationSuffix;
    return this;
}

ExplicitGenericInvocationSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitGenericInvocationSuffixContext.prototype.constructor = ExplicitGenericInvocationSuffixContext;

ExplicitGenericInvocationSuffixContext.prototype.SUPER = function() {
    return this.getToken(apexParser.SUPER, 0);
};

ExplicitGenericInvocationSuffixContext.prototype.superSuffix = function() {
    return this.getTypedRuleContext(SuperSuffixContext,0);
};

ExplicitGenericInvocationSuffixContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

ExplicitGenericInvocationSuffixContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ExplicitGenericInvocationSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterExplicitGenericInvocationSuffix(this);
	}
};

ExplicitGenericInvocationSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitExplicitGenericInvocationSuffix(this);
	}
};

ExplicitGenericInvocationSuffixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitExplicitGenericInvocationSuffix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ExplicitGenericInvocationSuffixContext = ExplicitGenericInvocationSuffixContext;

apexParser.prototype.explicitGenericInvocationSuffix = function() {

    var localctx = new ExplicitGenericInvocationSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, apexParser.RULE_explicitGenericInvocationSuffix);
    try {
        this.state = 1212;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.SUPER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1208;
            this.match(apexParser.SUPER);
            this.state = 1209;
            this.superSuffix();
            break;
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1210;
            this.match(apexParser.Identifier);
            this.state = 1211;
            this.arguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitArguments(this);
	}
};

ArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ArgumentsContext = ArgumentsContext;

apexParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, apexParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1214;
        this.match(apexParser.LPAREN);
        this.state = 1216;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << apexParser.SET) | (1 << apexParser.BOOLEAN) | (1 << apexParser.BYTE) | (1 << apexParser.CHAR) | (1 << apexParser.DOUBLE) | (1 << apexParser.FLOAT) | (1 << apexParser.INT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (apexParser.LONG - 32)) | (1 << (apexParser.NEW - 32)) | (1 << (apexParser.SHORT - 32)) | (1 << (apexParser.SUPER - 32)) | (1 << (apexParser.THIS - 32)) | (1 << (apexParser.VOID - 32)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (apexParser.IntegerLiteral - 98)) | (1 << (apexParser.FloatingPointLiteral - 98)) | (1 << (apexParser.BooleanLiteral - 98)) | (1 << (apexParser.StringLiteral - 98)) | (1 << (apexParser.NullLiteral - 98)) | (1 << (apexParser.LPAREN - 98)) | (1 << (apexParser.LBRACK - 98)) | (1 << (apexParser.LT - 98)) | (1 << (apexParser.BANG - 98)) | (1 << (apexParser.INC - 98)) | (1 << (apexParser.DEC - 98)) | (1 << (apexParser.ADD - 98)) | (1 << (apexParser.SUB - 98)))) !== 0) || _la===apexParser.Identifier) {
            this.state = 1215;
            this.expressionList();
        }

        this.state = 1218;
        this.match(apexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AccessorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_accessor;
    return this;
}

AccessorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AccessorContext.prototype.constructor = AccessorContext;

AccessorContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

AccessorContext.prototype.GET = function() {
    return this.getToken(apexParser.GET, 0);
};

AccessorContext.prototype.SET = function() {
    return this.getToken(apexParser.SET, 0);
};

AccessorContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterAccessor(this);
	}
};

AccessorContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitAccessor(this);
	}
};

AccessorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitAccessor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.AccessorContext = AccessorContext;

apexParser.prototype.accessor = function() {

    var localctx = new AccessorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, apexParser.RULE_accessor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1220;
        _la = this._input.LA(1);
        if(!(_la===apexParser.SET || _la===apexParser.GET || _la===apexParser.Identifier)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SoqlLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_soqlLiteral;
    return this;
}

SoqlLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SoqlLiteralContext.prototype.constructor = SoqlLiteralContext;

SoqlLiteralContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

SoqlLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSoqlLiteral(this);
	}
};

SoqlLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSoqlLiteral(this);
	}
};

SoqlLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSoqlLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SoqlLiteralContext = SoqlLiteralContext;

apexParser.prototype.soqlLiteral = function() {

    var localctx = new SoqlLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, apexParser.RULE_soqlLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1222;
        this.match(apexParser.LBRACK);
        this.state = 1223;
        this.query();
        this.state = 1224;
        this.match(apexParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.selectClause = function() {
    return this.getTypedRuleContext(SelectClauseContext,0);
};

QueryContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

QueryContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

QueryContext.prototype.withClause = function() {
    return this.getTypedRuleContext(WithClauseContext,0);
};

QueryContext.prototype.groupClause = function() {
    return this.getTypedRuleContext(GroupClauseContext,0);
};

QueryContext.prototype.orderClause = function() {
    return this.getTypedRuleContext(OrderClauseContext,0);
};

QueryContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

QueryContext.prototype.offsetClause = function() {
    return this.getTypedRuleContext(OffsetClauseContext,0);
};

QueryContext.prototype.viewClause = function() {
    return this.getTypedRuleContext(ViewClauseContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitQuery(this);
	}
};

QueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.QueryContext = QueryContext;

apexParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, apexParser.RULE_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1226;
        this.selectClause();
        this.state = 1227;
        this.fromClause();
        this.state = 1229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.WHERE) {
            this.state = 1228;
            this.whereClause();
        }

        this.state = 1232;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.WITH) {
            this.state = 1231;
            this.withClause();
        }

        this.state = 1235;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.GROUP) {
            this.state = 1234;
            this.groupClause();
        }

        this.state = 1238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.ORDER) {
            this.state = 1237;
            this.orderClause();
        }

        this.state = 1241;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.LIMIT) {
            this.state = 1240;
            this.limitClause();
        }

        this.state = 1244;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.OFFSET) {
            this.state = 1243;
            this.offsetClause();
        }

        this.state = 1247;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.FOR) {
            this.state = 1246;
            this.viewClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_selectClause;
    return this;
}

SelectClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectClauseContext.prototype.constructor = SelectClauseContext;

SelectClauseContext.prototype.SELECT = function() {
    return this.getToken(apexParser.SELECT, 0);
};

SelectClauseContext.prototype.fieldList = function() {
    return this.getTypedRuleContext(FieldListContext,0);
};

SelectClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSelectClause(this);
	}
};

SelectClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSelectClause(this);
	}
};

SelectClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSelectClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SelectClauseContext = SelectClauseContext;

apexParser.prototype.selectClause = function() {

    var localctx = new SelectClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, apexParser.RULE_selectClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1249;
        this.match(apexParser.SELECT);
        this.state = 1250;
        this.fieldList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_fieldList;
    return this;
}

FieldListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldListContext.prototype.constructor = FieldListContext;

FieldListContext.prototype.selectField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectFieldContext);
    } else {
        return this.getTypedRuleContext(SelectFieldContext,i);
    }
};

FieldListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.COMMA);
    } else {
        return this.getToken(apexParser.COMMA, i);
    }
};


FieldListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFieldList(this);
	}
};

FieldListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFieldList(this);
	}
};

FieldListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFieldList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FieldListContext = FieldListContext;

apexParser.prototype.fieldList = function() {

    var localctx = new FieldListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, apexParser.RULE_fieldList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1252;
        this.selectField();
        this.state = 1257;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.COMMA) {
            this.state = 1253;
            this.match(apexParser.COMMA);
            this.state = 1254;
            this.selectField();
            this.state = 1259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_selectField;
    return this;
}

SelectFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectFieldContext.prototype.constructor = SelectFieldContext;

SelectFieldContext.prototype.soqlField = function() {
    return this.getTypedRuleContext(SoqlFieldContext,0);
};

SelectFieldContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

SelectFieldContext.prototype.TYPEOF = function() {
    return this.getToken(apexParser.TYPEOF, 0);
};

SelectFieldContext.prototype.ELSE = function() {
    return this.getToken(apexParser.ELSE, 0);
};

SelectFieldContext.prototype.fieldList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldListContext);
    } else {
        return this.getTypedRuleContext(FieldListContext,i);
    }
};

SelectFieldContext.prototype.END = function() {
    return this.getToken(apexParser.END, 0);
};

SelectFieldContext.prototype.WHEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.WHEN);
    } else {
        return this.getToken(apexParser.WHEN, i);
    }
};


SelectFieldContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


SelectFieldContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.THEN);
    } else {
        return this.getToken(apexParser.THEN, i);
    }
};


SelectFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSelectField(this);
	}
};

SelectFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSelectField(this);
	}
};

SelectFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSelectField(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SelectFieldContext = SelectFieldContext;

apexParser.prototype.selectField = function() {

    var localctx = new SelectFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, apexParser.RULE_selectField);
    var _la = 0; // Token type
    try {
        this.state = 1276;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1260;
            this.soqlField();
            break;
        case apexParser.SELECT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1261;
            this.subquery();
            break;
        case apexParser.TYPEOF:
            this.enterOuterAlt(localctx, 3);
            this.state = 1262;
            this.match(apexParser.TYPEOF);
            this.state = 1263;
            this.soqlField();
            this.state = 1268; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1264;
                this.match(apexParser.WHEN);
                this.state = 1265;
                this.match(apexParser.Identifier);
                this.state = 1266;
                this.match(apexParser.THEN);
                this.state = 1267;
                this.fieldList();
                this.state = 1270; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===apexParser.WHEN);
            this.state = 1272;
            this.match(apexParser.ELSE);
            this.state = 1273;
            this.fieldList();
            this.state = 1274;
            this.match(apexParser.END);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_fromClause;
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.FROM = function() {
    return this.getToken(apexParser.FROM, 0);
};

FromClauseContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

FromClauseContext.prototype.USING = function() {
    return this.getToken(apexParser.USING, 0);
};

FromClauseContext.prototype.SCOPE = function() {
    return this.getToken(apexParser.SCOPE, 0);
};

FromClauseContext.prototype.filterScope = function() {
    return this.getTypedRuleContext(FilterScopeContext,0);
};

FromClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFromClause(this);
	}
};

FromClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFromClause(this);
	}
};

FromClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFromClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FromClauseContext = FromClauseContext;

apexParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, apexParser.RULE_fromClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1278;
        this.match(apexParser.FROM);
        this.state = 1279;
        this.match(apexParser.Identifier);
        this.state = 1283;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.USING) {
            this.state = 1280;
            this.match(apexParser.USING);
            this.state = 1281;
            this.match(apexParser.SCOPE);
            this.state = 1282;
            this.filterScope();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FilterScopeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_filterScope;
    return this;
}

FilterScopeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterScopeContext.prototype.constructor = FilterScopeContext;


FilterScopeContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFilterScope(this);
	}
};

FilterScopeContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFilterScope(this);
	}
};

FilterScopeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFilterScope(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FilterScopeContext = FilterScopeContext;

apexParser.prototype.filterScope = function() {

    var localctx = new FilterScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, apexParser.RULE_filterScope);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SoqlFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_soqlField;
    return this;
}

SoqlFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SoqlFieldContext.prototype.constructor = SoqlFieldContext;


 
SoqlFieldContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SoqlFieldReferenceContext(parser, ctx) {
	SoqlFieldContext.call(this, parser);
    SoqlFieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SoqlFieldReferenceContext.prototype = Object.create(SoqlFieldContext.prototype);
SoqlFieldReferenceContext.prototype.constructor = SoqlFieldReferenceContext;

apexParser.SoqlFieldReferenceContext = SoqlFieldReferenceContext;

SoqlFieldReferenceContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.Identifier);
    } else {
        return this.getToken(apexParser.Identifier, i);
    }
};


SoqlFieldReferenceContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.DOT);
    } else {
        return this.getToken(apexParser.DOT, i);
    }
};

SoqlFieldReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSoqlFieldReference(this);
	}
};

SoqlFieldReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSoqlFieldReference(this);
	}
};

SoqlFieldReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSoqlFieldReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SoqlFunctionCallContext(parser, ctx) {
	SoqlFieldContext.call(this, parser);
    SoqlFieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SoqlFunctionCallContext.prototype = Object.create(SoqlFieldContext.prototype);
SoqlFunctionCallContext.prototype.constructor = SoqlFunctionCallContext;

apexParser.SoqlFunctionCallContext = SoqlFunctionCallContext;

SoqlFunctionCallContext.prototype.Identifier = function() {
    return this.getToken(apexParser.Identifier, 0);
};

SoqlFunctionCallContext.prototype.LPAREN = function() {
    return this.getToken(apexParser.LPAREN, 0);
};

SoqlFunctionCallContext.prototype.soqlField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SoqlFieldContext);
    } else {
        return this.getTypedRuleContext(SoqlFieldContext,i);
    }
};

SoqlFunctionCallContext.prototype.RPAREN = function() {
    return this.getToken(apexParser.RPAREN, 0);
};

SoqlFunctionCallContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.COMMA);
    } else {
        return this.getToken(apexParser.COMMA, i);
    }
};

SoqlFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSoqlFunctionCall(this);
	}
};

SoqlFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSoqlFunctionCall(this);
	}
};

SoqlFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSoqlFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};



apexParser.SoqlFieldContext = SoqlFieldContext;

apexParser.prototype.soqlField = function() {

    var localctx = new SoqlFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, apexParser.RULE_soqlField);
    var _la = 0; // Token type
    try {
        this.state = 1307;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SoqlFieldReferenceContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1291;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1287;
                    this.match(apexParser.Identifier);
                    this.state = 1288;
                    this.match(apexParser.DOT); 
                }
                this.state = 1293;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
            }

            this.state = 1294;
            this.match(apexParser.Identifier);
            break;

        case 2:
            localctx = new SoqlFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1295;
            this.match(apexParser.Identifier);
            this.state = 1296;
            this.match(apexParser.LPAREN);
            this.state = 1297;
            this.soqlField();
            this.state = 1302;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===apexParser.COMMA) {
                this.state = 1298;
                this.match(apexParser.COMMA);
                this.state = 1299;
                this.soqlField();
                this.state = 1304;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1305;
            this.match(apexParser.RPAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_subquery;
    return this;
}

SubqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SubqueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSubquery(this);
	}
};

SubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSubquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SubqueryContext = SubqueryContext;

apexParser.prototype.subquery = function() {

    var localctx = new SubqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, apexParser.RULE_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1309;
        this.query();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_whereClause;
    this.and_or = null; // Token
    return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;

WhereClauseContext.prototype.WHERE = function() {
    return this.getToken(apexParser.WHERE, 0);
};

WhereClauseContext.prototype.whereField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhereFieldContext);
    } else {
        return this.getTypedRuleContext(WhereFieldContext,i);
    }
};

WhereClauseContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.AND);
    } else {
        return this.getToken(apexParser.AND, i);
    }
};


WhereClauseContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(apexParser.OR);
    } else {
        return this.getToken(apexParser.OR, i);
    }
};


WhereClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterWhereClause(this);
	}
};

WhereClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitWhereClause(this);
	}
};

WhereClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitWhereClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.WhereClauseContext = WhereClauseContext;

apexParser.prototype.whereClause = function() {

    var localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, apexParser.RULE_whereClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1311;
        this.match(apexParser.WHERE);
        this.state = 1312;
        this.whereField();
        this.state = 1317;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===apexParser.AND || _la===apexParser.OR) {
            this.state = 1313;
            localctx.and_or = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===apexParser.AND || _la===apexParser.OR)) {
                localctx.and_or = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1314;
            this.whereField();
            this.state = 1319;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_whereField;
    this.op = null; // Token
    return this;
}

WhereFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereFieldContext.prototype.constructor = WhereFieldContext;

WhereFieldContext.prototype.soqlField = function() {
    return this.getTypedRuleContext(SoqlFieldContext,0);
};

WhereFieldContext.prototype.soqlValue = function() {
    return this.getTypedRuleContext(SoqlValueContext,0);
};

WhereFieldContext.prototype.LIKE = function() {
    return this.getToken(apexParser.LIKE, 0);
};

WhereFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterWhereField(this);
	}
};

WhereFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitWhereField(this);
	}
};

WhereFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitWhereField(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.WhereFieldContext = WhereFieldContext;

apexParser.prototype.whereField = function() {

    var localctx = new WhereFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, apexParser.RULE_whereField);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1320;
        this.soqlField();
        this.state = 1321;
        localctx.op = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (apexParser.LIKE - 86)) | (1 << (apexParser.ASSIGN - 86)) | (1 << (apexParser.GT - 86)) | (1 << (apexParser.LT - 86)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (apexParser.LE - 120)) | (1 << (apexParser.GE - 120)) | (1 << (apexParser.NOTEQUAL - 120)))) !== 0))) {
            localctx.op = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1322;
        this.soqlValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LimitClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_limitClause;
    return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.LIMIT = function() {
    return this.getToken(apexParser.LIMIT, 0);
};

LimitClauseContext.prototype.IntegerLiteral = function() {
    return this.getToken(apexParser.IntegerLiteral, 0);
};

LimitClauseContext.prototype.bindVariable = function() {
    return this.getTypedRuleContext(BindVariableContext,0);
};

LimitClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterLimitClause(this);
	}
};

LimitClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitLimitClause(this);
	}
};

LimitClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitLimitClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.LimitClauseContext = LimitClauseContext;

apexParser.prototype.limitClause = function() {

    var localctx = new LimitClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, apexParser.RULE_limitClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1324;
        this.match(apexParser.LIMIT);
        this.state = 1327;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.IntegerLiteral:
            this.state = 1325;
            this.match(apexParser.IntegerLiteral);
            break;
        case apexParser.COLON:
            this.state = 1326;
            this.bindVariable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_orderClause;
    this.asc_desc = null; // Token
    this.nulls = null; // Token
    return this;
}

OrderClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderClauseContext.prototype.constructor = OrderClauseContext;

OrderClauseContext.prototype.ORDER = function() {
    return this.getToken(apexParser.ORDER, 0);
};

OrderClauseContext.prototype.BY = function() {
    return this.getToken(apexParser.BY, 0);
};

OrderClauseContext.prototype.soqlField = function() {
    return this.getTypedRuleContext(SoqlFieldContext,0);
};

OrderClauseContext.prototype.NULLS = function() {
    return this.getToken(apexParser.NULLS, 0);
};

OrderClauseContext.prototype.ASC = function() {
    return this.getToken(apexParser.ASC, 0);
};

OrderClauseContext.prototype.DESC = function() {
    return this.getToken(apexParser.DESC, 0);
};

OrderClauseContext.prototype.LAST = function() {
    return this.getToken(apexParser.LAST, 0);
};

OrderClauseContext.prototype.FIRST = function() {
    return this.getToken(apexParser.FIRST, 0);
};

OrderClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterOrderClause(this);
	}
};

OrderClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitOrderClause(this);
	}
};

OrderClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitOrderClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.OrderClauseContext = OrderClauseContext;

apexParser.prototype.orderClause = function() {

    var localctx = new OrderClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, apexParser.RULE_orderClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1329;
        this.match(apexParser.ORDER);
        this.state = 1330;
        this.match(apexParser.BY);
        this.state = 1331;
        this.soqlField();
        this.state = 1333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.ASC || _la===apexParser.DESC) {
            this.state = 1332;
            localctx.asc_desc = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===apexParser.ASC || _la===apexParser.DESC)) {
                localctx.asc_desc = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1337;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.NULLS) {
            this.state = 1335;
            this.match(apexParser.NULLS);
            this.state = 1336;
            localctx.nulls = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===apexParser.FIRST || _la===apexParser.LAST)) {
                localctx.nulls = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_bindVariable;
    return this;
}

BindVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindVariableContext.prototype.constructor = BindVariableContext;

BindVariableContext.prototype.COLON = function() {
    return this.getToken(apexParser.COLON, 0);
};

BindVariableContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BindVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterBindVariable(this);
	}
};

BindVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitBindVariable(this);
	}
};

BindVariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitBindVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.BindVariableContext = BindVariableContext;

apexParser.prototype.bindVariable = function() {

    var localctx = new BindVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, apexParser.RULE_bindVariable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1339;
        this.match(apexParser.COLON);
        this.state = 1340;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SoqlValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_soqlValue;
    return this;
}

SoqlValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SoqlValueContext.prototype.constructor = SoqlValueContext;

SoqlValueContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

SoqlValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSoqlValue(this);
	}
};

SoqlValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSoqlValue(this);
	}
};

SoqlValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSoqlValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SoqlValueContext = SoqlValueContext;

apexParser.prototype.soqlValue = function() {

    var localctx = new SoqlValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, apexParser.RULE_soqlValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1342;
        this.literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_withClause;
    return this;
}

WithClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithClauseContext.prototype.constructor = WithClauseContext;

WithClauseContext.prototype.WITH = function() {
    return this.getToken(apexParser.WITH, 0);
};

WithClauseContext.prototype.DATA = function() {
    return this.getToken(apexParser.DATA, 0);
};

WithClauseContext.prototype.CATEGORY = function() {
    return this.getToken(apexParser.CATEGORY, 0);
};

WithClauseContext.prototype.soqlFilteringExpression = function() {
    return this.getTypedRuleContext(SoqlFilteringExpressionContext,0);
};

WithClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterWithClause(this);
	}
};

WithClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitWithClause(this);
	}
};

WithClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitWithClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.WithClauseContext = WithClauseContext;

apexParser.prototype.withClause = function() {

    var localctx = new WithClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, apexParser.RULE_withClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1344;
        this.match(apexParser.WITH);
        this.state = 1345;
        this.match(apexParser.DATA);
        this.state = 1346;
        this.match(apexParser.CATEGORY);
        this.state = 1347;
        this.soqlFilteringExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SoqlFilteringExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_soqlFilteringExpression;
    return this;
}

SoqlFilteringExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SoqlFilteringExpressionContext.prototype.constructor = SoqlFilteringExpressionContext;


SoqlFilteringExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterSoqlFilteringExpression(this);
	}
};

SoqlFilteringExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitSoqlFilteringExpression(this);
	}
};

SoqlFilteringExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitSoqlFilteringExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.SoqlFilteringExpressionContext = SoqlFilteringExpressionContext;

apexParser.prototype.soqlFilteringExpression = function() {

    var localctx = new SoqlFilteringExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, apexParser.RULE_soqlFilteringExpression);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_groupClause;
    return this;
}

GroupClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupClauseContext.prototype.constructor = GroupClauseContext;

GroupClauseContext.prototype.GROUP = function() {
    return this.getToken(apexParser.GROUP, 0);
};

GroupClauseContext.prototype.BY = function() {
    return this.getToken(apexParser.BY, 0);
};

GroupClauseContext.prototype.fieldGroupList = function() {
    return this.getTypedRuleContext(FieldGroupListContext,0);
};

GroupClauseContext.prototype.HAVING = function() {
    return this.getToken(apexParser.HAVING, 0);
};

GroupClauseContext.prototype.havingConditionExpression = function() {
    return this.getTypedRuleContext(HavingConditionExpressionContext,0);
};

GroupClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterGroupClause(this);
	}
};

GroupClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitGroupClause(this);
	}
};

GroupClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitGroupClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.GroupClauseContext = GroupClauseContext;

apexParser.prototype.groupClause = function() {

    var localctx = new GroupClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, apexParser.RULE_groupClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1351;
        this.match(apexParser.GROUP);
        this.state = 1352;
        this.match(apexParser.BY);
        this.state = 1353;
        this.fieldGroupList();
        this.state = 1356;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.HAVING) {
            this.state = 1354;
            this.match(apexParser.HAVING);
            this.state = 1355;
            this.havingConditionExpression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldGroupListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_fieldGroupList;
    return this;
}

FieldGroupListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldGroupListContext.prototype.constructor = FieldGroupListContext;


FieldGroupListContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterFieldGroupList(this);
	}
};

FieldGroupListContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitFieldGroupList(this);
	}
};

FieldGroupListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitFieldGroupList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.FieldGroupListContext = FieldGroupListContext;

apexParser.prototype.fieldGroupList = function() {

    var localctx = new FieldGroupListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, apexParser.RULE_fieldGroupList);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HavingConditionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_havingConditionExpression;
    return this;
}

HavingConditionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingConditionExpressionContext.prototype.constructor = HavingConditionExpressionContext;


HavingConditionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterHavingConditionExpression(this);
	}
};

HavingConditionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitHavingConditionExpression(this);
	}
};

HavingConditionExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitHavingConditionExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.HavingConditionExpressionContext = HavingConditionExpressionContext;

apexParser.prototype.havingConditionExpression = function() {

    var localctx = new HavingConditionExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, apexParser.RULE_havingConditionExpression);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OffsetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_offsetClause;
    return this;
}

OffsetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OffsetClauseContext.prototype.constructor = OffsetClauseContext;

OffsetClauseContext.prototype.OFFSET = function() {
    return this.getToken(apexParser.OFFSET, 0);
};

OffsetClauseContext.prototype.IntegerLiteral = function() {
    return this.getToken(apexParser.IntegerLiteral, 0);
};

OffsetClauseContext.prototype.bindVariable = function() {
    return this.getTypedRuleContext(BindVariableContext,0);
};

OffsetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterOffsetClause(this);
	}
};

OffsetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitOffsetClause(this);
	}
};

OffsetClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitOffsetClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.OffsetClauseContext = OffsetClauseContext;

apexParser.prototype.offsetClause = function() {

    var localctx = new OffsetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, apexParser.RULE_offsetClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1362;
        this.match(apexParser.OFFSET);
        this.state = 1365;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case apexParser.IntegerLiteral:
            this.state = 1363;
            this.match(apexParser.IntegerLiteral);
            break;
        case apexParser.COLON:
            this.state = 1364;
            this.bindVariable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ViewClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = apexParser.RULE_viewClause;
    return this;
}

ViewClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewClauseContext.prototype.constructor = ViewClauseContext;

ViewClauseContext.prototype.FOR = function() {
    return this.getToken(apexParser.FOR, 0);
};

ViewClauseContext.prototype.VIEW = function() {
    return this.getToken(apexParser.VIEW, 0);
};

ViewClauseContext.prototype.REFERENCE = function() {
    return this.getToken(apexParser.REFERENCE, 0);
};

ViewClauseContext.prototype.UPDATE = function() {
    return this.getToken(apexParser.UPDATE, 0);
};

ViewClauseContext.prototype.TRACKING = function() {
    return this.getToken(apexParser.TRACKING, 0);
};

ViewClauseContext.prototype.VIEWSTAT = function() {
    return this.getToken(apexParser.VIEWSTAT, 0);
};

ViewClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.enterViewClause(this);
	}
};

ViewClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof apexListener ) {
        listener.exitViewClause(this);
	}
};

ViewClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof apexVisitor ) {
        return visitor.visitViewClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




apexParser.ViewClauseContext = ViewClauseContext;

apexParser.prototype.viewClause = function() {

    var localctx = new ViewClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, apexParser.RULE_viewClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1367;
        this.match(apexParser.FOR);
        this.state = 1368;
        _la = this._input.LA(1);
        if(!(_la===apexParser.REFERENCE || _la===apexParser.VIEW)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1371;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===apexParser.UPDATE) {
            this.state = 1369;
            this.match(apexParser.UPDATE);
            this.state = 1370;
            _la = this._input.LA(1);
            if(!(_la===apexParser.VIEWSTAT || _la===apexParser.TRACKING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


apexParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 81:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

apexParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 13);
		case 1:
			return this.precpred(this._ctx, 12);
		case 2:
			return this.precpred(this._ctx, 11);
		case 3:
			return this.precpred(this._ctx, 10);
		case 4:
			return this.precpred(this._ctx, 8);
		case 5:
			return this.precpred(this._ctx, 7);
		case 6:
			return this.precpred(this._ctx, 6);
		case 7:
			return this.precpred(this._ctx, 5);
		case 8:
			return this.precpred(this._ctx, 4);
		case 9:
			return this.precpred(this._ctx, 3);
		case 10:
			return this.precpred(this._ctx, 2);
		case 11:
			return this.precpred(this._ctx, 1);
		case 12:
			return this.precpred(this._ctx, 22);
		case 13:
			return this.precpred(this._ctx, 21);
		case 14:
			return this.precpred(this._ctx, 20);
		case 15:
			return this.precpred(this._ctx, 19);
		case 16:
			return this.precpred(this._ctx, 16);
		case 17:
			return this.precpred(this._ctx, 9);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.apexParser = apexParser;
